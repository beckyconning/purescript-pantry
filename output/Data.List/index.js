// Generated by psc version 0.7.1.0
"use strict";
var Data_Unfoldable = require("Data.Unfoldable");
var Prelude = require("Prelude");
var Data_Foldable = require("Data.Foldable");
var Control_Lazy = require("Control.Lazy");
var Control_Alt = require("Control.Alt");
var Data_Traversable = require("Data.Traversable");
var Data_Monoid = require("Data.Monoid");
var Data_Maybe = require("Data.Maybe");
var Data_Tuple = require("Data.Tuple");
var Control_Plus = require("Control.Plus");
var Control_Alternative = require("Control.Alternative");
var Control_MonadPlus = require("Control.MonadPlus");
var Nil = (function () {
    function Nil() {

    };
    Nil.value = new Nil();
    return Nil;
})();
var Cons = (function () {
    function Cons(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Cons.create = function (value0) {
        return function (value1) {
            return new Cons(value0, value1);
        };
    };
    return Cons;
})();
var $colon = Cons.create;
var zipWith = function (f) {
    return function (_411) {
        return function (_412) {
            if (_411 instanceof Nil) {
                return Nil.value;
            };
            if (_412 instanceof Nil) {
                return Nil.value;
            };
            if (_411 instanceof Cons && _412 instanceof Cons) {
                return new Cons(f(_411.value0)(_412.value0), zipWith(f)(_411.value1)(_412.value1));
            };
            throw new Error("Failed pattern match: " + [ f.constructor.name, _411.constructor.name, _412.constructor.name ]);
        };
    };
};
var zip = zipWith(Data_Tuple.Tuple.create);
var updateAt = function (_397) {
    return function (x) {
        return function (_398) {
            if (_397 === 0 && _398 instanceof Cons) {
                return new Data_Maybe.Just(new Cons(x, _398.value1));
            };
            if (_398 instanceof Cons) {
                return Prelude["<$>"](Data_Maybe.functorMaybe)(Cons.create(_398.value0))(updateAt(Prelude["-"](Prelude.ringInt)(_397)(1))(x)(_398.value1));
            };
            return Data_Maybe.Nothing.value;
        };
    };
};
var unfoldableList = new Data_Unfoldable.Unfoldable(function (f) {
    return function (b) {
        var go = function (_439) {
            if (_439 instanceof Data_Maybe.Nothing) {
                return Nil.value;
            };
            if (_439 instanceof Data_Maybe.Just) {
                return new Cons(_439.value0.value0, go(f(_439.value0.value1)));
            };
            throw new Error("Failed pattern match at /Users/beckyconning/Documents/purescript-pantry/bower_components/purescript-lists/src/Data/List.purs line 720, column 1 - line 726, column 1: " + [ _439.constructor.name ]);
        };
        return go(f(b));
    };
});
var uncons = function (_390) {
    if (_390 instanceof Nil) {
        return Data_Maybe.Nothing.value;
    };
    if (_390 instanceof Cons) {
        return new Data_Maybe.Just({
            head: _390.value0, 
            tail: _390.value1
        });
    };
    throw new Error("Failed pattern match at /Users/beckyconning/Documents/purescript-pantry/bower_components/purescript-lists/src/Data/List.purs line 265, column 1 - line 266, column 1: " + [ _390.constructor.name ]);
};
var toList = function (__dict_Foldable_3) {
    return Data_Foldable.foldr(__dict_Foldable_3)(Cons.create)(Nil.value);
};
var tail = function (_388) {
    if (_388 instanceof Nil) {
        return Data_Maybe.Nothing.value;
    };
    if (_388 instanceof Cons) {
        return new Data_Maybe.Just(_388.value1);
    };
    throw new Error("Failed pattern match at /Users/beckyconning/Documents/purescript-pantry/bower_components/purescript-lists/src/Data/List.purs line 249, column 1 - line 250, column 1: " + [ _388.constructor.name ]);
};
var span = function (p) {
    return function (_405) {
        if (_405 instanceof Cons && p(_405.value0)) {
            var _698 = span(p)(_405.value1);
            return {
                init: new Cons(_405.value0, _698.init), 
                rest: _698.rest
            };
        };
        return {
            init: Nil.value, 
            rest: _405
        };
    };
};
var singleton = function (a) {
    return new Cons(a, Nil.value);
};
var sortBy = function (cmp) {
    var merge = function (_423) {
        return function (_424) {
            if (_423 instanceof Cons && _424 instanceof Cons) {
                if (Prelude["=="](Prelude.eqOrdering)(cmp(_423.value0)(_424.value0))(Prelude.GT.value)) {
                    return new Cons(_424.value0, merge(_423)(_424.value1));
                };
                if (Prelude.otherwise) {
                    return new Cons(_423.value0, merge(_423.value1)(_424));
                };
            };
            if (_423 instanceof Nil) {
                return _424;
            };
            if (_424 instanceof Nil) {
                return _423;
            };
            throw new Error("Failed pattern match at /Users/beckyconning/Documents/purescript-pantry/bower_components/purescript-lists/src/Data/List.purs line 439, column 1 - line 440, column 1: " + [ _423.constructor.name, _424.constructor.name ]);
        };
    };
    var mergePairs = function (_422) {
        if (_422 instanceof Cons && _422.value1 instanceof Cons) {
            return new Cons(merge(_422.value0)(_422.value1.value0), mergePairs(_422.value1.value1));
        };
        return _422;
    };
    var mergeAll = function (__copy__421) {
        var _421 = __copy__421;
        tco: while (true) {
            if (_421 instanceof Cons && _421.value1 instanceof Nil) {
                return _421.value0;
            };
            var __tco__421 = mergePairs(_421);
            _421 = __tco__421;
            continue tco;
        };
    };
    var sequences = function (_418) {
        if (_418 instanceof Cons && _418.value1 instanceof Cons) {
            if (Prelude["=="](Prelude.eqOrdering)(cmp(_418.value0)(_418.value1.value0))(Prelude.GT.value)) {
                return descending(_418.value1.value0)(singleton(_418.value0))(_418.value1.value1);
            };
            if (Prelude.otherwise) {
                return ascending(_418.value1.value0)(Cons.create(_418.value0))(_418.value1.value1);
            };
        };
        return singleton(_418);
    };
    var descending = function (__copy_a) {
        return function (__copy_as) {
            return function (__copy__419) {
                var a = __copy_a;
                var as = __copy_as;
                var _419 = __copy__419;
                tco: while (true) {
                    var a_1 = a;
                    var as_1 = as;
                    if (_419 instanceof Cons && Prelude["=="](Prelude.eqOrdering)(cmp(a_1)(_419.value0))(Prelude.GT.value)) {
                        var __tco_a = _419.value0;
                        var __tco_as = new Cons(a_1, as_1);
                        var __tco__419 = _419.value1;
                        a = __tco_a;
                        as = __tco_as;
                        _419 = __tco__419;
                        continue tco;
                    };
                    return new Cons(new Cons(a, as), sequences(_419));
                };
            };
        };
    };
    var ascending = function (a) {
        return function (as) {
            return function (_420) {
                if (_420 instanceof Cons && Prelude["/="](Prelude.eqOrdering)(cmp(a)(_420.value0))(Prelude.GT.value)) {
                    return ascending(_420.value0)(function (ys) {
                        return as(new Cons(a, ys));
                    })(_420.value1);
                };
                return new Cons(as(singleton(a)), sequences(_420));
            };
        };
    };
    return Prelude["<<<"](Prelude.semigroupoidFn)(mergeAll)(sequences);
};
var sort = function (__dict_Ord_4) {
    return function (xs) {
        return sortBy(Prelude.compare(__dict_Ord_4))(xs);
    };
};
var showList = function (__dict_Show_5) {
    return new Prelude.Show(function (_429) {
        if (_429 instanceof Nil) {
            return "Nil";
        };
        if (_429 instanceof Cons) {
            return "Cons (" + (Prelude.show(__dict_Show_5)(_429.value0) + (") (" + (Prelude.show(showList(__dict_Show_5))(_429.value1) + ")")));
        };
        throw new Error("Failed pattern match: " + [ _429.constructor.name ]);
    });
};
var semigroupList = new Prelude.Semigroup(function (_434) {
    return function (ys) {
        if (_434 instanceof Nil) {
            return ys;
        };
        if (_434 instanceof Cons) {
            return new Cons(_434.value0, Prelude["<>"](semigroupList)(_434.value1)(ys));
        };
        throw new Error("Failed pattern match: " + [ _434.constructor.name, ys.constructor.name ]);
    };
});
var reverse = (function () {
    var go = function (__copy_acc) {
        return function (__copy__415) {
            var acc = __copy_acc;
            var _415 = __copy__415;
            tco: while (true) {
                var acc_1 = acc;
                if (_415 instanceof Nil) {
                    return acc_1;
                };
                if (_415 instanceof Cons) {
                    var __tco_acc = new Cons(_415.value0, acc);
                    var __tco__415 = _415.value1;
                    acc = __tco_acc;
                    _415 = __tco__415;
                    continue tco;
                };
                throw new Error("Failed pattern match at /Users/beckyconning/Documents/purescript-pantry/bower_components/purescript-lists/src/Data/List.purs line 363, column 1 - line 364, column 1: " + [ acc.constructor.name, _415.constructor.name ]);
            };
        };
    };
    return go(Nil.value);
})();
var snoc = function (xs) {
    return function (x) {
        return reverse(new Cons(x, reverse(xs)));
    };
};
var take = (function () {
    var go = function (__copy_acc) {
        return function (__copy__425) {
            return function (__copy__426) {
                var acc = __copy_acc;
                var _425 = __copy__425;
                var _426 = __copy__426;
                tco: while (true) {
                    var acc_1 = acc;
                    if (_425 === 0) {
                        return reverse(acc_1);
                    };
                    var acc_1 = acc;
                    if (_426 instanceof Nil) {
                        return reverse(acc_1);
                    };
                    if (_426 instanceof Cons) {
                        var __tco_acc = new Cons(_426.value0, acc);
                        var __tco__425 = Prelude["-"](Prelude.ringInt)(_425)(1);
                        var __tco__426 = _426.value1;
                        acc = __tco_acc;
                        _425 = __tco__425;
                        _426 = __tco__426;
                        continue tco;
                    };
                    throw new Error("Failed pattern match at /Users/beckyconning/Documents/purescript-pantry/bower_components/purescript-lists/src/Data/List.purs line 485, column 1 - line 486, column 1: " + [ acc.constructor.name, _425.constructor.name, _426.constructor.name ]);
                };
            };
        };
    };
    return go(Nil.value);
})();
var takeWhile = function (p) {
    var go = function (__copy_acc) {
        return function (__copy__427) {
            var acc = __copy_acc;
            var _427 = __copy__427;
            tco: while (true) {
                var acc_1 = acc;
                if (_427 instanceof Cons && p(_427.value0)) {
                    var __tco_acc = new Cons(_427.value0, acc_1);
                    var __tco__427 = _427.value1;
                    acc = __tco_acc;
                    _427 = __tco__427;
                    continue tco;
                };
                return reverse(acc);
            };
        };
    };
    return go(Nil.value);
};
var replicateM = function (__dict_Monad_6) {
    return function (n) {
        return function (m) {
            if (Prelude["<"](Prelude.ordInt)(n)(Prelude.one(Prelude.semiringInt))) {
                return Prelude["return"](__dict_Monad_6["__superclass_Prelude.Applicative_0"]())(Nil.value);
            };
            if (Prelude.otherwise) {
                return Prelude.bind(__dict_Monad_6["__superclass_Prelude.Bind_1"]())(m)(function (_27) {
                    return Prelude.bind(__dict_Monad_6["__superclass_Prelude.Bind_1"]())(replicateM(__dict_Monad_6)(Prelude["-"](Prelude.ringInt)(n)(Prelude.one(Prelude.semiringInt)))(m))(function (_26) {
                        return Prelude["return"](__dict_Monad_6["__superclass_Prelude.Applicative_0"]())(new Cons(_27, _26));
                    });
                });
            };
            throw new Error("Failed pattern match: " + [ n.constructor.name, m.constructor.name ]);
        };
    };
};
var replicate = function (n) {
    return function (value) {
        var go = function (__copy_n_1) {
            return function (__copy_tail_1) {
                var n_1 = __copy_n_1;
                var tail_1 = __copy_tail_1;
                tco: while (true) {
                    if (Prelude["<="](Prelude.ordInt)(n_1)(0)) {
                        return tail_1;
                    };
                    if (Prelude.otherwise) {
                        var __tco_n_1 = Prelude["-"](Prelude.ringInt)(n_1)(1);
                        var __tco_tail_1 = new Cons(value, tail_1);
                        n_1 = __tco_n_1;
                        tail_1 = __tco_tail_1;
                        continue tco;
                    };
                    throw new Error("Failed pattern match at /Users/beckyconning/Documents/purescript-pantry/bower_components/purescript-lists/src/Data/List.purs line 145, column 1 - line 146, column 1: " + [ n_1.constructor.name, tail_1.constructor.name ]);
                };
            };
        };
        return go(n)(Nil.value);
    };
};
var range = function (start) {
    return function (end) {
        if (Prelude["=="](Prelude.eqInt)(start)(end)) {
            return singleton(start);
        };
        if (Prelude.otherwise) {
            var go = function (__copy_s) {
                return function (__copy_e) {
                    return function (__copy_step) {
                        return function (__copy_tail_1) {
                            var s = __copy_s;
                            var e = __copy_e;
                            var step = __copy_step;
                            var tail_1 = __copy_tail_1;
                            tco: while (true) {
                                if (Prelude["=="](Prelude.eqInt)(s)(e)) {
                                    return new Cons(s, tail_1);
                                };
                                if (Prelude.otherwise) {
                                    var __tco_s = Prelude["+"](Prelude.semiringInt)(s)(step);
                                    var __tco_e = e;
                                    var __tco_step = step;
                                    var __tco_tail_1 = new Cons(s, tail_1);
                                    s = __tco_s;
                                    e = __tco_e;
                                    step = __tco_step;
                                    tail_1 = __tco_tail_1;
                                    continue tco;
                                };
                                throw new Error("Failed pattern match at /Users/beckyconning/Documents/purescript-pantry/bower_components/purescript-lists/src/Data/List.purs line 137, column 1 - line 138, column 1: " + [ s.constructor.name, e.constructor.name, step.constructor.name, tail_1.constructor.name ]);
                            };
                        };
                    };
                };
            };
            return go(end)(start)((function () {
                var _764 = Prelude[">"](Prelude.ordInt)(start)(end);
                if (_764) {
                    return 1;
                };
                if (!_764) {
                    return Prelude.negate(Prelude.ringInt)(1);
                };
                throw new Error("Failed pattern match at /Users/beckyconning/Documents/purescript-pantry/bower_components/purescript-lists/src/Data/List.purs line 137, column 1 - line 138, column 1: " + [ _764.constructor.name ]);
            })())(Nil.value);
        };
        throw new Error("Failed pattern match at /Users/beckyconning/Documents/purescript-pantry/bower_components/purescript-lists/src/Data/List.purs line 137, column 1 - line 138, column 1: " + [ start.constructor.name, end.constructor.name ]);
    };
};
var $dot$dot = range;
var $$null = function (_383) {
    if (_383 instanceof Nil) {
        return true;
    };
    return false;
};
var monoidList = new Data_Monoid.Monoid(function () {
    return semigroupList;
}, Nil.value);
var mapMaybe = function (f) {
    var go = function (__copy_acc) {
        return function (__copy__417) {
            var acc = __copy_acc;
            var _417 = __copy__417;
            tco: while (true) {
                var acc_1 = acc;
                if (_417 instanceof Nil) {
                    return reverse(acc_1);
                };
                if (_417 instanceof Cons) {
                    var _768 = f(_417.value0);
                    if (_768 instanceof Data_Maybe.Nothing) {
                        var __tco_acc = acc;
                        var __tco__417 = _417.value1;
                        acc = __tco_acc;
                        _417 = __tco__417;
                        continue tco;
                    };
                    if (_768 instanceof Data_Maybe.Just) {
                        var __tco_acc = new Cons(_768.value0, acc);
                        var __tco__417 = _417.value1;
                        acc = __tco_acc;
                        _417 = __tco__417;
                        continue tco;
                    };
                    throw new Error("Failed pattern match at /Users/beckyconning/Documents/purescript-pantry/bower_components/purescript-lists/src/Data/List.purs line 415, column 1 - line 416, column 1: " + [ _768.constructor.name ]);
                };
                throw new Error("Failed pattern match at /Users/beckyconning/Documents/purescript-pantry/bower_components/purescript-lists/src/Data/List.purs line 415, column 1 - line 416, column 1: " + [ acc.constructor.name, _417.constructor.name ]);
            };
        };
    };
    return go(Nil.value);
};
var some = function (__dict_Alternative_8) {
    return function (__dict_Lazy_9) {
        return function (v) {
            return Prelude["<*>"]((__dict_Alternative_8["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())(Prelude["<$>"](((__dict_Alternative_8["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())["__superclass_Prelude.Functor_0"]())(Cons.create)(v))(Control_Lazy.defer(__dict_Lazy_9)(function (_380) {
                return many(__dict_Alternative_8)(__dict_Lazy_9)(v);
            }));
        };
    };
};
var many = function (__dict_Alternative_10) {
    return function (__dict_Lazy_11) {
        return function (v) {
            return Control_Alt["<|>"]((__dict_Alternative_10["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())(some(__dict_Alternative_10)(__dict_Lazy_11)(v))(Prelude.pure(__dict_Alternative_10["__superclass_Prelude.Applicative_0"]())(Nil.value));
        };
    };
};
var length = function (_384) {
    if (_384 instanceof Nil) {
        return 0;
    };
    if (_384 instanceof Cons) {
        return Prelude["+"](Prelude.semiringInt)(1)(length(_384.value1));
    };
    throw new Error("Failed pattern match: " + [ _384.constructor.name ]);
};
var last = function (__copy__387) {
    var _387 = __copy__387;
    tco: while (true) {
        if (_387 instanceof Cons && _387.value1 instanceof Nil) {
            return new Data_Maybe.Just(_387.value0);
        };
        if (_387 instanceof Cons) {
            var __tco__387 = _387.value1;
            _387 = __tco__387;
            continue tco;
        };
        return Data_Maybe.Nothing.value;
    };
};
var insertBy = function (cmp) {
    return function (x) {
        return function (_385) {
            if (_385 instanceof Nil) {
                return new Cons(x, Nil.value);
            };
            if (_385 instanceof Cons) {
                var _784 = cmp(x)(_385.value0);
                if (_784 instanceof Prelude.GT) {
                    return new Cons(_385.value0, insertBy(cmp)(x)(_385.value1));
                };
                return new Cons(x, _385);
            };
            throw new Error("Failed pattern match: " + [ cmp.constructor.name, x.constructor.name, _385.constructor.name ]);
        };
    };
};
var insertAt = function (_393) {
    return function (x) {
        return function (_394) {
            if (_393 === 0) {
                return new Data_Maybe.Just(new Cons(x, _394));
            };
            if (_394 instanceof Cons) {
                return Prelude["<$>"](Data_Maybe.functorMaybe)(Cons.create(_394.value0))(insertAt(Prelude["-"](Prelude.ringInt)(_393)(1))(x)(_394.value1));
            };
            return Data_Maybe.Nothing.value;
        };
    };
};
var insert = function (__dict_Ord_12) {
    return insertBy(Prelude.compare(__dict_Ord_12));
};
var init = function (_389) {
    if (_389 instanceof Cons && _389.value1 instanceof Nil) {
        return new Data_Maybe.Just(Nil.value);
    };
    if (_389 instanceof Cons) {
        return Prelude["<$>"](Data_Maybe.functorMaybe)(Cons.create(_389.value0))(init(_389.value1));
    };
    return Data_Maybe.Nothing.value;
};
var index = function (__copy__391) {
    return function (__copy__392) {
        var _391 = __copy__391;
        var _392 = __copy__392;
        tco: while (true) {
            if (_391 instanceof Nil) {
                return Data_Maybe.Nothing.value;
            };
            if (_391 instanceof Cons && _392 === 0) {
                return new Data_Maybe.Just(_391.value0);
            };
            if (_391 instanceof Cons) {
                var __tco__391 = _391.value1;
                var __tco__392 = Prelude["-"](Prelude.ringInt)(_392)(1);
                _391 = __tco__391;
                _392 = __tco__392;
                continue tco;
            };
            throw new Error("Failed pattern match: " + [ _391.constructor.name, _392.constructor.name ]);
        };
    };
};
var $bang$bang = index;
var head = function (_386) {
    if (_386 instanceof Nil) {
        return Data_Maybe.Nothing.value;
    };
    if (_386 instanceof Cons) {
        return new Data_Maybe.Just(_386.value0);
    };
    throw new Error("Failed pattern match at /Users/beckyconning/Documents/purescript-pantry/bower_components/purescript-lists/src/Data/List.purs line 234, column 1 - line 235, column 1: " + [ _386.constructor.name ]);
};
var groupBy = function (eq) {
    return function (_406) {
        if (_406 instanceof Nil) {
            return Nil.value;
        };
        if (_406 instanceof Cons) {
            var _808 = span(eq(_406.value0))(_406.value1);
            return new Cons(new Cons(_406.value0, _808.init), groupBy(eq)(_808.rest));
        };
        throw new Error("Failed pattern match: " + [ eq.constructor.name, _406.constructor.name ]);
    };
};
var group = function (__dict_Eq_13) {
    return groupBy(Prelude["=="](__dict_Eq_13));
};
var group$prime = function (__dict_Ord_14) {
    return Prelude["<<<"](Prelude.semigroupoidFn)(group(__dict_Ord_14["__superclass_Prelude.Eq_0"]()))(sort(__dict_Ord_14));
};
var functorList = new Prelude.Functor(function (f) {
    return function (_435) {
        if (_435 instanceof Nil) {
            return Nil.value;
        };
        if (_435 instanceof Cons) {
            return new Cons(f(_435.value0), Prelude["<$>"](functorList)(f)(_435.value1));
        };
        throw new Error("Failed pattern match: " + [ f.constructor.name, _435.constructor.name ]);
    };
});
var fromList = function (__dict_Unfoldable_15) {
    return Data_Unfoldable.unfoldr(__dict_Unfoldable_15)(function (xs) {
        return Prelude["<$>"](Data_Maybe.functorMaybe)(function (rec) {
            return new Data_Tuple.Tuple(rec.head, rec.tail);
        })(uncons(xs));
    });
};
var foldableList = new Data_Foldable.Foldable(function (__dict_Monoid_16) {
    return function (f) {
        return function (_438) {
            if (_438 instanceof Nil) {
                return Data_Monoid.mempty(__dict_Monoid_16);
            };
            if (_438 instanceof Cons) {
                return Prelude["<>"](__dict_Monoid_16["__superclass_Prelude.Semigroup_0"]())(f(_438.value0))(Data_Foldable.foldMap(foldableList)(__dict_Monoid_16)(f)(_438.value1));
            };
            throw new Error("Failed pattern match: " + [ f.constructor.name, _438.constructor.name ]);
        };
    };
}, function (o) {
    return function (b) {
        return function (_437) {
            if (_437 instanceof Nil) {
                return b;
            };
            if (_437 instanceof Cons) {
                return Data_Foldable.foldl(foldableList)(o)(o(b)(_437.value0))(_437.value1);
            };
            throw new Error("Failed pattern match: " + [ o.constructor.name, b.constructor.name, _437.constructor.name ]);
        };
    };
}, function (o) {
    return function (b) {
        return function (_436) {
            if (_436 instanceof Nil) {
                return b;
            };
            if (_436 instanceof Cons) {
                return o(_436.value0)(Data_Foldable.foldr(foldableList)(o)(b)(_436.value1));
            };
            throw new Error("Failed pattern match: " + [ o.constructor.name, b.constructor.name, _436.constructor.name ]);
        };
    };
});
var traversableList = new Data_Traversable.Traversable(function () {
    return foldableList;
}, function () {
    return functorList;
}, function (__dict_Applicative_2) {
    return function (_441) {
        if (_441 instanceof Nil) {
            return Prelude.pure(__dict_Applicative_2)(Nil.value);
        };
        if (_441 instanceof Cons) {
            return Prelude["<*>"](__dict_Applicative_2["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_2["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Cons.create)(_441.value0))(Data_Traversable.sequence(traversableList)(__dict_Applicative_2)(_441.value1));
        };
        throw new Error("Failed pattern match: " + [ _441.constructor.name ]);
    };
}, function (__dict_Applicative_1) {
    return function (f) {
        return function (_440) {
            if (_440 instanceof Nil) {
                return Prelude.pure(__dict_Applicative_1)(Nil.value);
            };
            if (_440 instanceof Cons) {
                return Prelude["<*>"](__dict_Applicative_1["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_1["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Cons.create)(f(_440.value0)))(Data_Traversable.traverse(traversableList)(__dict_Applicative_1)(f)(_440.value1));
            };
            throw new Error("Failed pattern match: " + [ f.constructor.name, _440.constructor.name ]);
        };
    };
});
var zipWithA = function (__dict_Applicative_0) {
    return function (f) {
        return function (xs) {
            return function (ys) {
                return Data_Traversable.sequence(traversableList)(__dict_Applicative_0)(zipWith(f)(xs)(ys));
            };
        };
    };
};
var unzip = Data_Foldable.foldr(foldableList)(function (_382) {
    return function (_381) {
        return new Data_Tuple.Tuple(new Cons(_382.value0, _381.value0), new Cons(_382.value1, _381.value1));
    };
})(new Data_Tuple.Tuple(Nil.value, Nil.value));
var foldM = function (__dict_Monad_17) {
    return function (f) {
        return function (a) {
            return function (_413) {
                if (_413 instanceof Nil) {
                    return Prelude["return"](__dict_Monad_17["__superclass_Prelude.Applicative_0"]())(a);
                };
                if (_413 instanceof Cons) {
                    return Prelude[">>="](__dict_Monad_17["__superclass_Prelude.Bind_1"]())(f(a)(_413.value0))(function (a$prime) {
                        return foldM(__dict_Monad_17)(f)(a$prime)(_413.value1);
                    });
                };
                throw new Error("Failed pattern match: " + [ f.constructor.name, a.constructor.name, _413.constructor.name ]);
            };
        };
    };
};
var findIndex = function (fn) {
    var go = function (__copy_n) {
        return function (__copy__414) {
            var n = __copy_n;
            var _414 = __copy__414;
            tco: while (true) {
                if (_414 instanceof Cons) {
                    if (fn(_414.value0)) {
                        return new Data_Maybe.Just(n);
                    };
                    if (Prelude.otherwise) {
                        var __tco_n = Prelude["+"](Prelude.semiringInt)(n)(1);
                        var __tco__414 = _414.value1;
                        n = __tco_n;
                        _414 = __tco__414;
                        continue tco;
                    };
                };
                if (_414 instanceof Nil) {
                    return Data_Maybe.Nothing.value;
                };
                throw new Error("Failed pattern match at /Users/beckyconning/Documents/purescript-pantry/bower_components/purescript-lists/src/Data/List.purs line 296, column 1 - line 297, column 1: " + [ n.constructor.name, _414.constructor.name ]);
            };
        };
    };
    return go(0);
};
var findLastIndex = function (fn) {
    return function (xs) {
        return Prelude["<$>"](Data_Maybe.functorMaybe)(Prelude["-"](Prelude.ringInt)(Prelude["-"](Prelude.ringInt)(length(xs))(1)))(findIndex(fn)(reverse(xs)));
    };
};
var filterM = function (__dict_Monad_18) {
    return function (p) {
        return function (_402) {
            if (_402 instanceof Nil) {
                return Prelude["return"](__dict_Monad_18["__superclass_Prelude.Applicative_0"]())(Nil.value);
            };
            if (_402 instanceof Cons) {
                return Prelude.bind(__dict_Monad_18["__superclass_Prelude.Bind_1"]())(p(_402.value0))(function (_29) {
                    return Prelude.bind(__dict_Monad_18["__superclass_Prelude.Bind_1"]())(filterM(__dict_Monad_18)(p)(_402.value1))(function (_28) {
                        return Prelude["return"](__dict_Monad_18["__superclass_Prelude.Applicative_0"]())((function () {
                            if (_29) {
                                return new Cons(_402.value0, _28);
                            };
                            if (!_29) {
                                return _28;
                            };
                            throw new Error("Failed pattern match: " + [ _29.constructor.name ]);
                        })());
                    });
                });
            };
            throw new Error("Failed pattern match: " + [ p.constructor.name, _402.constructor.name ]);
        };
    };
};
var filter = function (p) {
    var go = function (__copy_acc) {
        return function (__copy__416) {
            var acc = __copy_acc;
            var _416 = __copy__416;
            tco: while (true) {
                var acc_1 = acc;
                if (_416 instanceof Nil) {
                    return reverse(acc_1);
                };
                if (_416 instanceof Cons) {
                    if (p(_416.value0)) {
                        var __tco_acc = new Cons(_416.value0, acc);
                        var __tco__416 = _416.value1;
                        acc = __tco_acc;
                        _416 = __tco__416;
                        continue tco;
                    };
                    if (Prelude.otherwise) {
                        var __tco_acc = acc;
                        var __tco__416 = _416.value1;
                        acc = __tco_acc;
                        _416 = __tco__416;
                        continue tco;
                    };
                };
                throw new Error("Failed pattern match at /Users/beckyconning/Documents/purescript-pantry/bower_components/purescript-lists/src/Data/List.purs line 386, column 1 - line 387, column 1: " + [ acc.constructor.name, _416.constructor.name ]);
            };
        };
    };
    return go(Nil.value);
};
var intersectBy = function (eq) {
    return function (_409) {
        return function (_410) {
            if (_409 instanceof Nil) {
                return Nil.value;
            };
            if (_410 instanceof Nil) {
                return Nil.value;
            };
            return filter(function (x) {
                return Data_Foldable.any(foldableList)(Prelude.booleanAlgebraBoolean)(eq(x))(_410);
            })(_409);
        };
    };
};
var intersect = function (__dict_Eq_19) {
    return intersectBy(Prelude["=="](__dict_Eq_19));
};
var nubBy = function ($eq$eq) {
    return function (_407) {
        if (_407 instanceof Nil) {
            return Nil.value;
        };
        if (_407 instanceof Cons) {
            return new Cons(_407.value0, nubBy($eq$eq)(filter(function (y) {
                return Prelude.not(Prelude.booleanAlgebraBoolean)($eq$eq(_407.value0)(y));
            })(_407.value1)));
        };
        throw new Error("Failed pattern match: " + [ $eq$eq.constructor.name, _407.constructor.name ]);
    };
};
var nub = function (__dict_Eq_20) {
    return nubBy(Prelude["=="](__dict_Eq_20));
};
var eqList = function (__dict_Eq_21) {
    return new Prelude.Eq(function (_430) {
        return function (_431) {
            if (_430 instanceof Nil && _431 instanceof Nil) {
                return true;
            };
            if (_430 instanceof Cons && _431 instanceof Cons) {
                return Prelude["&&"](Prelude.booleanAlgebraBoolean)(Prelude["=="](__dict_Eq_21)(_430.value0)(_431.value0))(Prelude["=="](eqList(__dict_Eq_21))(_430.value1)(_431.value1));
            };
            return false;
        };
    });
};
var ordList = function (__dict_Ord_7) {
    return new Prelude.Ord(function () {
        return eqList(__dict_Ord_7["__superclass_Prelude.Eq_0"]());
    }, function (_432) {
        return function (_433) {
            if (_432 instanceof Nil && _433 instanceof Nil) {
                return Prelude.EQ.value;
            };
            if (_432 instanceof Nil) {
                return Prelude.LT.value;
            };
            if (_433 instanceof Nil) {
                return Prelude.GT.value;
            };
            if (_432 instanceof Cons && _433 instanceof Cons) {
                var _879 = Prelude.compare(__dict_Ord_7)(_432.value0)(_433.value0);
                if (_879 instanceof Prelude.EQ) {
                    return Prelude.compare(ordList(__dict_Ord_7))(_432.value1)(_433.value1);
                };
                return _879;
            };
            throw new Error("Failed pattern match: " + [ _432.constructor.name, _433.constructor.name ]);
        };
    });
};
var elemLastIndex = function (__dict_Eq_22) {
    return function (x) {
        return findLastIndex(function (_13) {
            return Prelude["=="](__dict_Eq_22)(_13)(x);
        });
    };
};
var elemIndex = function (__dict_Eq_23) {
    return function (x) {
        return findIndex(function (_12) {
            return Prelude["=="](__dict_Eq_23)(_12)(x);
        });
    };
};
var dropWhile = function (p) {
    var go = function (__copy__428) {
        var _428 = __copy__428;
        tco: while (true) {
            if (_428 instanceof Cons && p(_428.value0)) {
                var __tco__428 = _428.value1;
                _428 = __tco__428;
                continue tco;
            };
            return _428;
        };
    };
    return go;
};
var drop = function (__copy__403) {
    return function (__copy__404) {
        var _403 = __copy__403;
        var _404 = __copy__404;
        tco: while (true) {
            if (_403 === 0) {
                return _404;
            };
            if (_404 instanceof Nil) {
                return Nil.value;
            };
            if (_404 instanceof Cons) {
                var __tco__403 = Prelude["-"](Prelude.ringInt)(_403)(1);
                var __tco__404 = _404.value1;
                _403 = __tco__403;
                _404 = __tco__404;
                continue tco;
            };
            throw new Error("Failed pattern match: " + [ _403.constructor.name, _404.constructor.name ]);
        };
    };
};
var slice = function (start) {
    return function (end) {
        return function (xs) {
            return take(Prelude["-"](Prelude.ringInt)(end)(start))(drop(start)(xs));
        };
    };
};
var deleteBy = function ($eq$eq) {
    return function (x) {
        return function (_408) {
            if (_408 instanceof Nil) {
                return Nil.value;
            };
            if (_408 instanceof Cons && $eq$eq(x)(_408.value0)) {
                return _408.value1;
            };
            if (_408 instanceof Cons) {
                return new Cons(_408.value0, deleteBy($eq$eq)(x)(_408.value1));
            };
            throw new Error("Failed pattern match: " + [ $eq$eq.constructor.name, x.constructor.name, _408.constructor.name ]);
        };
    };
};
var unionBy = function (eq) {
    return function (xs) {
        return function (ys) {
            return Prelude["<>"](semigroupList)(xs)(Data_Foldable.foldl(foldableList)(Prelude.flip(deleteBy(eq)))(nubBy(eq)(ys))(xs));
        };
    };
};
var union = function (__dict_Eq_24) {
    return unionBy(Prelude["=="](__dict_Eq_24));
};
var deleteAt = function (_395) {
    return function (_396) {
        if (_395 === 0 && _396 instanceof Cons) {
            return new Data_Maybe.Just(_396.value1);
        };
        if (_396 instanceof Cons) {
            return Prelude["<$>"](Data_Maybe.functorMaybe)(Cons.create(_396.value0))(deleteAt(Prelude["-"](Prelude.ringInt)(_395)(1))(_396.value1));
        };
        return Data_Maybe.Nothing.value;
    };
};
var $$delete = function (__dict_Eq_25) {
    return deleteBy(Prelude["=="](__dict_Eq_25));
};
var $bslash$bslash = function (__dict_Eq_26) {
    return Data_Foldable.foldl(foldableList)(Prelude.flip($$delete(__dict_Eq_26)));
};
var concatMap = function (f) {
    return function (_401) {
        if (_401 instanceof Nil) {
            return Nil.value;
        };
        if (_401 instanceof Cons) {
            return Prelude["<>"](semigroupList)(f(_401.value0))(concatMap(f)(_401.value1));
        };
        throw new Error("Failed pattern match: " + [ f.constructor.name, _401.constructor.name ]);
    };
};
var catMaybes = mapMaybe(Prelude.id(Prelude.categoryFn));
var applyList = new Prelude.Apply(function () {
    return functorList;
}, function (_442) {
    return function (xs) {
        if (_442 instanceof Nil) {
            return Nil.value;
        };
        if (_442 instanceof Cons) {
            return Prelude["<>"](semigroupList)(Prelude["<$>"](functorList)(_442.value0)(xs))(Prelude["<*>"](applyList)(_442.value1)(xs));
        };
        throw new Error("Failed pattern match: " + [ _442.constructor.name, xs.constructor.name ]);
    };
});
var bindList = new Prelude.Bind(function () {
    return applyList;
}, Prelude.flip(concatMap));
var concat = function (_14) {
    return Prelude[">>="](bindList)(_14)(Prelude.id(Prelude.categoryFn));
};
var applicativeList = new Prelude.Applicative(function () {
    return applyList;
}, function (a) {
    return new Cons(a, Nil.value);
});
var monadList = new Prelude.Monad(function () {
    return applicativeList;
}, function () {
    return bindList;
});
var alterAt = function (_399) {
    return function (f) {
        return function (_400) {
            if (_399 === 0 && _400 instanceof Cons) {
                return Data_Maybe.Just.create((function () {
                    var _915 = f(_400.value0);
                    if (_915 instanceof Data_Maybe.Nothing) {
                        return _400.value1;
                    };
                    if (_915 instanceof Data_Maybe.Just) {
                        return new Cons(_915.value0, _400.value1);
                    };
                    throw new Error("Failed pattern match: " + [ _915.constructor.name ]);
                })());
            };
            if (_400 instanceof Cons) {
                return Prelude["<$>"](Data_Maybe.functorMaybe)(Cons.create(_400.value0))(alterAt(Prelude["-"](Prelude.ringInt)(_399)(1))(f)(_400.value1));
            };
            return Data_Maybe.Nothing.value;
        };
    };
};
var modifyAt = function (n) {
    return function (f) {
        return alterAt(n)(Prelude["<<<"](Prelude.semigroupoidFn)(Data_Maybe.Just.create)(f));
    };
};
var altList = new Control_Alt.Alt(function () {
    return functorList;
}, Prelude.append(semigroupList));
var plusList = new Control_Plus.Plus(function () {
    return altList;
}, Nil.value);
var alternativeList = new Control_Alternative.Alternative(function () {
    return plusList;
}, function () {
    return applicativeList;
});
var monadPlusList = new Control_MonadPlus.MonadPlus(function () {
    return alternativeList;
}, function () {
    return monadList;
});
module.exports = {
    Nil: Nil, 
    Cons: Cons, 
    foldM: foldM, 
    unzip: unzip, 
    zip: zip, 
    zipWithA: zipWithA, 
    zipWith: zipWith, 
    intersectBy: intersectBy, 
    intersect: intersect, 
    "\\\\": $bslash$bslash, 
    deleteBy: deleteBy, 
    "delete": $$delete, 
    unionBy: unionBy, 
    union: union, 
    nubBy: nubBy, 
    nub: nub, 
    groupBy: groupBy, 
    "group'": group$prime, 
    group: group, 
    span: span, 
    dropWhile: dropWhile, 
    drop: drop, 
    takeWhile: takeWhile, 
    take: take, 
    slice: slice, 
    sortBy: sortBy, 
    sort: sort, 
    catMaybes: catMaybes, 
    mapMaybe: mapMaybe, 
    filterM: filterM, 
    filter: filter, 
    concatMap: concatMap, 
    concat: concat, 
    reverse: reverse, 
    alterAt: alterAt, 
    modifyAt: modifyAt, 
    updateAt: updateAt, 
    deleteAt: deleteAt, 
    insertAt: insertAt, 
    findLastIndex: findLastIndex, 
    findIndex: findIndex, 
    elemLastIndex: elemLastIndex, 
    elemIndex: elemIndex, 
    index: index, 
    "!!": $bang$bang, 
    uncons: uncons, 
    init: init, 
    tail: tail, 
    last: last, 
    head: head, 
    insertBy: insertBy, 
    insert: insert, 
    snoc: snoc, 
    ":": $colon, 
    length: length, 
    "null": $$null, 
    many: many, 
    some: some, 
    replicateM: replicateM, 
    replicate: replicate, 
    range: range, 
    "..": $dot$dot, 
    singleton: singleton, 
    toList: toList, 
    fromList: fromList, 
    showList: showList, 
    eqList: eqList, 
    ordList: ordList, 
    semigroupList: semigroupList, 
    monoidList: monoidList, 
    functorList: functorList, 
    foldableList: foldableList, 
    unfoldableList: unfoldableList, 
    traversableList: traversableList, 
    applyList: applyList, 
    applicativeList: applicativeList, 
    bindList: bindList, 
    monadList: monadList, 
    altList: altList, 
    plusList: plusList, 
    alternativeList: alternativeList, 
    monadPlusList: monadPlusList
};
