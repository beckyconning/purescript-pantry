// Generated by psc version 0.7.1.0
"use strict";
var $foreign = require("./foreign");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Prelude = require("Prelude");
var Data_Function = require("Data.Function");
var Data_Monoid = require("Data.Monoid");
var Data_Foldable = require("Data.Foldable");
var Data_Tuple = require("Data.Tuple");
var Data_Traversable = require("Data.Traversable");
var Data_Maybe = require("Data.Maybe");
var Data_StrMap_ST = require("Data.StrMap.ST");
var Data_List = require("Data.List");
var Control_Monad_ST = require("Control.Monad.ST");
var values = Prelude["<<<"](Prelude.semigroupoidFn)(Data_List.toList(Data_Foldable.foldableArray))($foreign._collect(function (_503) {
    return function (v) {
        return v;
    };
}));
var toList = Prelude["<<<"](Prelude.semigroupoidFn)(Data_List.toList(Data_Foldable.foldableArray))($foreign._collect(Data_Tuple.Tuple.create));
var thawST = $foreign._copyEff;
var showStrMap = function (__dict_Show_0) {
    return new Prelude.Show(function (m) {
        return "fromList " + Prelude.show(Data_List.showList(Data_Tuple.showTuple(Prelude.showString)(__dict_Show_0)))(toList(m));
    });
};
var pureST = function (f) {
    return Control_Monad_Eff.runPure($foreign.runST(f));
};
var singleton = function (k) {
    return function (v) {
        return pureST(function __do() {
            var _32 = Data_StrMap_ST["new"]();
            Data_StrMap_ST.poke(_32)(k)(v)();
            return Prelude["return"](Control_Monad_Eff.applicativeEff)(_32)();
        });
    };
};
var mutate = function (f) {
    return function (m) {
        return pureST(function __do() {
            var _31 = thawST(m)();
            f(_31)();
            return Prelude["return"](Control_Monad_Eff.applicativeEff)(_31)();
        });
    };
};
var member = Data_Function.runFn4($foreign._lookup)(false)(Prelude["const"](true));
var lookup = Data_Function.runFn4($foreign._lookup)(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
var isSubmap = function (__dict_Eq_2) {
    return function (m1) {
        return function (m2) {
            var f = function (k) {
                return function (v) {
                    return $foreign._lookup(false, Prelude["=="](__dict_Eq_2)(v), k, m2);
                };
            };
            return $foreign.all(f)(m1);
        };
    };
};
var isEmpty = $foreign.all(function (_500) {
    return function (_499) {
        return false;
    };
});
var insert = function (k) {
    return function (v) {
        return mutate(function (s) {
            return Data_StrMap_ST.poke(s)(k)(v);
        });
    };
};
var functorStrMap = new Prelude.Functor(function (f) {
    return function (m) {
        return $foreign._fmapStrMap(m, f);
    };
});
var fromListWith = function (f) {
    return function (l) {
        return pureST(function __do() {
            var _34 = Data_StrMap_ST["new"]();
            Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_List.foldableList)(l)(function (_502) {
                return Prelude[">>="](Control_Monad_Eff.bindEff)($foreign._lookupST(_502.value1, f(_502.value1), _502.value0, _34))(Data_StrMap_ST.poke(_34)(_502.value0));
            })();
            return Prelude["return"](Control_Monad_Eff.applicativeEff)(_34)();
        });
    };
};
var fromList = function (l) {
    return pureST(function __do() {
        var _33 = Data_StrMap_ST["new"]();
        Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_List.foldableList)(l)(function (_501) {
            return Data_StrMap_ST.poke(_33)(_501.value0)(_501.value1);
        })();
        return Prelude["return"](Control_Monad_Eff.applicativeEff)(_33)();
    });
};
var freezeST = $foreign._copyEff;
var foldMaybe = function (f) {
    return function (z) {
        return function (m) {
            return $foreign._foldSCStrMap(m, z, f, Data_Maybe.fromMaybe);
        };
    };
};
var foldM = function (__dict_Monad_3) {
    return function (f) {
        return function (z) {
            return $foreign._foldM(Prelude[">>="](__dict_Monad_3["__superclass_Prelude.Bind_1"]()))(f)(Prelude.pure(__dict_Monad_3["__superclass_Prelude.Applicative_0"]())(z));
        };
    };
};
var semigroupStrMap = function (__dict_Semigroup_4) {
    return new Prelude.Semigroup(function (m1) {
        return function (m2) {
            return mutate(function (s1) {
                return foldM(Control_Monad_Eff.monadEff)(function (s2) {
                    return function (k) {
                        return function (v2) {
                            return Data_StrMap_ST.poke(s2)(k)($foreign._lookup(v2, function (v1) {
                                return Prelude["<>"](__dict_Semigroup_4)(v1)(v2);
                            }, k, m2));
                        };
                    };
                })(s1)(m1);
            })(m2);
        };
    });
};
var monoidStrMap = function (__dict_Semigroup_1) {
    return new Data_Monoid.Monoid(function () {
        return semigroupStrMap(__dict_Semigroup_1);
    }, $foreign.empty);
};
var union = function (m) {
    return mutate(function (s) {
        return foldM(Control_Monad_Eff.monadEff)(Data_StrMap_ST.poke)(s)(m);
    });
};
var unions = Data_Foldable.foldl(Data_List.foldableList)(union)($foreign.empty);
var fold = $foreign._foldM(Prelude["#"]);
var foldMap = function (__dict_Monoid_7) {
    return function (f) {
        return fold(function (acc) {
            return function (k) {
                return function (v) {
                    return Prelude["<>"](__dict_Monoid_7["__superclass_Prelude.Semigroup_0"]())(acc)(f(k)(v));
                };
            };
        })(Data_Monoid.mempty(__dict_Monoid_7));
    };
};
var foldableStrMap = new Data_Foldable.Foldable(function (__dict_Monoid_8) {
    return function (f) {
        return foldMap(__dict_Monoid_8)(Prelude["const"](f));
    };
}, function (f) {
    return fold(function (z) {
        return function (_498) {
            return f(z);
        };
    });
}, function (f) {
    return function (z) {
        return function (m) {
            return Data_Foldable.foldr(Data_List.foldableList)(f)(z)(values(m));
        };
    };
});
var traversableStrMap = new Data_Traversable.Traversable(function () {
    return foldableStrMap;
}, function () {
    return functorStrMap;
}, function (__dict_Applicative_6) {
    return Data_Traversable.traverse(traversableStrMap)(__dict_Applicative_6)(Prelude.id(Prelude.categoryFn));
}, function (__dict_Applicative_5) {
    return function (f) {
        return function (ms) {
            return Data_Foldable.foldr(Data_List.foldableList)(function (x) {
                return function (acc) {
                    return Prelude["<*>"](__dict_Applicative_5["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_5["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(union)(x))(acc);
                };
            })(Prelude.pure(__dict_Applicative_5)($foreign.empty))(Prelude["<$>"](Data_List.functorList)(Prelude.map((__dict_Applicative_5["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Tuple.uncurry(singleton)))(Prelude["<$>"](Data_List.functorList)(Data_Traversable.traverse(Data_Tuple.traversableTuple)(__dict_Applicative_5)(f))(toList(ms))));
        };
    };
});
var eqStrMap = function (__dict_Eq_9) {
    return new Prelude.Eq(function (m1) {
        return function (m2) {
            return Prelude["&&"](Prelude.booleanAlgebraBoolean)(isSubmap(__dict_Eq_9)(m1)(m2))(isSubmap(__dict_Eq_9)(m2)(m1));
        };
    });
};
var $$delete = function (k) {
    return mutate(function (s) {
        return Data_StrMap_ST["delete"](s)(k);
    });
};
var alter = function (f) {
    return function (k) {
        return function (m) {
            var _691 = f(lookup(k)(m));
            if (_691 instanceof Data_Maybe.Nothing) {
                return $$delete(k)(m);
            };
            if (_691 instanceof Data_Maybe.Just) {
                return insert(k)(_691.value0)(m);
            };
            throw new Error("Failed pattern match at /Users/beckyconning/Documents/purescript-pantry/bower_components/purescript-maps/src/Data/StrMap.purs line 175, column 1 - line 176, column 1: " + [ _691.constructor.name ]);
        };
    };
};
var update = function (f) {
    return function (k) {
        return function (m) {
            return alter(Data_Maybe.maybe(Data_Maybe.Nothing.value)(f))(k)(m);
        };
    };
};
module.exports = {
    freezeST: freezeST, 
    thawST: thawST, 
    foldMaybe: foldMaybe, 
    foldM: foldM, 
    foldMap: foldMap, 
    fold: fold, 
    isSubmap: isSubmap, 
    unions: unions, 
    union: union, 
    values: values, 
    update: update, 
    alter: alter, 
    member: member, 
    "delete": $$delete, 
    fromListWith: fromListWith, 
    fromList: fromList, 
    toList: toList, 
    lookup: lookup, 
    insert: insert, 
    singleton: singleton, 
    isEmpty: isEmpty, 
    functorStrMap: functorStrMap, 
    foldableStrMap: foldableStrMap, 
    traversableStrMap: traversableStrMap, 
    eqStrMap: eqStrMap, 
    showStrMap: showStrMap, 
    semigroupStrMap: semigroupStrMap, 
    monoidStrMap: monoidStrMap, 
    runST: $foreign.runST, 
    all: $foreign.all, 
    keys: $foreign.keys, 
    size: $foreign.size, 
    empty: $foreign.empty
};
