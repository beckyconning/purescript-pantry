// Generated by psc version 0.7.1.0
"use strict";
var Prelude = require("Prelude");
var Test_QuickCheck_Arbitrary = require("Test.QuickCheck.Arbitrary");
var Test_QuickCheck_Gen = require("Test.QuickCheck.Gen");
var ApproxNumber = function (x) {
    return x;
};
var $eq$tilde$eq = function (x) {
    return function (y) {
        return Prelude["&&"](Prelude.booleanAlgebraBoolean)(y - x <= 1.0000000000000002e-8)(y - x >= -1.0000000000000002e-8);
    };
};
var semiringApproxNumber = new Prelude.Semiring(function (_19) {
    return function (_20) {
        return _19 + _20;
    };
}, function (_21) {
    return function (_22) {
        return _21 * _22;
    };
}, 1, 0);
var ringApproxNumber = new Prelude.Ring(function () {
    return semiringApproxNumber;
}, function (_27) {
    return function (_28) {
        return _27 - _28;
    };
});
var moduloSemiringApproxNumber = new Prelude.ModuloSemiring(function () {
    return semiringApproxNumber;
}, function (_23) {
    return function (_24) {
        return _23 / _24;
    };
}, function (_25) {
    return function (_26) {
        return Prelude.mod(Prelude.moduloSemiringNumber)(_25)(_26);
    };
});
var eqApproxNumber = new Prelude.Eq(function (_15) {
    return function (_16) {
        return $eq$tilde$eq(_15)(_16);
    };
});
var ordApproxNumber = new Prelude.Ord(function () {
    return eqApproxNumber;
}, function (_17) {
    return function (_18) {
        return Prelude.compare(Prelude.ordNumber)(_17)(_18);
    };
});
var divisionRingApproxNumber = new Prelude.DivisionRing(function () {
    return moduloSemiringApproxNumber;
}, function () {
    return ringApproxNumber;
});
var numApproxNumber = new Prelude.Num(function () {
    return divisionRingApproxNumber;
});
var coarbitraryApproxNumber = new Test_QuickCheck_Arbitrary.Coarbitrary(function (_14) {
    return Test_QuickCheck_Arbitrary.coarbitrary(Test_QuickCheck_Arbitrary.coarbNumber)(_14);
});
var arbitraryApproxNumber = new Test_QuickCheck_Arbitrary.Arbitrary(Prelude["<$>"](Test_QuickCheck_Gen.functorGen)(ApproxNumber)(Test_QuickCheck_Arbitrary.arbitrary(Test_QuickCheck_Arbitrary.arbNumber)));
module.exports = {
    ApproxNumber: ApproxNumber, 
    "=~=": $eq$tilde$eq, 
    arbitraryApproxNumber: arbitraryApproxNumber, 
    coarbitraryApproxNumber: coarbitraryApproxNumber, 
    eqApproxNumber: eqApproxNumber, 
    ordApproxNumber: ordApproxNumber, 
    semiringApproxNumber: semiringApproxNumber, 
    moduloSemiringApproxNumber: moduloSemiringApproxNumber, 
    ringApproxNumber: ringApproxNumber, 
    divisionRingApproxNumber: divisionRingApproxNumber, 
    numApproxNumber: numApproxNumber
};
