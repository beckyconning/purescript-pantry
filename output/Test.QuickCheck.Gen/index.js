// Generated by psc version 0.7.1.0
"use strict";
var $foreign = require("./foreign");
var Prelude = require("Prelude");
var $$Math = require("Math");
var Data_Array = require("Data.Array");
var Data_Maybe = require("Data.Maybe");
var Data_Monoid_Additive = require("Data.Monoid.Additive");
var Data_Foldable = require("Data.Foldable");
var Data_Tuple = require("Data.Tuple");
var Data_Traversable = require("Data.Traversable");
var Test_QuickCheck_LCG = require("Test.QuickCheck.LCG");
var Data_Int = require("Data.Int");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Control_Monad_Eff_Random = require("Control.Monad.Eff.Random");
var Data_List = require("Data.List");
var Gen = (function () {
    function Gen(value0) {
        this.value0 = value0;
    };
    Gen.create = function (value0) {
        return new Gen(value0);
    };
    return Gen;
})();
var runGen = function (_24) {
    return _24.value0;
};
var stateful = function (f) {
    return new Gen(function (s) {
        return runGen(f(s))(s);
    });
};
var sized = function (f) {
    return stateful(function (s) {
        return f(s.size);
    });
};
var variant = function (n) {
    return function (g) {
        return Gen.create(function (s) {
            return runGen(g)((function () {
                var _64 = {};
                for (var _65 in s) {
                    if (s.hasOwnProperty(_65)) {
                        _64[_65] = s[_65];
                    };
                };
                _64.newSeed = n;
                return _64;
            })());
        });
    };
};
var resize = function (sz) {
    return function (g) {
        return Gen.create(function (s) {
            return runGen(g)((function () {
                var _66 = {};
                for (var _67 in s) {
                    if (s.hasOwnProperty(_67)) {
                        _66[_67] = s[_67];
                    };
                };
                _66.size = sz;
                return _66;
            })());
        });
    };
};
var repeatable = function (f) {
    return Gen.create(function (s) {
        return {
            value: function (a) {
                return (runGen(f(a))(s)).value;
            }, 
            state: s
        };
    });
};
var perturbGen = function (n) {
    return function (_25) {
        var perturb = function (oldSeed) {
            return Test_QuickCheck_LCG.mkSeed(Prelude["+"](Prelude.semiringInt)(Test_QuickCheck_LCG.runSeed(Test_QuickCheck_LCG.lcgNext(Test_QuickCheck_LCG.mkSeed($foreign.float32ToInt32(n)))))(Test_QuickCheck_LCG.runSeed(oldSeed)));
        };
        return Gen.create(function (s) {
            return _25.value0((function () {
                var _70 = {};
                for (var _71 in s) {
                    if (s.hasOwnProperty(_71)) {
                        _70[_71] = s[_71];
                    };
                };
                _70.newSeed = perturb(s.newSeed);
                return _70;
            })());
        });
    };
};
var lcgStep = (function () {
    var f = function (s) {
        return {
            value: Test_QuickCheck_LCG.runSeed(s.newSeed), 
            state: (function () {
                var _73 = {};
                for (var _74 in s) {
                    if (s.hasOwnProperty(_74)) {
                        _73[_74] = s[_74];
                    };
                };
                _73.newSeed = Test_QuickCheck_LCG.lcgNext(s.newSeed);
                return _73;
            })()
        };
    };
    return new Gen(f);
})();
var functorGen = new Prelude.Functor(function (f) {
    return function (_27) {
        return Gen.create(function (s) {
            var _77 = _27.value0(s);
            return {
                value: f(_77.value), 
                state: _77.state
            };
        });
    };
});
var uniform = Prelude["<$>"](functorGen)(function (n) {
    return Data_Int.toNumber(n) / Data_Int.toNumber(Test_QuickCheck_LCG.lcgN);
})(lcgStep);
var evalGen = function (gen) {
    return function (st) {
        return (runGen(gen)(st)).value;
    };
};
var chooseInt = function (a) {
    return function (b) {
        var clamp = function (x) {
            var _81 = Prelude.mod(Prelude.moduloSemiringInt)(x)(Prelude["+"](Prelude.semiringInt)(Prelude["-"](Prelude.ringInt)(b)(a))(Prelude.one(Prelude.semiringInt)));
            if (Prelude[">="](Prelude.ordInt)(_81)(0)) {
                return Prelude["+"](Prelude.semiringInt)(a)(_81);
            };
            if (Prelude.otherwise) {
                return Prelude["+"](Prelude.semiringInt)(Prelude["+"](Prelude.semiringInt)(b)(_81))(Prelude.one(Prelude.semiringInt));
            };
            throw new Error("Failed pattern match at /Users/beckyconning/Documents/purescript-pantry/bower_components/purescript-quickcheck/src/Test/QuickCheck/Gen.purs line 92, column 3 - line 93, column 3: " + [ _81.constructor.name ]);
        };
        return Prelude["<$>"](functorGen)(clamp)(lcgStep);
    };
};
var choose = function (a) {
    return function (b) {
        var min = $$Math.min(a)(b);
        var max = $$Math.max(a)(b);
        return Prelude["<$>"](functorGen)(Prelude[">>>"](Prelude.semigroupoidFn)(Prelude["*"](Prelude.semiringNumber)(max - min))(Prelude["+"](Prelude.semiringNumber)(min)))(uniform);
    };
};
var applyGen = new Prelude.Apply(function () {
    return functorGen;
}, function (_28) {
    return function (_29) {
        return Gen.create(function (s) {
            var _84 = _28.value0(s);
            var _85 = _29.value0(_84.state);
            return {
                value: _84.value(_85.value), 
                state: _85.state
            };
        });
    };
});
var bindGen = new Prelude.Bind(function () {
    return applyGen;
}, function (_30) {
    return function (g) {
        return Gen.create(function (s) {
            var _94 = _30.value0(s);
            return runGen(g(_94.value))(_94.state);
        });
    };
});
var frequency = function (x) {
    return function (xs) {
        var xxs = new Data_List.Cons(x, xs);
        var total = Data_Monoid_Additive.runAdditive(Data_Foldable.fold(Data_List.foldableList)(Data_Monoid_Additive.monoidAdditive(Prelude.semiringNumber))(Prelude.map(Data_List.functorList)(Prelude["<<<"](Prelude.semigroupoidFn)(Data_Monoid_Additive.Additive)(Data_Tuple.fst))(xxs)));
        var pick = function (__copy_n) {
            return function (__copy_d) {
                return function (__copy__26) {
                    var n = __copy_n;
                    var d = __copy_d;
                    var _26 = __copy__26;
                    tco: while (true) {
                        var n_1 = n;
                        var d_1 = d;
                        if (_26 instanceof Data_List.Nil) {
                            return d_1;
                        };
                        if (_26 instanceof Data_List.Cons) {
                            var _101 = n <= _26.value0.value0;
                            if (_101) {
                                return _26.value0.value1;
                            };
                            if (!_101) {
                                var __tco_n = n - _26.value0.value0;
                                var __tco_d = d;
                                var __tco__26 = _26.value1;
                                n = __tco_n;
                                d = __tco_d;
                                _26 = __tco__26;
                                continue tco;
                            };
                            throw new Error("Failed pattern match at /Users/beckyconning/Documents/purescript-pantry/bower_components/purescript-quickcheck/src/Test/QuickCheck/Gen.purs line 106, column 1 - line 107, column 1: " + [ _101.constructor.name ]);
                        };
                        throw new Error("Failed pattern match at /Users/beckyconning/Documents/purescript-pantry/bower_components/purescript-quickcheck/src/Test/QuickCheck/Gen.purs line 106, column 1 - line 107, column 1: " + [ n.constructor.name, d.constructor.name, _26.constructor.name ]);
                    };
                };
            };
        };
        return Prelude.bind(bindGen)(choose(0)(total))(function (_7) {
            return pick(_7)(Data_Tuple.snd(x))(xxs);
        });
    };
};
var oneOf = function (x) {
    return function (xs) {
        return Prelude.bind(bindGen)(chooseInt(Prelude.zero(Prelude.semiringInt))(Data_Array.length(xs)))(function (_6) {
            var _108 = Prelude["<"](Prelude.ordInt)(_6)(Prelude.one(Prelude.semiringInt));
            if (_108) {
                return x;
            };
            if (!_108) {
                return Data_Maybe.fromMaybe(x)(Data_Array["!!"](xs)(Prelude["-"](Prelude.ringInt)(_6)(Prelude.one(Prelude.semiringInt))));
            };
            throw new Error("Failed pattern match at /Users/beckyconning/Documents/purescript-pantry/bower_components/purescript-quickcheck/src/Test/QuickCheck/Gen.purs line 99, column 1 - line 100, column 1: " + [ _108.constructor.name ]);
        });
    };
};
var applicativeGen = new Prelude.Applicative(function () {
    return applyGen;
}, function (a) {
    return new Gen(function (s) {
        return {
            value: a, 
            state: s
        };
    });
});
var elements = function (x) {
    return function (xs) {
        return Prelude.bind(bindGen)(chooseInt(Prelude.zero(Prelude.semiringInt))(Data_Array.length(xs)))(function (_12) {
            return Prelude.pure(applicativeGen)((function () {
                var _110 = Prelude["=="](Prelude.eqInt)(_12)(Prelude.zero(Prelude.semiringInt));
                if (_110) {
                    return x;
                };
                if (!_110) {
                    return Data_Maybe.fromMaybe(x)(Data_Array["!!"](xs)(Prelude["-"](Prelude.ringInt)(_12)(Prelude.one(Prelude.semiringInt))));
                };
                throw new Error("Failed pattern match at /Users/beckyconning/Documents/purescript-pantry/bower_components/purescript-quickcheck/src/Test/QuickCheck/Gen.purs line 138, column 1 - line 139, column 1: " + [ _110.constructor.name ]);
            })());
        });
    };
};
var monadGen = new Prelude.Monad(function () {
    return applicativeGen;
}, function () {
    return bindGen;
});
var vectorOf = function (k) {
    return function (g) {
        if (Prelude["<="](Prelude.ordInt)(k)(0)) {
            return Prelude["return"](applicativeGen)([  ]);
        };
        if (Prelude.otherwise) {
            return Data_Traversable.sequence(Data_Traversable.traversableArray)(applicativeGen)(Prelude["<$>"](Prelude.functorArray)(Prelude["const"](g))(Data_Array.range(Prelude.one(Prelude.semiringInt))(k)));
        };
        throw new Error("Failed pattern match at /Users/beckyconning/Documents/purescript-pantry/bower_components/purescript-quickcheck/src/Test/QuickCheck/Gen.purs line 131, column 1 - line 132, column 1: " + [ k.constructor.name, g.constructor.name ]);
    };
};
var arrayOf = function (g) {
    return sized(function (n) {
        return Prelude.bind(bindGen)(chooseInt(Prelude.zero(Prelude.semiringInt))(n))(function (_8) {
            return vectorOf(_8)(g);
        });
    });
};
var arrayOf1 = function (g) {
    return sized(function (n) {
        return Prelude.bind(bindGen)(chooseInt(Prelude.zero(Prelude.semiringInt))(n))(function (_11) {
            return Prelude.bind(bindGen)(g)(function (_10) {
                return Prelude.bind(bindGen)(vectorOf(Prelude["-"](Prelude.ringInt)(_11)(Prelude.one(Prelude.semiringInt)))(g))(function (_9) {
                    return Prelude["return"](applicativeGen)(new Data_Tuple.Tuple(_10, _9));
                });
            });
        });
    });
};
var sample = function (seed) {
    return function (sz) {
        return function (g) {
            return evalGen(vectorOf(sz)(g))({
                newSeed: seed, 
                size: sz
            });
        };
    };
};
var randomSample$prime = function (n) {
    return function (g) {
        return function __do() {
            var _13 = Test_QuickCheck_LCG.randomSeed();
            return Prelude["return"](Control_Monad_Eff.applicativeEff)(sample(_13)(n)(g))();
        };
    };
};
var randomSample = randomSample$prime(10);
module.exports = {
    "randomSample'": randomSample$prime, 
    randomSample: randomSample, 
    sample: sample, 
    uniform: uniform, 
    perturbGen: perturbGen, 
    evalGen: evalGen, 
    runGen: runGen, 
    elements: elements, 
    vectorOf: vectorOf, 
    arrayOf1: arrayOf1, 
    arrayOf: arrayOf, 
    frequency: frequency, 
    oneOf: oneOf, 
    chooseInt: chooseInt, 
    choose: choose, 
    resize: resize, 
    sized: sized, 
    variant: variant, 
    stateful: stateful, 
    repeatable: repeatable, 
    functorGen: functorGen, 
    applyGen: applyGen, 
    applicativeGen: applicativeGen, 
    bindGen: bindGen, 
    monadGen: monadGen
};
