// Generated by psc version 0.7.1.0
"use strict";
var Prelude = require("Prelude");
var Test_QuickCheck_Gen = require("Test.QuickCheck.Gen");
var Data_Int = require("Data.Int");
var Data_String = require("Data.String");
var Data_Char = require("Data.Char");
var Data_Foldable = require("Data.Foldable");
var Data_Either = require("Data.Either");
var Data_Maybe = require("Data.Maybe");
var Data_Tuple = require("Data.Tuple");
var Arbitrary = function (arbitrary) {
    this.arbitrary = arbitrary;
};
var Coarbitrary = function (coarbitrary) {
    this.coarbitrary = coarbitrary;
};
var coarbitrary = function (dict) {
    return dict.coarbitrary;
};
var coarbUnit = new Coarbitrary(function (_32) {
    return Test_QuickCheck_Gen.perturbGen(1.0);
});
var coarbTuple = function (__dict_Coarbitrary_0) {
    return function (__dict_Coarbitrary_1) {
        return new Coarbitrary(function (_34) {
            return Prelude[">>>"](Prelude.semigroupoidFn)(coarbitrary(__dict_Coarbitrary_0)(_34.value0))(coarbitrary(__dict_Coarbitrary_1)(_34.value1));
        });
    };
};
var coarbOrdering = new Coarbitrary(function (_33) {
    if (_33 instanceof Prelude.LT) {
        return Test_QuickCheck_Gen.perturbGen(1.0);
    };
    if (_33 instanceof Prelude.EQ) {
        return Test_QuickCheck_Gen.perturbGen(2.0);
    };
    if (_33 instanceof Prelude.GT) {
        return Test_QuickCheck_Gen.perturbGen(3.0);
    };
    throw new Error("Failed pattern match at /Users/beckyconning/Documents/purescript-pantry/bower_components/purescript-quickcheck/src/Test/QuickCheck/Arbitrary.purs line 76, column 1 - line 81, column 1: " + [ _33.constructor.name ]);
});
var coarbNumber = new Coarbitrary(Test_QuickCheck_Gen.perturbGen);
var coarbMaybe = function (__dict_Coarbitrary_2) {
    return new Coarbitrary(function (_35) {
        if (_35 instanceof Data_Maybe.Nothing) {
            return Test_QuickCheck_Gen.perturbGen(1.0);
        };
        if (_35 instanceof Data_Maybe.Just) {
            return coarbitrary(__dict_Coarbitrary_2)(_35.value0);
        };
        throw new Error("Failed pattern match at /Users/beckyconning/Documents/purescript-pantry/bower_components/purescript-quickcheck/src/Test/QuickCheck/Arbitrary.purs line 106, column 1 - line 110, column 1: " + [ _35.constructor.name ]);
    });
};
var coarbInt = new Coarbitrary(Prelude["<<<"](Prelude.semigroupoidFn)(Test_QuickCheck_Gen.perturbGen)(Data_Int.toNumber));
var coarbEither = function (__dict_Coarbitrary_3) {
    return function (__dict_Coarbitrary_4) {
        return new Coarbitrary(function (_36) {
            if (_36 instanceof Data_Either.Left) {
                return coarbitrary(__dict_Coarbitrary_3)(_36.value0);
            };
            if (_36 instanceof Data_Either.Right) {
                return coarbitrary(__dict_Coarbitrary_4)(_36.value0);
            };
            throw new Error("Failed pattern match at /Users/beckyconning/Documents/purescript-pantry/bower_components/purescript-quickcheck/src/Test/QuickCheck/Arbitrary.purs line 115, column 1 - line 117, column 39: " + [ _36.constructor.name ]);
        });
    };
};
var coarbChar = new Coarbitrary(function (c) {
    return coarbitrary(coarbInt)(Data_Char.toCharCode(c));
});
var coarbBoolean = new Coarbitrary(function (_31) {
    if (_31) {
        return Test_QuickCheck_Gen.perturbGen(1.0);
    };
    if (!_31) {
        return Test_QuickCheck_Gen.perturbGen(2.0);
    };
    throw new Error("Failed pattern match at /Users/beckyconning/Documents/purescript-pantry/bower_components/purescript-quickcheck/src/Test/QuickCheck/Arbitrary.purs line 39, column 1 - line 43, column 1: " + [ _31.constructor.name ]);
});
var coarbArray = function (__dict_Coarbitrary_5) {
    return new Coarbitrary(Data_Foldable.foldl(Data_Foldable.foldableArray)(function (f) {
        return function (x) {
            return Prelude["<<<"](Prelude.semigroupoidFn)(f)(coarbitrary(__dict_Coarbitrary_5)(x));
        };
    })(Prelude.id(Prelude.categoryFn)));
};
var coarbString = new Coarbitrary(function (s) {
    return coarbitrary(coarbArray(coarbMaybe(coarbInt)))(Prelude["<$>"](Prelude.functorArray)(Data_String.charCodeAt(Prelude.zero(Prelude.semiringInt)))(Data_String.split("")(s)));
});
var arbitrary = function (dict) {
    return dict.arbitrary;
};
var arbUnit = new Arbitrary(Prelude["return"](Test_QuickCheck_Gen.applicativeGen)(Prelude.unit));
var arbTuple = function (__dict_Arbitrary_8) {
    return function (__dict_Arbitrary_9) {
        return new Arbitrary(Prelude["<*>"](Test_QuickCheck_Gen.applyGen)(Prelude["<$>"](Test_QuickCheck_Gen.functorGen)(Data_Tuple.Tuple.create)(arbitrary(__dict_Arbitrary_8)))(arbitrary(__dict_Arbitrary_9)));
    };
};
var arbOrdering = new Arbitrary(Test_QuickCheck_Gen.oneOf(Prelude.pure(Test_QuickCheck_Gen.applicativeGen)(Prelude.LT.value))([ Prelude.pure(Test_QuickCheck_Gen.applicativeGen)(Prelude.EQ.value), Prelude.pure(Test_QuickCheck_Gen.applicativeGen)(Prelude.GT.value) ]));
var arbNumber = new Arbitrary(Test_QuickCheck_Gen.uniform);
var arbInt = new Arbitrary(Test_QuickCheck_Gen.chooseInt(Prelude.negate(Prelude.ringInt)(1000000))(1000000));
var arbFunction = function (__dict_Coarbitrary_11) {
    return function (__dict_Arbitrary_12) {
        return new Arbitrary(Test_QuickCheck_Gen.repeatable(function (a) {
            return coarbitrary(__dict_Coarbitrary_11)(a)(arbitrary(__dict_Arbitrary_12));
        }));
    };
};
var arbChar = new Arbitrary(Prelude["<$>"](Test_QuickCheck_Gen.functorGen)(Data_Char.fromCharCode)(Test_QuickCheck_Gen.chooseInt(0)(65536)));
var arbBoolean = new Arbitrary(Prelude.bind(Test_QuickCheck_Gen.bindGen)(Test_QuickCheck_Gen.uniform)(function (_14) {
    return Prelude["return"](Test_QuickCheck_Gen.applicativeGen)(_14 * 2.0 < 1.0);
}));
var arbEither = function (__dict_Arbitrary_13) {
    return function (__dict_Arbitrary_14) {
        return new Arbitrary(Prelude.bind(Test_QuickCheck_Gen.bindGen)(arbitrary(arbBoolean))(function (_17) {
            if (_17) {
                return Prelude["<$>"](Test_QuickCheck_Gen.functorGen)(Data_Either.Left.create)(arbitrary(__dict_Arbitrary_13));
            };
            if (!_17) {
                return Prelude["<$>"](Test_QuickCheck_Gen.functorGen)(Data_Either.Right.create)(arbitrary(__dict_Arbitrary_14));
            };
            throw new Error("Failed pattern match at /Users/beckyconning/Documents/purescript-pantry/bower_components/purescript-quickcheck/src/Test/QuickCheck/Arbitrary.purs line 110, column 1 - line 115, column 1: " + [ _17.constructor.name ]);
        }));
    };
};
var arbMaybe = function (__dict_Arbitrary_10) {
    return new Arbitrary(Prelude.bind(Test_QuickCheck_Gen.bindGen)(arbitrary(arbBoolean))(function (_16) {
        if (_16) {
            return Prelude.pure(Test_QuickCheck_Gen.applicativeGen)(Data_Maybe.Nothing.value);
        };
        if (!_16) {
            return Prelude["<$>"](Test_QuickCheck_Gen.functorGen)(Data_Maybe.Just.create)(arbitrary(__dict_Arbitrary_10));
        };
        throw new Error("Failed pattern match at /Users/beckyconning/Documents/purescript-pantry/bower_components/purescript-quickcheck/src/Test/QuickCheck/Arbitrary.purs line 101, column 1 - line 106, column 1: " + [ _16.constructor.name ]);
    }));
};
var arbArray = function (__dict_Arbitrary_15) {
    return new Arbitrary(Test_QuickCheck_Gen.arrayOf(arbitrary(__dict_Arbitrary_15)));
};
var arbString = new Arbitrary(Prelude["<$>"](Test_QuickCheck_Gen.functorGen)(Data_String.fromCharArray)(arbitrary(arbArray(arbChar))));
var coarbFunction = function (__dict_Arbitrary_6) {
    return function (__dict_Coarbitrary_7) {
        return new Coarbitrary(function (f) {
            return function (gen) {
                return Prelude.bind(Test_QuickCheck_Gen.bindGen)(arbitrary(arbArray(__dict_Arbitrary_6)))(function (_15) {
                    return coarbitrary(coarbArray(__dict_Coarbitrary_7))(Prelude.map(Prelude.functorArray)(f)(_15))(gen);
                });
            };
        });
    };
};
module.exports = {
    Coarbitrary: Coarbitrary, 
    Arbitrary: Arbitrary, 
    coarbitrary: coarbitrary, 
    arbitrary: arbitrary, 
    arbBoolean: arbBoolean, 
    coarbBoolean: coarbBoolean, 
    arbNumber: arbNumber, 
    coarbNumber: coarbNumber, 
    arbInt: arbInt, 
    coarbInt: coarbInt, 
    arbString: arbString, 
    coarbString: coarbString, 
    arbChar: arbChar, 
    coarbChar: coarbChar, 
    arbUnit: arbUnit, 
    coarbUnit: coarbUnit, 
    arbOrdering: arbOrdering, 
    coarbOrdering: coarbOrdering, 
    arbArray: arbArray, 
    coarbArray: coarbArray, 
    arbFunction: arbFunction, 
    coarbFunction: coarbFunction, 
    arbTuple: arbTuple, 
    coarbTuple: coarbTuple, 
    arbMaybe: arbMaybe, 
    coarbMaybe: coarbMaybe, 
    arbEither: arbEither, 
    coarbEither: coarbEither
};
