// Generated by psc version 0.7.1.0
"use strict";
var Prelude = require("Prelude");
var Data_Maybe_Unsafe = require("Data.Maybe.Unsafe");
var Data_Int = require("Data.Int");
var $$Math = require("Math");
var Control_Monad_Eff_Random = require("Control.Monad.Eff.Random");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Data_Int_Bits = require("Data.Int.Bits");
var Seed = function (x) {
    return x;
};
var showSeed = new Prelude.Show(function (_21) {
    return "Seed " + Prelude.show(Prelude.showInt)(_21);
});
var seedMin = 1;
var runSeed = function (_20) {
    return _20;
};
var lcgN = 2147483647;
var lcgM = 48271;
var seedMax = Prelude["-"](Prelude.ringInt)(lcgM)(1);
var lcgC = 0;
var lcgNext = (function () {
    var go = function (n) {
        return Data_Maybe_Unsafe.fromJust(Data_Int.fromNumber($$Math["%"](Data_Int.toNumber(lcgM) * Data_Int.toNumber(n) + Data_Int.toNumber(lcgC))(Data_Int.toNumber(lcgN))));
    };
    return Prelude["<<<"](Prelude.semigroupoidFn)(Seed)(Prelude["<<<"](Prelude.semigroupoidFn)(go)(runSeed));
})();
var eqSeed = new Prelude.Eq(function (_22) {
    return function (_23) {
        return Prelude.eq(Prelude.eqInt)(_22)(_23);
    };
});
var ensureBetween = function (min) {
    return function (max) {
        return function (n) {
            var rangeSize = Prelude["-"](Prelude.ringInt)(max)(min);
            return Prelude["+"](Prelude.semiringInt)(Prelude.mod(Prelude.moduloSemiringInt)(Prelude["+"](Prelude.semiringInt)(Prelude.mod(Prelude.moduloSemiringInt)(n)(rangeSize))(rangeSize))(rangeSize))(min);
        };
    };
};
var mkSeed = function (x) {
    return ensureBetween(seedMin)(seedMax)(x);
};
var randomSeed = Prelude["<$>"](Control_Monad_Eff.functorEff)(mkSeed)(Control_Monad_Eff_Random.randomInt(seedMin)(seedMax));
module.exports = {
    randomSeed: randomSeed, 
    lcgNext: lcgNext, 
    lcgN: lcgN, 
    lcgC: lcgC, 
    lcgM: lcgM, 
    runSeed: runSeed, 
    mkSeed: mkSeed, 
    showSeed: showSeed, 
    eqSeed: eqSeed
};
