// Generated by psc version 0.7.1.0
"use strict";
var $foreign = require("./foreign");
var Data_Foldable = require("Data.Foldable");
var Prelude = require("Prelude");
var Data_Maybe = require("Data.Maybe");
var Control_Monad_Eff = require("Control.Monad.Eff");
var $tilde$greater = function (__dict_Functor_0) {
    return Prelude.flip(Prelude["<$>"](__dict_Functor_0));
};
var $tilde = function (__dict_Apply_1) {
    return Prelude["<*>"](__dict_Apply_1);
};
var $less$tilde = function (__dict_Functor_2) {
    return Prelude["<$>"](__dict_Functor_2);
};
var unwrap = $foreign.unwrapP($foreign.constant);
var sampleOn = $foreign.sampleOnP($foreign.constant);
var merge = $foreign.mergeP($foreign.constant);
var mergeMany = function (__dict_Functor_3) {
    return function (__dict_Foldable_4) {
        return function (sigs) {
            var mergeMaybe = function (_560) {
                return function (_561) {
                    if (_561 instanceof Data_Maybe.Nothing) {
                        return _560;
                    };
                    if (_560 instanceof Data_Maybe.Nothing) {
                        return _561;
                    };
                    if (_560 instanceof Data_Maybe.Just && _561 instanceof Data_Maybe.Just) {
                        return new Data_Maybe.Just(merge(_560.value0)(_561.value0));
                    };
                    throw new Error("Failed pattern match at /Users/beckyconning/Documents/purescript-pantry/bower_components/purescript-signal/src/Signal.purs line 52, column 9 - line 53, column 9: " + [ _560.constructor.name, _561.constructor.name ]);
                };
            };
            return Data_Foldable.foldl(__dict_Foldable_4)(mergeMaybe)(Data_Maybe.Nothing.value)(Prelude["<$>"](__dict_Functor_3)(Data_Maybe.Just.create)(sigs));
        };
    };
};
var semigroupSignal = new Prelude.Semigroup(merge);
var mapSig = $foreign.mapSigP($foreign.constant);
var functorSignal = new Prelude.Functor(mapSig);
var foldp = $foreign.foldpP($foreign.constant);
var filter = $foreign.filterP($foreign.constant);
var filterMap = function (f) {
    return function (def) {
        return function (sig) {
            return Prelude["<$>"](functorSignal)(Data_Maybe.fromMaybe(def))(filter(Data_Maybe.isJust)(new Data_Maybe.Just(def))(Prelude["<$>"](functorSignal)(f)(sig)));
        };
    };
};
var dropRepeats$prime = $foreign.dropRepeatsRefP($foreign.constant);
var dropRepeats = function (__dict_Eq_5) {
    return $foreign.dropRepeatsP(__dict_Eq_5)($foreign.constant);
};
var applySig = $foreign.applySigP($foreign.constant);
var applySignal = new Prelude.Apply(function () {
    return functorSignal;
}, applySig);
var map2 = function (f) {
    return function (a) {
        return function (b) {
            return $tilde(applySignal)($less$tilde(functorSignal)(f)(a))(b);
        };
    };
};
var map3 = function (f) {
    return function (a) {
        return function (b) {
            return function (c) {
                return $tilde(applySignal)($tilde(applySignal)($less$tilde(functorSignal)(f)(a))(b))(c);
            };
        };
    };
};
var map4 = function (f) {
    return function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return $tilde(applySignal)($tilde(applySignal)($tilde(applySignal)($less$tilde(functorSignal)(f)(a))(b))(c))(d);
                };
            };
        };
    };
};
var map5 = function (f) {
    return function (a) {
        return function (b) {
            return function (c) {
                return function (d) {
                    return function (e) {
                        return $tilde(applySignal)($tilde(applySignal)($tilde(applySignal)($tilde(applySignal)($less$tilde(functorSignal)(f)(a))(b))(c))(d))(e);
                    };
                };
            };
        };
    };
};
var applicativeSignal = new Prelude.Applicative(function () {
    return applySignal;
}, $foreign.constant);
module.exports = {
    "~": $tilde, 
    "~>": $tilde$greater, 
    "<~": $less$tilde, 
    filterMap: filterMap, 
    filter: filter, 
    unwrap: unwrap, 
    "dropRepeats'": dropRepeats$prime, 
    dropRepeats: dropRepeats, 
    sampleOn: sampleOn, 
    foldp: foldp, 
    mergeMany: mergeMany, 
    merge: merge, 
    functorSignal: functorSignal, 
    applySignal: applySignal, 
    applicativeSignal: applicativeSignal, 
    semigroupSignal: semigroupSignal, 
    runSignal: $foreign.runSignal, 
    constant: $foreign.constant
};
