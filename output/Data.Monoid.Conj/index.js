// Generated by psc version 0.7.1.0
"use strict";
var Prelude = require("Prelude");
var Control_Comonad = require("Control.Comonad");
var Control_Extend = require("Control.Extend");
var Data_Monoid = require("Data.Monoid");
var Conj = function (x) {
    return x;
};
var showConj = function (__dict_Show_0) {
    return new Prelude.Show(function (_139) {
        return "Conj (" + (Prelude.show(__dict_Show_0)(_139) + ")");
    });
};
var semigroupConj = function (__dict_BooleanAlgebra_1) {
    return new Prelude.Semigroup(function (_140) {
        return function (_141) {
            return Prelude.conj(__dict_BooleanAlgebra_1)(_140)(_141);
        };
    });
};
var runConj = function (_130) {
    return _130;
};
var monoidConj = function (__dict_BooleanAlgebra_3) {
    return new Data_Monoid.Monoid(function () {
        return semigroupConj(__dict_BooleanAlgebra_3);
    }, Prelude.top(__dict_BooleanAlgebra_3["__superclass_Prelude.Bounded_0"]()));
};
var functorConj = new Prelude.Functor(function (f) {
    return function (_135) {
        return f(_135);
    };
});
var extendConj = new Control_Extend.Extend(function () {
    return functorConj;
}, function (f) {
    return function (x) {
        return f(x);
    };
});
var eqConj = function (__dict_Eq_4) {
    return new Prelude.Eq(function (_131) {
        return function (_132) {
            return Prelude["=="](__dict_Eq_4)(_131)(_132);
        };
    });
};
var ordConj = function (__dict_Ord_2) {
    return new Prelude.Ord(function () {
        return eqConj(__dict_Ord_2["__superclass_Prelude.Eq_0"]());
    }, function (_133) {
        return function (_134) {
            return Prelude.compare(__dict_Ord_2)(_133)(_134);
        };
    });
};
var comonadConj = new Control_Comonad.Comonad(function () {
    return extendConj;
}, runConj);
var boundedConj = function (__dict_Bounded_5) {
    return new Prelude.Bounded(Prelude.bottom(__dict_Bounded_5), Prelude.top(__dict_Bounded_5));
};
var applyConj = new Prelude.Apply(function () {
    return functorConj;
}, function (_136) {
    return function (_137) {
        return _136(_137);
    };
});
var bindConj = new Prelude.Bind(function () {
    return applyConj;
}, function (_138) {
    return function (f) {
        return f(_138);
    };
});
var applicativeConj = new Prelude.Applicative(function () {
    return applyConj;
}, Conj);
var monadConj = new Prelude.Monad(function () {
    return applicativeConj;
}, function () {
    return bindConj;
});
module.exports = {
    Conj: Conj, 
    runConj: runConj, 
    eqConj: eqConj, 
    ordConj: ordConj, 
    boundedConj: boundedConj, 
    functorConj: functorConj, 
    applyConj: applyConj, 
    applicativeConj: applicativeConj, 
    bindConj: bindConj, 
    monadConj: monadConj, 
    extendConj: extendConj, 
    comonadConj: comonadConj, 
    showConj: showConj, 
    semigroupConj: semigroupConj, 
    monoidConj: monoidConj
};
