// Generated by psc version 0.7.1.0
"use strict";
var Prelude = require("Prelude");
var Control_Comonad = require("Control.Comonad");
var Control_Extend = require("Control.Extend");
var Data_Monoid = require("Data.Monoid");
var Disj = function (x) {
    return x;
};
var showDisj = function (__dict_Show_0) {
    return new Prelude.Show(function (_151) {
        return "Disj (" + (Prelude.show(__dict_Show_0)(_151) + ")");
    });
};
var semigroupDisj = function (__dict_BooleanAlgebra_1) {
    return new Prelude.Semigroup(function (_152) {
        return function (_153) {
            return Prelude.disj(__dict_BooleanAlgebra_1)(_152)(_153);
        };
    });
};
var runDisj = function (_142) {
    return _142;
};
var monoidDisj = function (__dict_BooleanAlgebra_3) {
    return new Data_Monoid.Monoid(function () {
        return semigroupDisj(__dict_BooleanAlgebra_3);
    }, Prelude.bottom(__dict_BooleanAlgebra_3["__superclass_Prelude.Bounded_0"]()));
};
var functorDisj = new Prelude.Functor(function (f) {
    return function (_147) {
        return f(_147);
    };
});
var extendDisj = new Control_Extend.Extend(function () {
    return functorDisj;
}, function (f) {
    return function (x) {
        return f(x);
    };
});
var eqDisj = function (__dict_Eq_4) {
    return new Prelude.Eq(function (_143) {
        return function (_144) {
            return Prelude["=="](__dict_Eq_4)(_143)(_144);
        };
    });
};
var ordDisj = function (__dict_Ord_2) {
    return new Prelude.Ord(function () {
        return eqDisj(__dict_Ord_2["__superclass_Prelude.Eq_0"]());
    }, function (_145) {
        return function (_146) {
            return Prelude.compare(__dict_Ord_2)(_145)(_146);
        };
    });
};
var comonadDisj = new Control_Comonad.Comonad(function () {
    return extendDisj;
}, runDisj);
var boundedDisj = function (__dict_Bounded_5) {
    return new Prelude.Bounded(Prelude.bottom(__dict_Bounded_5), Prelude.top(__dict_Bounded_5));
};
var applyDisj = new Prelude.Apply(function () {
    return functorDisj;
}, function (_148) {
    return function (_149) {
        return _148(_149);
    };
});
var bindDisj = new Prelude.Bind(function () {
    return applyDisj;
}, function (_150) {
    return function (f) {
        return f(_150);
    };
});
var applicativeDisj = new Prelude.Applicative(function () {
    return applyDisj;
}, Disj);
var monadDisj = new Prelude.Monad(function () {
    return applicativeDisj;
}, function () {
    return bindDisj;
});
module.exports = {
    Disj: Disj, 
    runDisj: runDisj, 
    eqDisj: eqDisj, 
    ordDisj: ordDisj, 
    boundedDisj: boundedDisj, 
    functorDisj: functorDisj, 
    applyDisj: applyDisj, 
    applicativeDisj: applicativeDisj, 
    bindDisj: bindDisj, 
    monadDisj: monadDisj, 
    extendDisj: extendDisj, 
    comonadDisj: comonadDisj, 
    showDisj: showDisj, 
    semigroupDisj: semigroupDisj, 
    monoidDisj: monoidDisj
};
