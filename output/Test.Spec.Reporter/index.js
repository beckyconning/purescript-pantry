// Generated by psc version 0.7.1.0
"use strict";
var Prelude = require("Prelude");
var Control_Monad_Eff_Exception = require("Control.Monad.Eff.Exception");
var Data_Foldable = require("Data.Foldable");
var Data_Array = require("Data.Array");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Test_Spec = require("Test.Spec");
var Data_Monoid = require("Data.Monoid");
var Describe = (function () {
    function Describe(value0) {
        this.value0 = value0;
    };
    Describe.create = function (value0) {
        return new Describe(value0);
    };
    return Describe;
})();
var It = (function () {
    function It(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    It.create = function (value0) {
        return function (value1) {
            return new It(value0, value1);
        };
    };
    return It;
})();
var Pending = (function () {
    function Pending(value0) {
        this.value0 = value0;
    };
    Pending.create = function (value0) {
        return new Pending(value0);
    };
    return Pending;
})();
var showEntry = new Prelude.Show(function (_185) {
    if (_185 instanceof Describe) {
        return "Describe \"" + (Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(" Â» ")(_185.value0) + "\"");
    };
    if (_185 instanceof It && _185.value1 instanceof Test_Spec.Success) {
        return "It \"" + (_185.value0 + "\" Success");
    };
    if (_185 instanceof It && _185.value1 instanceof Test_Spec.Failure) {
        return "It \"" + (_185.value0 + ("\" (Failure \"" + (Control_Monad_Eff_Exception.message(_185.value1.value0) + "\")")));
    };
    if (_185 instanceof Pending) {
        return "Pending \"" + (_185.value0 + "\"");
    };
    throw new Error("Failed pattern match at /Users/beckyconning/Documents/purescript-pantry/bower_components/purescript-spec/src/Test/Spec/Reporter.purs line 28, column 1 - line 34, column 1: " + [ _185.constructor.name ]);
});
var eqEntry = new Prelude.Eq(function (_183) {
    return function (_184) {
        if (_183 instanceof Describe && _184 instanceof Describe) {
            return Prelude["=="](Prelude.eqArray(Prelude.eqString))(_183.value0)(_184.value0);
        };
        if (_183 instanceof It && (_183.value1 instanceof Test_Spec.Success && (_184 instanceof It && _184.value1 instanceof Test_Spec.Success))) {
            return Prelude["=="](Prelude.eqString)(_183.value0)(_184.value0);
        };
        if (_183 instanceof It && (_183.value1 instanceof Test_Spec.Failure && (_184 instanceof It && _184.value1 instanceof Test_Spec.Failure))) {
            return Prelude["&&"](Prelude.booleanAlgebraBoolean)(Prelude["=="](Prelude.eqString)(_183.value0)(_184.value0))(Prelude["=="](Prelude.eqString)(Control_Monad_Eff_Exception.message(_183.value1.value0))(Control_Monad_Eff_Exception.message(_184.value1.value0)));
        };
        if (_183 instanceof It && _184 instanceof It) {
            return false;
        };
        if (_183 instanceof Pending && _184 instanceof Pending) {
            return Prelude["=="](Prelude.eqString)(_183.value0)(_184.value0);
        };
        throw new Error("Failed pattern match at /Users/beckyconning/Documents/purescript-pantry/bower_components/purescript-spec/src/Test/Spec/Reporter.purs line 20, column 1 - line 28, column 1: " + [ _183.constructor.name, _184.constructor.name ]);
    };
});
var countDescribes = function (groups) {
    var f = function (c) {
        return function (_186) {
            if (_186 instanceof Describe) {
                return Prelude["+"](Prelude.semiringInt)(c)(1);
            };
            return c;
        };
    };
    return Data_Foldable.foldl(Data_Foldable.foldableArray)(f)(0)(groups);
};
var collapse = function (_182) {
    if (_182 instanceof Test_Spec.It) {
        return [ new It(_182.value0, _182.value1) ];
    };
    if (_182 instanceof Test_Spec.Pending) {
        return [ new Pending(_182.value0) ];
    };
    if (_182 instanceof Test_Spec.Describe) {
        var sub = Data_Array.concatMap(collapse)(_182.value1);
        var prependName = function (_187) {
            if (_187 instanceof Describe) {
                return Describe.create(Data_Array.cons(_182.value0)(_187.value0));
            };
            return _187;
        };
        var c = countDescribes(sub);
        var _305 = Prelude["=="](Prelude.eqInt)(c)(0);
        if (_305) {
            return Data_Array.cons(new Describe([ _182.value0 ]))(sub);
        };
        if (!_305) {
            return Prelude.map(Prelude.functorArray)(prependName)(sub);
        };
        throw new Error("Failed pattern match: " + [ _305.constructor.name ]);
    };
    throw new Error("Failed pattern match: " + [ _182.constructor.name ]);
};
module.exports = {
    Describe: Describe, 
    It: It, 
    Pending: Pending, 
    collapse: collapse, 
    eqEntry: eqEntry, 
    showEntry: showEntry
};
