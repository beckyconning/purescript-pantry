"use strict";
var $foreign = require("./foreign");
var Prelude = require("Prelude");
var Data_Int = require("Data.Int");
var Data_Maybe = require("Data.Maybe");
var Data_Traversable = require("Data.Traversable");
var Data_List = require("Data.List");
var Data_Map = require("Data.Map");
var Data_Set = require("Data.Set");
var Data_Function = require("Data.Function");
var Data_Either = require("Data.Either");
var Data_Tuple = require("Data.Tuple");
var Data_Unfoldable = require("Data.Unfoldable");
var Data_Foldable = require("Data.Foldable");
var JObject = (function () {
    function JObject(value0) {
        this.value0 = value0;
    };
    JObject.create = function (value0) {
        return new JObject(value0);
    };
    return JObject;
})();
var JArray = (function () {
    function JArray(value0) {
        this.value0 = value0;
    };
    JArray.create = function (value0) {
        return new JArray(value0);
    };
    return JArray;
})();
var JString = (function () {
    function JString(value0) {
        this.value0 = value0;
    };
    JString.create = function (value0) {
        return new JString(value0);
    };
    return JString;
})();
var JNumber = (function () {
    function JNumber(value0) {
        this.value0 = value0;
    };
    JNumber.create = function (value0) {
        return new JNumber(value0);
    };
    return JNumber;
})();
var JInt = (function () {
    function JInt(value0) {
        this.value0 = value0;
    };
    JInt.create = function (value0) {
        return new JInt(value0);
    };
    return JInt;
})();
var JBool = (function () {
    function JBool(value0) {
        this.value0 = value0;
    };
    JBool.create = function (value0) {
        return new JBool(value0);
    };
    return JBool;
})();
var JNull = (function () {
    function JNull() {

    };
    JNull.value = new JNull();
    return JNull;
})();

/**
 * ------------------------------------------------------------------------------
 */
var FromJSON = function (parseJSON) {
    this.parseJSON = parseJSON;
};

/**
 * ------------------------------------------------------------------------------
 */
var ToJSON = function (toJSON) {
    this.toJSON = toJSON;
};
var $dot$bang$eq = function (pmval) {
    return function (val) {
        return Prelude["<$>"](Data_Either.functorEither)(Data_Maybe.fromMaybe(val))(pmval);
    };
};
var valueToJSONImpl = function (_492) {
    if (_492 instanceof JObject) {
        return $foreign.objToHash(valueToJSONImpl, Data_Tuple.fst, Data_Tuple.snd, Data_List.fromList(Data_Unfoldable.unfoldableArray)(Data_Map.toList(_492.value0)));
    };
    if (_492 instanceof JArray) {
        return $foreign.unsafeCoerce(Prelude["<$>"](Prelude.functorArray)(valueToJSONImpl)(_492.value0));
    };
    if (_492 instanceof JString) {
        return $foreign.unsafeCoerce(_492.value0);
    };
    if (_492 instanceof JNumber) {
        return $foreign.unsafeCoerce(_492.value0);
    };
    if (_492 instanceof JInt) {
        return $foreign.unsafeCoerce(_492.value0);
    };
    if (_492 instanceof JBool) {
        return $foreign.unsafeCoerce(_492.value0);
    };
    if (_492 instanceof JNull) {
        return $foreign.jsNull;
    };
    throw new Error("Failed pattern match: " + [ _492.constructor.name ]);
};
var valueToString = function (v) {
    return $foreign.jsonStringify(valueToJSONImpl(v));
};
var valueToJSON = new ToJSON(Prelude.id(Prelude.categoryFn));
var valueFromJSON = new FromJSON(Data_Either.Right.create);
var unitToJSON = new ToJSON(function (_506) {
    return JNull.value;
});

/**
 * ------------------------------------------------------------------------------
 */
var toJSON = function (dict) {
    return dict.toJSON;
};
var tupleToJSON = function (__dict_ToJSON_0) {
    return function (__dict_ToJSON_1) {
        return new ToJSON(function (_509) {
            return new JArray([ toJSON(__dict_ToJSON_0)(_509.value0), toJSON(__dict_ToJSON_1)(_509.value1) ]);
        });
    };
};
var $dot$eq = function (__dict_ToJSON_2) {
    return function (name) {
        return function (value) {
            return new Data_Tuple.Tuple(name, toJSON(__dict_ToJSON_2)(value));
        };
    };
};
var stringToJSON = new ToJSON(JString.create);
var showValue = new Prelude.Show(function (_493) {
    if (_493 instanceof JObject) {
        return "JObject " + Prelude.show(Data_Map.showMap(Prelude.showString)(showValue))(_493.value0);
    };
    if (_493 instanceof JArray) {
        return "JArray " + Prelude.show(Prelude.showArray(showValue))(_493.value0);
    };
    if (_493 instanceof JString) {
        return "JString " + Prelude.show(Prelude.showString)(_493.value0);
    };
    if (_493 instanceof JNumber) {
        return "JNumber " + Prelude.show(Prelude.showNumber)(_493.value0);
    };
    if (_493 instanceof JInt) {
        return "JInt " + Prelude.show(Prelude.showInt)(_493.value0);
    };
    if (_493 instanceof JBool) {
        return "JBool " + Prelude.show(Prelude.showBoolean)(_493.value0);
    };
    if (_493 instanceof JNull) {
        return "JNull";
    };
    throw new Error("Failed pattern match: " + [ _493.constructor.name ]);
});
var setToJSON = function (__dict_ToJSON_3) {
    return new ToJSON(function (s) {
        return JArray.create(Data_List.fromList(Data_Unfoldable.unfoldableArray)(Prelude["<$>"](Data_List.functorList)(toJSON(__dict_ToJSON_3))(Data_Set.toList(s))));
    });
};

/**
 * ------------------------------------------------------------------------------
 */
var parseJSON = function (dict) {
    return dict.parseJSON;
};
var $dot$colon = function (__dict_FromJSON_6) {
    return function (obj) {
        return function (key) {
            var _688 = Data_Map.lookup(Prelude.ordString)(key)(obj);
            if (_688 instanceof Data_Maybe.Nothing) {
                return Data_Either.Left.create("key " + (Prelude.show(Prelude.showString)(key) + " not present"));
            };
            if (_688 instanceof Data_Maybe.Just) {
                return parseJSON(__dict_FromJSON_6)(_688.value0);
            };
            throw new Error("Failed pattern match at bower_components/purescript-json/src/Data/JSON.purs line 128, column 1 - line 129, column 1: " + [ _688.constructor.name ]);
        };
    };
};
var object = function (ps) {
    return JObject.create(Data_Map.fromList(Prelude.ordString)(Data_List.toList(Data_Foldable.foldableArray)(ps)));
};
var numberToJSON = new ToJSON(JNumber.create);
var maybeToJSON = function (__dict_ToJSON_8) {
    return new ToJSON(function (_508) {
        if (_508 instanceof Data_Maybe.Nothing) {
            return JNull.value;
        };
        if (_508 instanceof Data_Maybe.Just) {
            return toJSON(__dict_ToJSON_8)(_508.value0);
        };
        throw new Error("Failed pattern match at bower_components/purescript-json/src/Data/JSON.purs line 215, column 1 - line 219, column 1: " + [ _508.constructor.name ]);
    });
};
var maybeFromJSON = function (__dict_FromJSON_9) {
    return new FromJSON(function (a) {
        return Prelude["return"](Data_Either.applicativeEither)((function () {
            var _692 = parseJSON(__dict_FromJSON_9)(a);
            if (_692 instanceof Data_Either.Left) {
                return Data_Maybe.Nothing.value;
            };
            if (_692 instanceof Data_Either.Right) {
                return new Data_Maybe.Just(_692.value0);
            };
            throw new Error("Failed pattern match at bower_components/purescript-json/src/Data/JSON.purs line 112, column 1 - line 117, column 1: " + [ _692.constructor.name ]);
        })());
    });
};
var $dot$colon$qmark = function (__dict_FromJSON_7) {
    return function (obj) {
        return function (key) {
            var _695 = Data_Map.lookup(Prelude.ordString)(key)(obj);
            if (_695 instanceof Data_Maybe.Nothing) {
                return Prelude["return"](Data_Either.applicativeEither)(Data_Maybe.Nothing.value);
            };
            if (_695 instanceof Data_Maybe.Just) {
                return parseJSON(maybeFromJSON(__dict_FromJSON_7))(_695.value0);
            };
            throw new Error("Failed pattern match at bower_components/purescript-json/src/Data/JSON.purs line 133, column 1 - line 134, column 1: " + [ _695.constructor.name ]);
        };
    };
};
var mapToJSON = function (__dict_ToJSON_10) {
    return new ToJSON(function (m) {
        return JObject.create(Prelude.map(Data_Map.functorMap)(toJSON(__dict_ToJSON_10))(m));
    });
};
var jsonToValue = function (s) {
    var insert$prime = Data_Map.insert(Prelude.ordString);
    var ctors = {
        "null": JNull.value, 
        number: JNumber.create, 
        "int": JInt.create, 
        bool: JBool.create, 
        string: JString.create, 
        array: JArray.create, 
        object: JObject.create
    };
    var auxes = {
        left: Data_Either.Left.create, 
        right: Data_Either.Right.create, 
        either: Data_Either.either, 
        insert: insert$prime, 
        empty: Data_Map.empty
    };
    return $foreign.jsonParseImpl(Data_Either.Left.create, $foreign.jsonToValueImpl(auxes, ctors), s);
};
var jsonParse = function (s) {
    return $foreign.jsonParseImpl(Data_Either.Left.create, Data_Either.Right.create, s);
};
var intToJSON = new ToJSON(JInt.create);
var fail = Data_Either.Left.create;
var intFromJSON = new FromJSON(function (_498) {
    if (_498 instanceof JInt) {
        return Prelude["return"](Data_Either.applicativeEither)(_498.value0);
    };
    if (_498 instanceof JNumber) {
        return Data_Maybe.maybe(fail(Prelude.show(Prelude.showNumber)(_498.value0) + " is not Int."))(Prelude["return"](Data_Either.applicativeEither))(Data_Int.fromNumber(_498.value0));
    };
    return fail(Prelude.show(showValue)(_498) + " is not Int.");
});
var mapFromJSON = function (__dict_FromJSON_11) {
    return new FromJSON(function (_504) {
        if (_504 instanceof JObject) {
            var fn = function (_505) {
                var _702 = parseJSON(__dict_FromJSON_11)(_505.value1);
                if (_702 instanceof Data_Either.Right) {
                    return Prelude["return"](Data_Either.applicativeEither)(new Data_Tuple.Tuple(_505.value0, _702.value0));
                };
                if (_702 instanceof Data_Either.Left) {
                    return fail(_702.value0);
                };
                throw new Error("Failed pattern match at bower_components/purescript-json/src/Data/JSON.purs line 123, column 9 - line 126, column 5: " + [ _702.constructor.name ]);
            };
            return Prelude["<$>"](Data_Either.functorEither)(Data_Map.fromList(Prelude.ordString))(Data_Traversable.sequence(Data_List.traversableList)(Data_Either.applicativeEither)(Prelude["<$>"](Data_List.functorList)(fn)(Data_Map.toList(_504.value0))));
        };
        return fail(Prelude.show(showValue)(_504) + " is not (Map String a).");
    });
};
var numberFromJSON = new FromJSON(function (_497) {
    if (_497 instanceof JNumber) {
        return Prelude["return"](Data_Either.applicativeEither)(_497.value0);
    };
    if (_497 instanceof JInt) {
        return Prelude["return"](Data_Either.applicativeEither)(Data_Int.toNumber(_497.value0));
    };
    return fail(Prelude.show(showValue)(_497) + " is not Number.");
});
var stringFromJSON = new FromJSON(function (_500) {
    if (_500 instanceof JString) {
        return Prelude["return"](Data_Either.applicativeEither)(_500.value0);
    };
    return fail(Prelude.show(showValue)(_500) + " is not String.");
});
var tupleFromJSON = function (__dict_FromJSON_12) {
    return function (__dict_FromJSON_13) {
        return new FromJSON(function (_502) {
            if (_502 instanceof JArray && _502.value0.length === 2) {
                return Prelude["<*>"](Data_Either.applyEither)(Prelude["<$>"](Data_Either.functorEither)(Data_Tuple.Tuple.create)(parseJSON(__dict_FromJSON_12)(_502.value0[0])))(parseJSON(__dict_FromJSON_13)(_502.value0[1]));
            };
            return fail(Prelude.show(showValue)(_502) + " is not (a,b).");
        });
    };
};
var unitFromJSON = new FromJSON(function (_499) {
    if (_499 instanceof JNull) {
        return Prelude["return"](Data_Either.applicativeEither)(Prelude.unit);
    };
    return fail(Prelude.show(showValue)(_499) + " is not Null.");
});
var eqValue = new Prelude.Eq(function (_494) {
    return function (_495) {
        if (_494 instanceof JObject && _495 instanceof JObject) {
            return Prelude["=="](Data_Map.eqMap(Prelude.eqString)(eqValue))(_494.value0)(_495.value0);
        };
        if (_494 instanceof JArray && _495 instanceof JArray) {
            return Prelude["=="](Prelude.eqArray(eqValue))(_494.value0)(_495.value0);
        };
        if (_494 instanceof JString && _495 instanceof JString) {
            return Prelude["=="](Prelude.eqString)(_494.value0)(_495.value0);
        };
        if (_494 instanceof JNumber && _495 instanceof JNumber) {
            return _494.value0 === _495.value0;
        };
        if (_494 instanceof JInt && _495 instanceof JInt) {
            return Prelude["=="](Prelude.eqInt)(_494.value0)(_495.value0);
        };
        if (_494 instanceof JBool && _495 instanceof JBool) {
            return Prelude["=="](Prelude.eqBoolean)(_494.value0)(_495.value0);
        };
        if (_494 instanceof JNull && _495 instanceof JNull) {
            return true;
        };
        return false;
    };
});
var encode = function (__dict_ToJSON_14) {
    return function (a) {
        return valueToString(toJSON(__dict_ToJSON_14)(a));
    };
};
var eitherToJSON = function (__dict_ToJSON_15) {
    return function (__dict_ToJSON_16) {
        return new ToJSON(function (_507) {
            if (_507 instanceof Data_Either.Right) {
                return object([ $dot$eq(__dict_ToJSON_16)("Right")(_507.value0) ]);
            };
            if (_507 instanceof Data_Either.Left) {
                return object([ $dot$eq(__dict_ToJSON_15)("Left")(_507.value0) ]);
            };
            throw new Error("Failed pattern match at bower_components/purescript-json/src/Data/JSON.purs line 208, column 1 - line 212, column 1: " + [ _507.constructor.name ]);
        });
    };
};
var eitherFromJSON = function (__dict_FromJSON_17) {
    return function (__dict_FromJSON_18) {
        return new FromJSON(function (_503) {
            if (_503 instanceof JObject) {
                var _736 = Data_List.fromList(Data_Unfoldable.unfoldableArray)(Data_Map.toList(_503.value0));
                if (_736.length === 1 && (_736[0]).value0 === "Right") {
                    return Prelude["<$>"](Data_Either.functorEither)(Data_Either.Right.create)(parseJSON(__dict_FromJSON_18)((_736[0]).value1));
                };
                if (_736.length === 1 && (_736[0]).value0 === "Left") {
                    return Prelude["<$>"](Data_Either.functorEither)(Data_Either.Left.create)(parseJSON(__dict_FromJSON_17)((_736[0]).value1));
                };
                return fail(Prelude.show(Data_Map.showMap(Prelude.showString)(showValue))(_503.value0) + " is not (Either a b).");
            };
            return fail(Prelude.show(showValue)(_503) + " is not (Either a b).");
        });
    };
};
var eitherDecode = function (__dict_FromJSON_19) {
    return function (s) {
        return Prelude.bind(Data_Either.bindEither)(jsonToValue(s))(function (_69) {
            return parseJSON(__dict_FromJSON_19)(_69);
        });
    };
};
var decode = function (__dict_FromJSON_20) {
    return function (s) {
        var _745 = eitherDecode(__dict_FromJSON_20)(s);
        if (_745 instanceof Data_Either.Right) {
            return new Data_Maybe.Just(_745.value0);
        };
        if (_745 instanceof Data_Either.Left) {
            return Data_Maybe.Nothing.value;
        };
        throw new Error("Failed pattern match at bower_components/purescript-json/src/Data/JSON.purs line 64, column 1 - line 65, column 1: " + [ _745.constructor.name ]);
    };
};
var boolToJSON = new ToJSON(JBool.create);
var boolFromJSON = new FromJSON(function (_496) {
    if (_496 instanceof JBool) {
        return new Data_Either.Right(_496.value0);
    };
    return fail(Prelude.show(showValue)(_496) + " is not Boolean.");
});
var arrayToJSON = function (__dict_ToJSON_21) {
    return new ToJSON(function (a) {
        return JArray.create(Prelude["<$>"](Prelude.functorArray)(toJSON(__dict_ToJSON_21))(a));
    });
};
var arrayFromJSON = function (__dict_FromJSON_22) {
    return new FromJSON(function (_501) {
        if (_501 instanceof JArray) {
            return Data_Traversable.sequence(Data_Traversable.traversableArray)(Data_Either.applicativeEither)(Prelude["<$>"](Prelude.functorArray)(parseJSON(__dict_FromJSON_22))(_501.value0));
        };
        return fail(Prelude.show(showValue)(_501) + " is not [a].");
    });
};
var setFromJSON = function (__dict_Ord_4) {
    return function (__dict_FromJSON_5) {
        return new FromJSON(function (x) {
            return Prelude["<$>"](Data_Either.functorEither)(Prelude["<$>"](Prelude.functorFn)(Data_Set.fromList(__dict_Ord_4))(Data_List.toList(Data_Foldable.foldableArray)))(parseJSON(arrayFromJSON(__dict_FromJSON_5))(x));
        });
    };
};
module.exports = {
    JObject: JObject, 
    JArray: JArray, 
    JString: JString, 
    JNumber: JNumber, 
    JInt: JInt, 
    JBool: JBool, 
    JNull: JNull, 
    ToJSON: ToJSON, 
    FromJSON: FromJSON, 
    object: object, 
    ".=": $dot$eq, 
    encode: encode, 
    toJSON: toJSON, 
    ".!=": $dot$bang$eq, 
    ".:?": $dot$colon$qmark, 
    ".:": $dot$colon, 
    eitherDecode: eitherDecode, 
    decode: decode, 
    fail: fail, 
    parseJSON: parseJSON, 
    showValue: showValue, 
    eqValue: eqValue, 
    valueFromJSON: valueFromJSON, 
    boolFromJSON: boolFromJSON, 
    numberFromJSON: numberFromJSON, 
    intFromJSON: intFromJSON, 
    unitFromJSON: unitFromJSON, 
    stringFromJSON: stringFromJSON, 
    arrayFromJSON: arrayFromJSON, 
    tupleFromJSON: tupleFromJSON, 
    eitherFromJSON: eitherFromJSON, 
    maybeFromJSON: maybeFromJSON, 
    setFromJSON: setFromJSON, 
    mapFromJSON: mapFromJSON, 
    boolToJSON: boolToJSON, 
    numberToJSON: numberToJSON, 
    intToJSON: intToJSON, 
    stringToJSON: stringToJSON, 
    unitToJSON: unitToJSON, 
    arrayToJSON: arrayToJSON, 
    eitherToJSON: eitherToJSON, 
    mapToJSON: mapToJSON, 
    maybeToJSON: maybeToJSON, 
    setToJSON: setToJSON, 
    tupleToJSON: tupleToJSON, 
    valueToJSON: valueToJSON
};
