"use strict";
var Prelude = require("Prelude");
var Data_Bifunctor = require("Data.Bifunctor");
var Control_Biapply = require("Control.Biapply");
var Control_Biapplicative = require("Control.Biapplicative");

/**
 *  | `Join` turns a `Bifunctor` into a `Functor` by equating the
 *  | two type arguments.
 */
var Join = (function () {
    function Join(value0) {
        this.value0 = value0;
    };
    Join.create = function (value0) {
        return new Join(value0);
    };
    return Join;
})();

/**
 *  | Remove the `Join` constructor.
 */
var runJoin = function (_122) {
    return _122.value0;
};
var joinFunctor = function (__dict_Bifunctor_0) {
    return new Prelude.Functor(function (f) {
        return Prelude["<$>"](Prelude.functorFn)(Join.create)(Prelude["<<<"](Prelude.semigroupoidFn)(Data_Bifunctor.bimap(__dict_Bifunctor_0)(f)(f))(runJoin));
    });
};
var joinApply = function (__dict_Biapply_1) {
    return new Prelude.Apply(function () {
        return joinFunctor(__dict_Biapply_1["__superclass_Data.Bifunctor.Bifunctor_0"]());
    }, function (_123) {
        return function (_124) {
            return new Join(Control_Biapply["<<*>>"](__dict_Biapply_1)(_123.value0)(_124.value0));
        };
    });
};
var joinApplicative = function (__dict_Biapplicative_2) {
    return new Prelude.Applicative(function () {
        return joinApply(__dict_Biapplicative_2["__superclass_Control.Biapply.Biapply_0"]());
    }, function (a) {
        return new Join(Control_Biapplicative.bipure(__dict_Biapplicative_2)(a)(a));
    });
};
module.exports = {
    Join: Join, 
    runJoin: runJoin, 
    joinFunctor: joinFunctor, 
    joinApply: joinApply, 
    joinApplicative: joinApplicative
};
