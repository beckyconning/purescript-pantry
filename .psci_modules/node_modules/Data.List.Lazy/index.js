
/**
 *  | This module defines a type of _lazy_ linked lists, and associated helper
 *  | functions and type class instances.
 *  |
 *  | _Note_: Depending on your use-case, you may prefer to use
 *  | `Data.Sequence` instead, which might give better performance for certain
 *  | use cases. This module is an improvement over `Data.Array` when working with
 *  | immutable lists of data in a purely-functional setting, but does not have
 *  | good random-access performance.
 */
"use strict";
var Data_Unfoldable = require("Data.Unfoldable");
var Prelude = require("Prelude");
var Data_Foldable = require("Data.Foldable");
var Data_Lazy = require("Data.Lazy");
var Control_Lazy = require("Control.Lazy");
var Data_Maybe = require("Data.Maybe");
var Data_Monoid = require("Data.Monoid");
var Data_Traversable = require("Data.Traversable");
var Control_Alt = require("Control.Alt");
var Control_Alternative = require("Control.Alternative");
var Control_MonadPlus = require("Control.MonadPlus");
var Control_Plus = require("Control.Plus");
var Data_Tuple = require("Data.Tuple");

/**
 *  | A lazy linked list.
 */
var List = function (x) {
    return x;
};

/**
 *  | A list is either empty (represented by the `Nil` constructor) or non-empty, in
 *  | which case it consists of a head element, and another list (represented by the
 *  | `Cons` constructor).
 */
var Nil = (function () {
    function Nil() {

    };
    Nil.value = new Nil();
    return Nil;
})();

/**
 *  | A list is either empty (represented by the `Nil` constructor) or non-empty, in
 *  | which case it consists of a head element, and another list (represented by the
 *  | `Cons` constructor).
 */
var Cons = (function () {
    function Cons(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Cons.create = function (value0) {
        return function (value1) {
            return new Cons(value0, value1);
        };
    };
    return Cons;
})();

/**
 *  | Unwrap a lazy linked list
 */
var runList = function (_519) {
    return _519;
};

/**
 *  | Unwrap a lazy linked list
 */
var step = Prelude["<<<"](Prelude.semigroupoidFn)(Data_Lazy.force)(runList);
var semigroupList = new Prelude.Semigroup(function (xs) {
    return function (ys) {
        var go = function (_554) {
            if (_554 instanceof Nil) {
                return step(ys);
            };
            if (_554 instanceof Cons) {
                return new Cons(_554.value0, Prelude["<>"](semigroupList)(_554.value1)(ys));
            };
            throw new Error("Failed pattern match at bower_components/purescript-lists/src/Data/List/Lazy.purs line 662, column 5 - line 663, column 5: " + [ _554.constructor.name ]);
        };
        return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
    };
});

/**
 * ------------------------------------------------------------------------------
 *  Folding ---------------------------------------------------------------------
 * ------------------------------------------------------------------------------
 * ------------------------------------------------------------------------------
 *  Instances -------------------------------------------------------------------
 * ------------------------------------------------------------------------------
 */
var showList = function (__dict_Show_0) {
    return new Prelude.Show(function (xs) {
        var go = function (_549) {
            if (_549 instanceof Nil) {
                return "Nil";
            };
            if (_549 instanceof Cons) {
                return "Cons (" + (Prelude.show(__dict_Show_0)(_549.value0) + (") (" + (go(step(_549.value1)) + ")")));
            };
            throw new Error("Failed pattern match at bower_components/purescript-lists/src/Data/List/Lazy.purs line 631, column 1 - line 637, column 1: " + [ _549.constructor.name ]);
        };
        return "fromStrict (" + (go(step(xs)) + ")");
    });
};

/**
 *  | Break a list into its first element, and the remaining elements,
 *  | or `Nothing` if the list is empty.
 *  |
 *  | Running time: `O(1)`
 */
var uncons = function (xs) {
    var _682 = step(xs);
    if (_682 instanceof Nil) {
        return Data_Maybe.Nothing.value;
    };
    if (_682 instanceof Cons) {
        return new Data_Maybe.Just({
            head: _682.value0, 
            tail: _682.value1
        });
    };
    throw new Error("Failed pattern match at bower_components/purescript-lists/src/Data/List/Lazy.purs line 278, column 1 - line 279, column 1: " + [ _682.constructor.name ]);
};

/**
 *  | Get all but the first element of a list, or `Nothing` if the list is empty.
 *  |
 *  | Running time: `O(1)`
 */
var tail = function (xs) {
    return Prelude["<$>"](Data_Maybe.functorMaybe)(function (_1) {
        return _1.tail;
    })(uncons(xs));
};
var take = function (n) {
    return function (xs) {
        var go = function (_538) {
            return function (_539) {
                if (_538 === 0) {
                    return Nil.value;
                };
                if (_539 instanceof Nil) {
                    return Nil.value;
                };
                if (_539 instanceof Cons) {
                    return new Cons(_539.value0, take(Prelude["-"](Prelude.ringInt)(_538)(1))(_539.value1));
                };
                throw new Error("Failed pattern match at bower_components/purescript-lists/src/Data/List/Lazy.purs line 445, column 3 - line 446, column 3: " + [ _538.constructor.name, _539.constructor.name ]);
            };
        };
        return Prelude["<$>"](Data_Lazy.functorLazy)(go(n))(runList(xs));
    };
};
var takeWhile = function (p) {
    return function (xs) {
        var go = function (_540) {
            if (_540 instanceof Cons && p(_540.value0)) {
                return new Cons(_540.value0, takeWhile(p)(_540.value1));
            };
            return Nil.value;
        };
        return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
    };
};
var updateAt = function (n) {
    return function (x) {
        return function (xs) {
            var go = function (_530) {
                return function (_531) {
                    if (_531 instanceof Nil) {
                        return Nil.value;
                    };
                    if (_530 === 0 && _531 instanceof Cons) {
                        return new Cons(x, _531.value1);
                    };
                    if (_531 instanceof Cons) {
                        return new Cons(_531.value0, updateAt(Prelude["-"](Prelude.ringInt)(_530)(1))(x)(_531.value1));
                    };
                    throw new Error("Failed pattern match at bower_components/purescript-lists/src/Data/List/Lazy.purs line 341, column 3 - line 342, column 3: " + [ _530.constructor.name, _531.constructor.name ]);
                };
            };
            return Prelude["<$>"](Data_Lazy.functorLazy)(go(n))(runList(xs));
        };
    };
};
var zipWith = function (f) {
    return function (xs) {
        return function (ys) {
            var go = function (_547) {
                return function (_548) {
                    if (_547 instanceof Nil) {
                        return Nil.value;
                    };
                    if (_548 instanceof Nil) {
                        return Nil.value;
                    };
                    if (_547 instanceof Cons && _548 instanceof Cons) {
                        return new Cons(f(_547.value0)(_548.value0), zipWith(f)(_547.value1)(_548.value1));
                    };
                    throw new Error("Failed pattern match at bower_components/purescript-lists/src/Data/List/Lazy.purs line 612, column 3 - line 613, column 3: " + [ _547.constructor.name, _548.constructor.name ]);
                };
            };
            return Prelude["<*>"](Data_Lazy.applyLazy)(Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs)))(runList(ys));
        };
    };
};

/**
 *  | Collect pairs of elements at the same positions in two lists.
 *  |
 *  | Running time: `O(min(m, n))`
 */
var zip = zipWith(Data_Tuple.Tuple.create);

/**
 * ------------------------------------------------------------------------------
 *  List size -------------------------------------------------------------------
 * ------------------------------------------------------------------------------
 *  | Test whether a list is empty.
 *  |
 *  | Running time: `O(1)`
 */
var $$null = Prelude["<<<"](Prelude.semigroupoidFn)(Data_Maybe.isNothing)(uncons);

/**
 *  | The empty list.
 *  |
 *  | Running time: `O(1)`
 */
var nil = List(Data_Lazy.defer(function (_516) {
    return Nil.value;
}));
var monoidList = new Data_Monoid.Monoid(function () {
    return semigroupList;
}, nil);
var mapMaybe = function (f) {
    return function (xs) {
        var go = function (__copy__537) {
            var _537 = __copy__537;
            tco: while (true) {
                if (_537 instanceof Nil) {
                    return Nil.value;
                };
                if (_537 instanceof Cons) {
                    var _706 = f(_537.value0);
                    if (_706 instanceof Data_Maybe.Nothing) {
                        var __tco__537 = step(_537.value1);
                        _537 = __tco__537;
                        continue tco;
                    };
                    if (_706 instanceof Data_Maybe.Just) {
                        return new Cons(_706.value0, mapMaybe(f)(_537.value1));
                    };
                    throw new Error("Failed pattern match: " + [ _706.constructor.name ]);
                };
                throw new Error("Failed pattern match: " + [ _537.constructor.name ]);
            };
        };
        return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
    };
};

/**
 *  | Get the length of a list
 *  |
 *  | Running time: `O(n)`
 */
var length = function (xs) {
    var go = function (_521) {
        if (_521 instanceof Nil) {
            return 0;
        };
        if (_521 instanceof Cons) {
            return Prelude["+"](Prelude.semiringInt)(1)(go(step(_521.value1)));
        };
        throw new Error("Failed pattern match at bower_components/purescript-lists/src/Data/List/Lazy.purs line 193, column 1 - line 194, column 1: " + [ _521.constructor.name ]);
    };
    return go(step(xs));
};
var lazyList = new Control_Lazy.Lazy(function (f) {
    return List(Data_Lazy.defer(Prelude["<<<"](Prelude.semigroupoidFn)(step)(f)));
});

/**
 *  | Get the last element in a list, or `Nothing` if the list is empty.
 *  |
 *  | Running time: `O(n)`.
 */
var last = function (xs) {
    var go = function (__copy__523) {
        var _523 = __copy__523;
        tco: while (true) {
            if (_523 instanceof Cons) {
                if ($$null(_523.value1)) {
                    return new Data_Maybe.Just(_523.value0);
                };
                if (Prelude.otherwise) {
                    var __tco__523 = step(_523.value1);
                    _523 = __tco__523;
                    continue tco;
                };
            };
            return Data_Maybe.Nothing.value;
        };
    };
    return go(step(xs));
};

/**
 * ------------------------------------------------------------------------------
 *  Indexed operations ----------------------------------------------------------
 * ------------------------------------------------------------------------------
 *  | Get the element at the specified index, or `Nothing` if the index is out-of-bounds.
 *  |
 *  | Running time: `O(n)` where `n` is the required index.
 */
var index = function (xs) {
    var go = function (__copy__525) {
        return function (__copy__526) {
            var _525 = __copy__525;
            var _526 = __copy__526;
            tco: while (true) {
                if (_525 instanceof Nil) {
                    return Data_Maybe.Nothing.value;
                };
                if (_525 instanceof Cons && _526 === 0) {
                    return new Data_Maybe.Just(_525.value0);
                };
                if (_525 instanceof Cons) {
                    var __tco__525 = step(_525.value1);
                    var __tco__526 = Prelude["-"](Prelude.ringInt)(_526)(1);
                    _525 = __tco__525;
                    _526 = __tco__526;
                    continue tco;
                };
                throw new Error("Failed pattern match at bower_components/purescript-lists/src/Data/List/Lazy.purs line 290, column 1 - line 291, column 1: " + [ _525.constructor.name, _526.constructor.name ]);
            };
        };
    };
    return go(step(xs));
};

/**
 *  | An infix synonym for `index`.
 */
var $bang$bang = index;

/**
 * ------------------------------------------------------------------------------
 *  Non-indexed reads -----------------------------------------------------------
 * ------------------------------------------------------------------------------
 *  | Get the first element in a list, or `Nothing` if the list is empty.
 *  |
 *  | Running time: `O(1)`.
 */
var head = function (xs) {
    return Prelude["<$>"](Data_Maybe.functorMaybe)(function (_0) {
        return _0.head;
    })(uncons(xs));
};
var functorList = new Prelude.Functor(function (f) {
    return function (xs) {
        var go = function (_555) {
            if (_555 instanceof Nil) {
                return Nil.value;
            };
            if (_555 instanceof Cons) {
                return new Cons(f(_555.value0), Prelude["<$>"](functorList)(f)(_555.value1));
            };
            throw new Error("Failed pattern match at bower_components/purescript-lists/src/Data/List/Lazy.purs line 671, column 5 - line 672, column 5: " + [ _555.constructor.name ]);
        };
        return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
    };
});
var fromStep = Prelude["<<<"](Prelude.semigroupoidFn)(List)(Prelude.pure(Data_Lazy.applicativeLazy));
var insertBy = function (cmp) {
    return function (x) {
        return function (xs) {
            var go = function (_522) {
                if (_522 instanceof Nil) {
                    return new Cons(x, nil);
                };
                if (_522 instanceof Cons) {
                    var _726 = cmp(x)(_522.value0);
                    if (_726 instanceof Prelude.GT) {
                        return new Cons(_522.value0, insertBy(cmp)(x)(_522.value1));
                    };
                    return new Cons(x, fromStep(_522));
                };
                throw new Error("Failed pattern match at bower_components/purescript-lists/src/Data/List/Lazy.purs line 231, column 3 - line 232, column 3: " + [ _522.constructor.name ]);
            };
            return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
        };
    };
};

/**
 *  | Insert an element into a sorted list.
 *  |
 *  | Running time: `O(n)`
 */
var insert = function (__dict_Ord_2) {
    return insertBy(Prelude.compare(__dict_Ord_2));
};

/**
 *  | Convert a list into any unfoldable structure.
 *  |
 *  | Running time: `O(n)`
 */
var fromList = function (__dict_Unfoldable_3) {
    return Data_Unfoldable.unfoldr(__dict_Unfoldable_3)(function (xs) {
        return Prelude["<$>"](Data_Maybe.functorMaybe)(function (rec) {
            return new Data_Tuple.Tuple(rec.head, rec.tail);
        })(uncons(xs));
    });
};
var foldableList = new Data_Foldable.Foldable(function (__dict_Monoid_4) {
    return function (f) {
        return function (xs) {
            var go = function (_558) {
                if (_558 instanceof Nil) {
                    return Data_Monoid.mempty(__dict_Monoid_4);
                };
                if (_558 instanceof Cons) {
                    return Prelude["<>"](__dict_Monoid_4["__superclass_Prelude.Semigroup_0"]())(f(_558.value0))(Data_Foldable.foldMap(foldableList)(__dict_Monoid_4)(f)(_558.value1));
                };
                throw new Error("Failed pattern match at bower_components/purescript-lists/src/Data/List/Lazy.purs line 690, column 5 - line 691, column 5: " + [ _558.constructor.name ]);
            };
            return go(step(xs));
        };
    };
}, function (o) {
    return function (b) {
        return function (xs) {
            var go = function (_557) {
                if (_557 instanceof Nil) {
                    return b;
                };
                if (_557 instanceof Cons) {
                    return Data_Foldable.foldl(foldableList)(o)(o(b)(_557.value0))(_557.value1);
                };
                throw new Error("Failed pattern match at bower_components/purescript-lists/src/Data/List/Lazy.purs line 684, column 5 - line 685, column 5: " + [ _557.constructor.name ]);
            };
            return go(step(xs));
        };
    };
}, function (o) {
    return function (b) {
        return function (xs) {
            var go = function (_556) {
                if (_556 instanceof Nil) {
                    return b;
                };
                if (_556 instanceof Cons) {
                    return o(_556.value0)(Data_Foldable.foldr(foldableList)(o)(b)(_556.value1));
                };
                throw new Error("Failed pattern match at bower_components/purescript-lists/src/Data/List/Lazy.purs line 678, column 5 - line 679, column 5: " + [ _556.constructor.name ]);
            };
            return go(step(xs));
        };
    };
});
var filter = function (p) {
    return function (xs) {
        var go = function (__copy__536) {
            var _536 = __copy__536;
            tco: while (true) {
                if (_536 instanceof Nil) {
                    return Nil.value;
                };
                if (_536 instanceof Cons) {
                    if (p(_536.value0)) {
                        return new Cons(_536.value0, filter(p)(_536.value1));
                    };
                    if (Prelude.otherwise) {
                        var __tco__536 = step(_536.value1);
                        _536 = __tco__536;
                        continue tco;
                    };
                };
                throw new Error("Failed pattern match: " + [ _536.constructor.name ]);
            };
        };
        return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
    };
};

/**
 *  | Calculate the intersection of two lists, using the specified
 *  | function to determine equality of elements.
 *  |
 *  | Running time: `O(n^2)`
 */
var intersectBy = function (eq) {
    return function (xs) {
        return function (ys) {
            return filter(function (x) {
                return Data_Foldable.any(foldableList)(Prelude.booleanAlgebraBoolean)(eq(x))(ys);
            })(xs);
        };
    };
};

/**
 *  | Calculate the intersection of two lists.
 *  |
 *  | Running time: `O(n^2)`
 */
var intersect = function (__dict_Eq_5) {
    return intersectBy(Prelude["=="](__dict_Eq_5));
};
var nubBy = function (eq) {
    return function (xs) {
        var go = function (_545) {
            if (_545 instanceof Nil) {
                return Nil.value;
            };
            if (_545 instanceof Cons) {
                return new Cons(_545.value0, nubBy(eq)(filter(function (y) {
                    return Prelude.not(Prelude.booleanAlgebraBoolean)(eq(_545.value0)(y));
                })(_545.value1)));
            };
            throw new Error("Failed pattern match at bower_components/purescript-lists/src/Data/List/Lazy.purs line 539, column 3 - line 540, column 3: " + [ _545.constructor.name ]);
        };
        return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
    };
};

/**
 * ------------------------------------------------------------------------------
 *  Set-like operations ---------------------------------------------------------
 * ------------------------------------------------------------------------------
 *  | Remove duplicate elements from a list.
 *  |
 *  | Running time: `O(n^2)`
 */
var nub = function (__dict_Eq_6) {
    return nubBy(Prelude["=="](__dict_Eq_6));
};
var eqList = function (__dict_Eq_7) {
    return new Prelude.Eq(function (xs) {
        return function (ys) {
            var go = function (__copy__550) {
                return function (__copy__551) {
                    var _550 = __copy__550;
                    var _551 = __copy__551;
                    tco: while (true) {
                        if (_550 instanceof Nil && _551 instanceof Nil) {
                            return true;
                        };
                        if (_550 instanceof Cons && (_551 instanceof Cons && Prelude["=="](__dict_Eq_7)(_550.value0)(_551.value0))) {
                            var __tco__550 = step(_550.value1);
                            var __tco__551 = step(_551.value1);
                            _550 = __tco__550;
                            _551 = __tco__551;
                            continue tco;
                        };
                        return false;
                    };
                };
            };
            return go(step(xs))(step(ys));
        };
    });
};
var ordList = function (__dict_Ord_1) {
    return new Prelude.Ord(function () {
        return eqList(__dict_Ord_1["__superclass_Prelude.Eq_0"]());
    }, function (xs) {
        return function (ys) {
            var go = function (__copy__552) {
                return function (__copy__553) {
                    var _552 = __copy__552;
                    var _553 = __copy__553;
                    tco: while (true) {
                        if (_552 instanceof Nil && _553 instanceof Nil) {
                            return Prelude.EQ.value;
                        };
                        if (_552 instanceof Nil) {
                            return Prelude.LT.value;
                        };
                        if (_553 instanceof Nil) {
                            return Prelude.GT.value;
                        };
                        if (_552 instanceof Cons && _553 instanceof Cons) {
                            var _752 = Prelude.compare(__dict_Ord_1)(_552.value0)(_553.value0);
                            if (_752 instanceof Prelude.EQ) {
                                var __tco__552 = step(_552.value1);
                                var __tco__553 = step(_553.value1);
                                _552 = __tco__552;
                                _553 = __tco__553;
                                continue tco;
                            };
                            return _752;
                        };
                        throw new Error("Failed pattern match at bower_components/purescript-lists/src/Data/List/Lazy.purs line 645, column 1 - line 656, column 1: " + [ _552.constructor.name, _553.constructor.name ]);
                    };
                };
            };
            return go(step(xs))(step(ys));
        };
    });
};

/**
 *  | Drop those elements from the front of a list which match a predicate.
 *  |
 *  | Running time (worst case): `O(n)`
 */
var dropWhile = function (p) {
    return function (xs) {
        var go = function (__copy__543) {
            var _543 = __copy__543;
            tco: while (true) {
                if (_543 instanceof Cons && p(_543.value0)) {
                    var __tco__543 = step(_543.value1);
                    _543 = __tco__543;
                    continue tco;
                };
                return fromStep(_543);
            };
        };
        return go(step(xs));
    };
};

/**
 *  | Drop the specified number of elements from the front of a list.
 *  |
 *  | Running time: `O(n)` where `n` is the number of elements to drop.
 */
var drop = function (n) {
    return function (xs) {
        var go = function (__copy__541) {
            return function (__copy__542) {
                var _541 = __copy__541;
                var _542 = __copy__542;
                tco: while (true) {
                    if (_541 === 0) {
                        return _542;
                    };
                    if (_542 instanceof Nil) {
                        return Nil.value;
                    };
                    if (_542 instanceof Cons) {
                        var __tco__541 = Prelude["-"](Prelude.ringInt)(_541)(1);
                        var __tco__542 = step(_542.value1);
                        _541 = __tco__541;
                        _542 = __tco__542;
                        continue tco;
                    };
                    throw new Error("Failed pattern match at bower_components/purescript-lists/src/Data/List/Lazy.purs line 462, column 1 - line 463, column 1: " + [ _541.constructor.name, _542.constructor.name ]);
                };
            };
        };
        return Prelude["<$>"](Data_Lazy.functorLazy)(go(n))(runList(xs));
    };
};
var deleteBy = function (eq) {
    return function (x) {
        return function (xs) {
            var go = function (_546) {
                if (_546 instanceof Nil) {
                    return Nil.value;
                };
                if (_546 instanceof Cons) {
                    if (eq(x)(_546.value0)) {
                        return step(_546.value1);
                    };
                    if (Prelude.otherwise) {
                        return new Cons(_546.value0, deleteBy(eq)(x)(_546.value1));
                    };
                };
                throw new Error("Failed pattern match at bower_components/purescript-lists/src/Data/List/Lazy.purs line 568, column 3 - line 569, column 3: " + [ _546.constructor.name ]);
            };
            return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
        };
    };
};

/**
 *  | Calculate the union of two lists, using the specified
 *  | function to determine equality of elements.
 *  |
 *  | Running time: `O(n^2)`
 */
var unionBy = function (eq) {
    return function (xs) {
        return function (ys) {
            return Prelude["<>"](semigroupList)(xs)(Data_Foldable.foldl(foldableList)(Prelude.flip(deleteBy(eq)))(nubBy(eq)(ys))(xs));
        };
    };
};

/**
 *  | Calculate the union of two lists.
 *  |
 *  | Running time: `O(n^2)`
 */
var union = function (__dict_Eq_8) {
    return unionBy(Prelude["=="](__dict_Eq_8));
};
var deleteAt = function (n) {
    return function (xs) {
        var go = function (_528) {
            return function (_529) {
                if (_529 instanceof Nil) {
                    return Nil.value;
                };
                if (_528 === 0 && _529 instanceof Cons) {
                    return step(_529.value1);
                };
                if (_529 instanceof Cons) {
                    return new Cons(_529.value0, deleteAt(Prelude["-"](Prelude.ringInt)(_528)(1))(_529.value1));
                };
                throw new Error("Failed pattern match at bower_components/purescript-lists/src/Data/List/Lazy.purs line 327, column 3 - line 328, column 3: " + [ _528.constructor.name, _529.constructor.name ]);
            };
        };
        return Prelude["<$>"](Data_Lazy.functorLazy)(go(n))(runList(xs));
    };
};

/**
 *  | Delete the first occurrence of an element from a list.
 *  |
 *  | Running time: `O(n)`
 */
var $$delete = function (__dict_Eq_9) {
    return deleteBy(Prelude["=="](__dict_Eq_9));
};

/**
 *  | Delete the first occurrence of each element in the second list from the first list.
 *  |
 *  | Running time: `O(n^2)`
 */
var $bslash$bslash = function (__dict_Eq_10) {
    return Data_Foldable.foldl(foldableList)(Prelude.flip($$delete(__dict_Eq_10)));
};

/**
 *  | Create a list by repeating another list
 */
var cycle = function (xs) {
    return Control_Lazy.fix(lazyList)(function (ys) {
        return Prelude["<>"](semigroupList)(xs)(ys);
    });
};

/**
 * ------------------------------------------------------------------------------
 *  Extending arrays ------------------------------------------------------------
 * ------------------------------------------------------------------------------
 *  | Attach an element to the front of a lazy list.
 *  |
 *  | Running time: `O(1)`
 */
var cons = function (x) {
    return function (xs) {
        return List(Data_Lazy.defer(function (_517) {
            return new Cons(x, xs);
        }));
    };
};

/**
 *  | Get all but the last element of a list, or `Nothing` if the list is empty.
 *  |
 *  | Running time: `O(n)`
 */
var init = function (xs) {
    var go = function (_524) {
        if (_524 instanceof Cons) {
            if ($$null(_524.value1)) {
                return new Data_Maybe.Just(nil);
            };
            if (Prelude.otherwise) {
                return Prelude["<$>"](Data_Maybe.functorMaybe)(cons(_524.value0))(go(step(_524.value1)));
            };
        };
        return Data_Maybe.Nothing.value;
    };
    return go(step(xs));
};
var insertAt = function (_520) {
    return function (x) {
        return function (xs) {
            if (_520 === 0) {
                return cons(x)(xs);
            };
            var go = function (_527) {
                if (_527 instanceof Nil) {
                    return new Cons(x, nil);
                };
                if (_527 instanceof Cons) {
                    return new Cons(_527.value0, insertAt(Prelude["-"](Prelude.ringInt)(_520)(1))(x)(_527.value1));
                };
                throw new Error("Failed pattern match at bower_components/purescript-lists/src/Data/List/Lazy.purs line 314, column 3 - line 315, column 3: " + [ _527.constructor.name ]);
            };
            return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
        };
    };
};

/**
 *  | Create a list by iterating a function
 */
var iterate = function (f) {
    return function (x) {
        return Control_Lazy.fix(lazyList)(function (xs) {
            return cons(x)(Prelude["<$>"](functorList)(f)(xs));
        });
    };
};

/**
 *  | Create a list by repeating an element
 */
var repeat = function (x) {
    return Control_Lazy.fix(lazyList)(function (xs) {
        return cons(x)(xs);
    });
};

/**
 * ------------------------------------------------------------------------------
 *  Transformations -------------------------------------------------------------
 * ------------------------------------------------------------------------------
 *  | Reverse a list.
 *  |
 *  | Running time: `O(n)`
 */
var reverse = function (xs) {
    var go = function (__copy_acc) {
        return function (__copy__534) {
            var acc = __copy_acc;
            var _534 = __copy__534;
            tco: while (true) {
                var acc_1 = acc;
                if (_534 instanceof Nil) {
                    return acc_1;
                };
                if (_534 instanceof Cons) {
                    var __tco_acc = cons(_534.value0)(acc);
                    var __tco__534 = step(_534.value1);
                    acc = __tco_acc;
                    _534 = __tco__534;
                    continue tco;
                };
                throw new Error("Failed pattern match at bower_components/purescript-lists/src/Data/List/Lazy.purs line 380, column 1 - line 381, column 1: " + [ acc.constructor.name, _534.constructor.name ]);
            };
        };
    };
    return go(nil)(step(xs));
};

/**
 * ------------------------------------------------------------------------------
 *  List creation ---------------------------------------------------------------
 * ------------------------------------------------------------------------------
 *  | Create a list with a single element.
 *  |
 *  | Running time: `O(1)`
 */
var singleton = function (a) {
    return cons(a)(nil);
};

/**
 *  | Create a list containing a range of integers, including both endpoints.
 */
var range = function (start) {
    return function (end) {
        if (Prelude["=="](Prelude.eqInt)(start)(end)) {
            return singleton(start);
        };
        if (Prelude.otherwise) {
            var go = function (__copy_s) {
                return function (__copy_e) {
                    return function (__copy_step_1) {
                        return function (__copy_tail_1) {
                            var s = __copy_s;
                            var e = __copy_e;
                            var step_1 = __copy_step_1;
                            var tail_1 = __copy_tail_1;
                            tco: while (true) {
                                if (Prelude["=="](Prelude.eqInt)(s)(e)) {
                                    return cons(s)(tail_1);
                                };
                                if (Prelude.otherwise) {
                                    var __tco_s = Prelude["+"](Prelude.semiringInt)(s)(step_1);
                                    var __tco_e = e;
                                    var __tco_step_1 = step_1;
                                    var __tco_tail_1 = cons(s)(tail_1);
                                    s = __tco_s;
                                    e = __tco_e;
                                    step_1 = __tco_step_1;
                                    tail_1 = __tco_tail_1;
                                    continue tco;
                                };
                                throw new Error("Failed pattern match at bower_components/purescript-lists/src/Data/List/Lazy.purs line 161, column 1 - line 162, column 1: " + [ s.constructor.name, e.constructor.name, step_1.constructor.name, tail_1.constructor.name ]);
                            };
                        };
                    };
                };
            };
            return go(end)(start)((function () {
                var _793 = Prelude[">"](Prelude.ordInt)(start)(end);
                if (_793) {
                    return 1;
                };
                if (!_793) {
                    return Prelude.negate(Prelude.ringInt)(1);
                };
                throw new Error("Failed pattern match at bower_components/purescript-lists/src/Data/List/Lazy.purs line 161, column 1 - line 162, column 1: " + [ _793.constructor.name ]);
            })())(nil);
        };
        throw new Error("Failed pattern match at bower_components/purescript-lists/src/Data/List/Lazy.purs line 161, column 1 - line 162, column 1: " + [ start.constructor.name, end.constructor.name ]);
    };
};

/**
 *  | An infix synonym for `range`.
 */
var $dot$dot = range;
var span = function (p) {
    return function (xs) {
        var _794 = uncons(xs);
        if (_794 instanceof Data_Maybe.Just && p(_794.value0.head)) {
            var _795 = span(p)(_794.value0.tail);
            return {
                init: cons(_794.value0.head)(_795.init), 
                rest: _795.rest
            };
        };
        return {
            init: nil, 
            rest: xs
        };
    };
};
var groupBy = function (eq) {
    return function (xs) {
        var go = function (_544) {
            if (_544 instanceof Nil) {
                return Nil.value;
            };
            if (_544 instanceof Cons) {
                var _802 = span(eq(_544.value0))(_544.value1);
                return new Cons(cons(_544.value0)(_802.init), groupBy(eq)(_802.rest));
            };
            throw new Error("Failed pattern match at bower_components/purescript-lists/src/Data/List/Lazy.purs line 517, column 3 - line 518, column 3: " + [ _544.constructor.name ]);
        };
        return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
    };
};

/**
 *  | Group equal, consecutive elements of a list into lists.
 *  |
 *  | For example,
 *  |
 *  | ```purescript
 *  | group (1 : 1 : 2 : 2 : 1 : Nil) == (1 : 1 : Nil) : (2 : 2 : Nil) : (1 : Nil) : Nil
 *  | ```
 *  |
 *  | Running time: `O(n)`
 */
var group = function (__dict_Eq_11) {
    return groupBy(Prelude["=="](__dict_Eq_11));
};

/**
 *  | Construct a list from a foldable structure.
 *  |
 *  | Running time: `O(n)`
 */
var toList = function (__dict_Foldable_12) {
    return Data_Foldable.foldr(__dict_Foldable_12)(cons)(nil);
};
var traversableList = new Data_Traversable.Traversable(function () {
    return foldableList;
}, function () {
    return functorList;
}, function (__dict_Applicative_14) {
    return function (xs) {
        var go = function (_561) {
            if (_561 instanceof Nil) {
                return Prelude.pure(__dict_Applicative_14)(nil);
            };
            if (_561 instanceof Cons) {
                return Prelude["<*>"](__dict_Applicative_14["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_14["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(cons)(_561.value0))(Data_Traversable.sequence(traversableList)(__dict_Applicative_14)(_561.value1));
            };
            throw new Error("Failed pattern match at bower_components/purescript-lists/src/Data/List/Lazy.purs line 711, column 5 - line 712, column 5: " + [ _561.constructor.name ]);
        };
        return go(step(xs));
    };
}, function (__dict_Applicative_13) {
    return function (f) {
        return function (xs) {
            var go = function (_560) {
                if (_560 instanceof Nil) {
                    return Prelude.pure(__dict_Applicative_13)(nil);
                };
                if (_560 instanceof Cons) {
                    return Prelude["<*>"](__dict_Applicative_13["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_13["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(cons)(f(_560.value0)))(Data_Traversable.traverse(traversableList)(__dict_Applicative_13)(f)(_560.value1));
                };
                throw new Error("Failed pattern match at bower_components/purescript-lists/src/Data/List/Lazy.purs line 705, column 5 - line 706, column 5: " + [ _560.constructor.name ]);
            };
            return go(step(xs));
        };
    };
});

/**
 *  | An infix alias for `cons`; attaches an element to the front of
 *  | a list.
 *  |
 *  | Running time: `O(1)`
 */
var $colon = cons;
var unfoldableList = new Data_Unfoldable.Unfoldable(function (f) {
    return function (b) {
        var go = function (_559) {
            if (_559 instanceof Data_Maybe.Nothing) {
                return nil;
            };
            if (_559 instanceof Data_Maybe.Just) {
                return $colon(_559.value0.value0)(Control_Lazy.defer(lazyList)(function (_518) {
                    return go(f(_559.value0.value1));
                }));
            };
            throw new Error("Failed pattern match at bower_components/purescript-lists/src/Data/List/Lazy.purs line 693, column 1 - line 701, column 1: " + [ _559.constructor.name ]);
        };
        return go(f(b));
    };
});
var concatMap = function (f) {
    return function (xs) {
        var go = function (_535) {
            if (_535 instanceof Nil) {
                return Nil.value;
            };
            if (_535 instanceof Cons) {
                return step(Prelude["<>"](semigroupList)(f(_535.value0))(concatMap(f)(_535.value1)));
            };
            throw new Error("Failed pattern match at bower_components/purescript-lists/src/Data/List/Lazy.purs line 399, column 3 - line 400, column 3: " + [ _535.constructor.name ]);
        };
        return Prelude["<$>"](Data_Lazy.functorLazy)(go)(runList(xs));
    };
};

/**
 *  | Filter a list of optional values, keeping only the elements which contain
 *  | a value.
 */
var catMaybes = mapMaybe(Prelude.id(Prelude.categoryFn));
var monadList = new Prelude.Monad(function () {
    return applicativeList;
}, function () {
    return bindList;
});
var bindList = new Prelude.Bind(function () {
    return applyList;
}, Prelude.flip(concatMap));
var applyList = new Prelude.Apply(function () {
    return functorList;
}, Prelude.ap(monadList));
var applicativeList = new Prelude.Applicative(function () {
    return applyList;
}, singleton);

/**
 *  | Flatten a list of lists.
 *  |
 *  | Running time: `O(n)`, where `n` is the total number of elements.
 */
var concat = function (_20) {
    return Prelude[">>="](bindList)(_20)(Prelude.id(Prelude.categoryFn));
};
var alterAt = function (n) {
    return function (f) {
        return function (xs) {
            var go = function (_532) {
                return function (_533) {
                    if (_533 instanceof Nil) {
                        return Nil.value;
                    };
                    if (_532 === 0 && _533 instanceof Cons) {
                        var _823 = f(_533.value0);
                        if (_823 instanceof Data_Maybe.Nothing) {
                            return step(_533.value1);
                        };
                        if (_823 instanceof Data_Maybe.Just) {
                            return new Cons(_823.value0, _533.value1);
                        };
                        throw new Error("Failed pattern match at bower_components/purescript-lists/src/Data/List/Lazy.purs line 367, column 3 - line 368, column 3: " + [ _823.constructor.name ]);
                    };
                    if (_533 instanceof Cons) {
                        return new Cons(_533.value0, alterAt(Prelude["-"](Prelude.ringInt)(_532)(1))(f)(_533.value1));
                    };
                    throw new Error("Failed pattern match at bower_components/purescript-lists/src/Data/List/Lazy.purs line 367, column 3 - line 368, column 3: " + [ _532.constructor.name, _533.constructor.name ]);
                };
            };
            return Prelude["<$>"](Data_Lazy.functorLazy)(go(n))(runList(xs));
        };
    };
};

/**
 *  | Update the element at the specified index by applying a function to
 *  | the current value, returning a new list or `Nothing` if the index is
 *  | out-of-bounds.
 *  |
 *  | This function differs from the strict equivalent in that out-of-bounds arguments
 *  | result in the original list being returned unchanged.
 *  |
 *  | Running time: `O(n)`
 */
var modifyAt = function (n) {
    return function (f) {
        return alterAt(n)(Prelude["<<<"](Prelude.semigroupoidFn)(Data_Maybe.Just.create)(f));
    };
};
var altList = new Control_Alt.Alt(function () {
    return functorList;
}, Prelude.append(semigroupList));
var plusList = new Control_Plus.Plus(function () {
    return altList;
}, nil);
var alternativeList = new Control_Alternative.Alternative(function () {
    return plusList;
}, function () {
    return applicativeList;
});
var monadPlusList = new Control_MonadPlus.MonadPlus(function () {
    return alternativeList;
}, function () {
    return monadList;
});
module.exports = {
    Nil: Nil, 
    Cons: Cons, 
    List: List, 
    zip: zip, 
    zipWith: zipWith, 
    intersectBy: intersectBy, 
    intersect: intersect, 
    "\\\\": $bslash$bslash, 
    deleteBy: deleteBy, 
    "delete": $$delete, 
    unionBy: unionBy, 
    union: union, 
    nubBy: nubBy, 
    nub: nub, 
    groupBy: groupBy, 
    group: group, 
    span: span, 
    dropWhile: dropWhile, 
    drop: drop, 
    takeWhile: takeWhile, 
    take: take, 
    catMaybes: catMaybes, 
    mapMaybe: mapMaybe, 
    filter: filter, 
    concatMap: concatMap, 
    concat: concat, 
    reverse: reverse, 
    alterAt: alterAt, 
    modifyAt: modifyAt, 
    updateAt: updateAt, 
    deleteAt: deleteAt, 
    insertAt: insertAt, 
    index: index, 
    "!!": $bang$bang, 
    uncons: uncons, 
    init: init, 
    tail: tail, 
    last: last, 
    head: head, 
    insertBy: insertBy, 
    insert: insert, 
    cons: cons, 
    ":": $colon, 
    length: length, 
    "null": $$null, 
    cycle: cycle, 
    iterate: iterate, 
    repeat: repeat, 
    range: range, 
    "..": $dot$dot, 
    singleton: singleton, 
    nil: nil, 
    step: step, 
    toList: toList, 
    fromList: fromList, 
    runList: runList, 
    showList: showList, 
    eqList: eqList, 
    ordList: ordList, 
    lazyList: lazyList, 
    semigroupList: semigroupList, 
    monoidList: monoidList, 
    functorList: functorList, 
    foldableList: foldableList, 
    unfoldableList: unfoldableList, 
    traversableList: traversableList, 
    applyList: applyList, 
    applicativeList: applicativeList, 
    bindList: bindList, 
    monadList: monadList, 
    altList: altList, 
    plusList: plusList, 
    alternativeList: alternativeList, 
    monadPlusList: monadPlusList
};
