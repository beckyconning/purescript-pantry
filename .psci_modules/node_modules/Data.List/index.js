
/**
 *  | This module defines a type of _strict_ linked lists, and associated helper
 *  | functions and type class instances.
 *  |
 *  | _Note_: Depending on your use-case, you may prefer to use
 *  | `Data.Sequence` instead, which might give better performance for certain
 *  | use cases. This module is an improvement over `Data.Array` when working with
 *  | immutable lists of data in a purely-functional setting, but does not have
 *  | good random-access performance.
 */
"use strict";
var Data_Unfoldable = require("Data.Unfoldable");
var Prelude = require("Prelude");
var Data_Foldable = require("Data.Foldable");
var Control_Lazy = require("Control.Lazy");
var Control_Alt = require("Control.Alt");
var Data_Traversable = require("Data.Traversable");
var Data_Monoid = require("Data.Monoid");
var Data_Maybe = require("Data.Maybe");
var Data_Tuple = require("Data.Tuple");
var Control_Plus = require("Control.Plus");
var Control_Alternative = require("Control.Alternative");
var Control_MonadPlus = require("Control.MonadPlus");

/**
 *  | A strict linked list.
 *  |
 *  | A list is either empty (represented by the `Nil` constructor) or non-empty, in
 *  | which case it consists of a head element, and another list (represented by the
 *  | `Cons` constructor).
 */
var Nil = (function () {
    function Nil() {

    };
    Nil.value = new Nil();
    return Nil;
})();

/**
 *  | A strict linked list.
 *  |
 *  | A list is either empty (represented by the `Nil` constructor) or non-empty, in
 *  | which case it consists of a head element, and another list (represented by the
 *  | `Cons` constructor).
 */
var Cons = (function () {
    function Cons(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Cons.create = function (value0) {
        return function (value1) {
            return new Cons(value0, value1);
        };
    };
    return Cons;
})();

/**
 *  | An infix alias for `Cons`; attaches an element to the front of
 *  | a list.
 *  |
 *  | Running time: `O(1)`
 */
var $colon = Cons.create;
var zipWith = function (f) {
    return function (_423) {
        return function (_424) {
            if (_423 instanceof Nil) {
                return Nil.value;
            };
            if (_424 instanceof Nil) {
                return Nil.value;
            };
            if (_423 instanceof Cons && _424 instanceof Cons) {
                return new Cons(f(_423.value0)(_424.value0), zipWith(f)(_423.value1)(_424.value1));
            };
            throw new Error("Failed pattern match: " + [ f.constructor.name, _423.constructor.name, _424.constructor.name ]);
        };
    };
};

/**
 *  | Collect pairs of elements at the same positions in two lists.
 *  |
 *  | Running time: `O(min(m, n))`
 */
var zip = zipWith(Data_Tuple.Tuple.create);
var updateAt = function (_409) {
    return function (x) {
        return function (_410) {
            if (_409 === 0 && _410 instanceof Cons) {
                return new Data_Maybe.Just(new Cons(x, _410.value1));
            };
            if (_410 instanceof Cons) {
                return Prelude["<$>"](Data_Maybe.functorMaybe)(Cons.create(_410.value0))(updateAt(Prelude["-"](Prelude.ringInt)(_409)(1))(x)(_410.value1));
            };
            return Data_Maybe.Nothing.value;
        };
    };
};
var unfoldableList = new Data_Unfoldable.Unfoldable(function (f) {
    return function (b) {
        var go = function (_451) {
            if (_451 instanceof Data_Maybe.Nothing) {
                return Nil.value;
            };
            if (_451 instanceof Data_Maybe.Just) {
                return new Cons(_451.value0.value0, go(f(_451.value0.value1)));
            };
            throw new Error("Failed pattern match at bower_components/purescript-lists/src/Data/List.purs line 720, column 1 - line 726, column 1: " + [ _451.constructor.name ]);
        };
        return go(f(b));
    };
});

/**
 *  | Break a list into its first element, and the remaining elements,
 *  | or `Nothing` if the list is empty.
 *  |
 *  | Running time: `O(1)`
 */
var uncons = function (_402) {
    if (_402 instanceof Nil) {
        return Data_Maybe.Nothing.value;
    };
    if (_402 instanceof Cons) {
        return new Data_Maybe.Just({
            head: _402.value0, 
            tail: _402.value1
        });
    };
    throw new Error("Failed pattern match at bower_components/purescript-lists/src/Data/List.purs line 265, column 1 - line 266, column 1: " + [ _402.constructor.name ]);
};

/**
 *  | Construct a list from a foldable structure.
 *  |
 *  | Running time: `O(n)`
 */
var toList = function (__dict_Foldable_3) {
    return Data_Foldable.foldr(__dict_Foldable_3)(Cons.create)(Nil.value);
};

/**
 *  | Get all but the first element of a list, or `Nothing` if the list is empty.
 *  |
 *  | Running time: `O(1)`
 */
var tail = function (_400) {
    if (_400 instanceof Nil) {
        return Data_Maybe.Nothing.value;
    };
    if (_400 instanceof Cons) {
        return new Data_Maybe.Just(_400.value1);
    };
    throw new Error("Failed pattern match at bower_components/purescript-lists/src/Data/List.purs line 249, column 1 - line 250, column 1: " + [ _400.constructor.name ]);
};
var span = function (p) {
    return function (_417) {
        if (_417 instanceof Cons && p(_417.value0)) {
            var _693 = span(p)(_417.value1);
            return {
                init: new Cons(_417.value0, _693.init), 
                rest: _693.rest
            };
        };
        return {
            init: Nil.value, 
            rest: _417
        };
    };
};

/**
 * ------------------------------------------------------------------------------
 *  List creation ---------------------------------------------------------------
 * ------------------------------------------------------------------------------
 *  | Create a list with a single element.
 *  |
 *  | Running time: `O(1)`
 */
var singleton = function (a) {
    return new Cons(a, Nil.value);
};

/**
 *  | Sort the elements of a list in increasing order, where elements are
 *  | compared using the specified ordering.
 */
var sortBy = function (cmp) {
    var merge = function (_435) {
        return function (_436) {
            if (_435 instanceof Cons && _436 instanceof Cons) {
                if (Prelude["=="](Prelude.eqOrdering)(cmp(_435.value0)(_436.value0))(Prelude.GT.value)) {
                    return new Cons(_436.value0, merge(_435)(_436.value1));
                };
                if (Prelude.otherwise) {
                    return new Cons(_435.value0, merge(_435.value1)(_436));
                };
            };
            if (_435 instanceof Nil) {
                return _436;
            };
            if (_436 instanceof Nil) {
                return _435;
            };
            throw new Error("Failed pattern match at bower_components/purescript-lists/src/Data/List.purs line 439, column 1 - line 440, column 1: " + [ _435.constructor.name, _436.constructor.name ]);
        };
    };
    var mergePairs = function (_434) {
        if (_434 instanceof Cons && _434.value1 instanceof Cons) {
            return new Cons(merge(_434.value0)(_434.value1.value0), mergePairs(_434.value1.value1));
        };
        return _434;
    };
    var mergeAll = function (__copy__433) {
        var _433 = __copy__433;
        tco: while (true) {
            if (_433 instanceof Cons && _433.value1 instanceof Nil) {
                return _433.value0;
            };
            var __tco__433 = mergePairs(_433);
            _433 = __tco__433;
            continue tco;
        };
    };
    var sequences = function (_430) {
        if (_430 instanceof Cons && _430.value1 instanceof Cons) {
            if (Prelude["=="](Prelude.eqOrdering)(cmp(_430.value0)(_430.value1.value0))(Prelude.GT.value)) {
                return descending(_430.value1.value0)(singleton(_430.value0))(_430.value1.value1);
            };
            if (Prelude.otherwise) {
                return ascending(_430.value1.value0)(Cons.create(_430.value0))(_430.value1.value1);
            };
        };
        return singleton(_430);
    };
    var descending = function (__copy_a) {
        return function (__copy_as) {
            return function (__copy__431) {
                var a = __copy_a;
                var as = __copy_as;
                var _431 = __copy__431;
                tco: while (true) {
                    var a_1 = a;
                    var as_1 = as;
                    if (_431 instanceof Cons && Prelude["=="](Prelude.eqOrdering)(cmp(a_1)(_431.value0))(Prelude.GT.value)) {
                        var __tco_a = _431.value0;
                        var __tco_as = new Cons(a_1, as_1);
                        var __tco__431 = _431.value1;
                        a = __tco_a;
                        as = __tco_as;
                        _431 = __tco__431;
                        continue tco;
                    };
                    return new Cons(new Cons(a, as), sequences(_431));
                };
            };
        };
    };
    var ascending = function (a) {
        return function (as) {
            return function (_432) {
                if (_432 instanceof Cons && Prelude["/="](Prelude.eqOrdering)(cmp(a)(_432.value0))(Prelude.GT.value)) {
                    return ascending(_432.value0)(function (ys) {
                        return as(new Cons(a, ys));
                    })(_432.value1);
                };
                return new Cons(as(singleton(a)), sequences(_432));
            };
        };
    };
    return Prelude["<<<"](Prelude.semigroupoidFn)(mergeAll)(sequences);
};

/**
 * ------------------------------------------------------------------------------
 *  Sorting ---------------------------------------------------------------------
 * ------------------------------------------------------------------------------
 *  | Sort the elements of an list in increasing order.
 */
var sort = function (__dict_Ord_4) {
    return function (xs) {
        return sortBy(Prelude.compare(__dict_Ord_4))(xs);
    };
};
var showList = function (__dict_Show_5) {
    return new Prelude.Show(function (_441) {
        if (_441 instanceof Nil) {
            return "Nil";
        };
        if (_441 instanceof Cons) {
            return "Cons (" + (Prelude.show(__dict_Show_5)(_441.value0) + (") (" + (Prelude.show(showList(__dict_Show_5))(_441.value1) + ")")));
        };
        throw new Error("Failed pattern match: " + [ _441.constructor.name ]);
    });
};
var semigroupList = new Prelude.Semigroup(function (_446) {
    return function (ys) {
        if (_446 instanceof Nil) {
            return ys;
        };
        if (_446 instanceof Cons) {
            return new Cons(_446.value0, Prelude["<>"](semigroupList)(_446.value1)(ys));
        };
        throw new Error("Failed pattern match: " + [ _446.constructor.name, ys.constructor.name ]);
    };
});

/**
 * ------------------------------------------------------------------------------
 *  Transformations -------------------------------------------------------------
 * ------------------------------------------------------------------------------
 *  | Reverse a list.
 *  |
 *  | Running time: `O(n)`
 */
var reverse = (function () {
    var go = function (__copy_acc) {
        return function (__copy__427) {
            var acc = __copy_acc;
            var _427 = __copy__427;
            tco: while (true) {
                var acc_1 = acc;
                if (_427 instanceof Nil) {
                    return acc_1;
                };
                if (_427 instanceof Cons) {
                    var __tco_acc = new Cons(_427.value0, acc);
                    var __tco__427 = _427.value1;
                    acc = __tco_acc;
                    _427 = __tco__427;
                    continue tco;
                };
                throw new Error("Failed pattern match at bower_components/purescript-lists/src/Data/List.purs line 363, column 1 - line 364, column 1: " + [ acc.constructor.name, _427.constructor.name ]);
            };
        };
    };
    return go(Nil.value);
})();

/**
 *  | Append an element to the end of an array, creating a new array.
 *  |
 *  | Running time: `O(2n)`
 */
var snoc = function (xs) {
    return function (x) {
        return reverse(new Cons(x, reverse(xs)));
    };
};

/**
 *  | Take the specified number of elements from the front of a list.
 *  |
 *  | Running time: `O(n)` where `n` is the number of elements to take.
 */
var take = (function () {
    var go = function (__copy_acc) {
        return function (__copy__437) {
            return function (__copy__438) {
                var acc = __copy_acc;
                var _437 = __copy__437;
                var _438 = __copy__438;
                tco: while (true) {
                    var acc_1 = acc;
                    if (_437 === 0) {
                        return reverse(acc_1);
                    };
                    var acc_1 = acc;
                    if (_438 instanceof Nil) {
                        return reverse(acc_1);
                    };
                    if (_438 instanceof Cons) {
                        var __tco_acc = new Cons(_438.value0, acc);
                        var __tco__437 = Prelude["-"](Prelude.ringInt)(_437)(1);
                        var __tco__438 = _438.value1;
                        acc = __tco_acc;
                        _437 = __tco__437;
                        _438 = __tco__438;
                        continue tco;
                    };
                    throw new Error("Failed pattern match at bower_components/purescript-lists/src/Data/List.purs line 485, column 1 - line 486, column 1: " + [ acc.constructor.name, _437.constructor.name, _438.constructor.name ]);
                };
            };
        };
    };
    return go(Nil.value);
})();

/**
 *  | Take those elements from the front of a list which match a predicate.
 *  |
 *  | Running time (worst case): `O(n)`
 */
var takeWhile = function (p) {
    var go = function (__copy_acc) {
        return function (__copy__439) {
            var acc = __copy_acc;
            var _439 = __copy__439;
            tco: while (true) {
                var acc_1 = acc;
                if (_439 instanceof Cons && p(_439.value0)) {
                    var __tco_acc = new Cons(_439.value0, acc_1);
                    var __tco__439 = _439.value1;
                    acc = __tco_acc;
                    _439 = __tco__439;
                    continue tco;
                };
                return reverse(acc);
            };
        };
    };
    return go(Nil.value);
};
var replicateM = function (__dict_Monad_6) {
    return function (n) {
        return function (m) {
            if (Prelude["<"](Prelude.ordInt)(n)(Prelude.one(Prelude.semiringInt))) {
                return Prelude["return"](__dict_Monad_6["__superclass_Prelude.Applicative_0"]())(Nil.value);
            };
            if (Prelude.otherwise) {
                return Prelude.bind(__dict_Monad_6["__superclass_Prelude.Bind_1"]())(m)(function (_66) {
                    return Prelude.bind(__dict_Monad_6["__superclass_Prelude.Bind_1"]())(replicateM(__dict_Monad_6)(Prelude["-"](Prelude.ringInt)(n)(Prelude.one(Prelude.semiringInt)))(m))(function (_65) {
                        return Prelude["return"](__dict_Monad_6["__superclass_Prelude.Applicative_0"]())(new Cons(_66, _65));
                    });
                });
            };
            throw new Error("Failed pattern match: " + [ n.constructor.name, m.constructor.name ]);
        };
    };
};

/**
 *  | Create a list with repeated instances of a value.
 */
var replicate = function (n) {
    return function (value) {
        var go = function (__copy_n_1) {
            return function (__copy_tail_1) {
                var n_1 = __copy_n_1;
                var tail_1 = __copy_tail_1;
                tco: while (true) {
                    if (Prelude["<="](Prelude.ordInt)(n_1)(0)) {
                        return tail_1;
                    };
                    if (Prelude.otherwise) {
                        var __tco_n_1 = Prelude["-"](Prelude.ringInt)(n_1)(1);
                        var __tco_tail_1 = new Cons(value, tail_1);
                        n_1 = __tco_n_1;
                        tail_1 = __tco_tail_1;
                        continue tco;
                    };
                    throw new Error("Failed pattern match at bower_components/purescript-lists/src/Data/List.purs line 145, column 1 - line 146, column 1: " + [ n_1.constructor.name, tail_1.constructor.name ]);
                };
            };
        };
        return go(n)(Nil.value);
    };
};

/**
 *  | Create a list containing a range of integers, including both endpoints.
 */
var range = function (start) {
    return function (end) {
        if (Prelude["=="](Prelude.eqInt)(start)(end)) {
            return singleton(start);
        };
        if (Prelude.otherwise) {
            var go = function (__copy_s) {
                return function (__copy_e) {
                    return function (__copy_step) {
                        return function (__copy_tail_1) {
                            var s = __copy_s;
                            var e = __copy_e;
                            var step = __copy_step;
                            var tail_1 = __copy_tail_1;
                            tco: while (true) {
                                if (Prelude["=="](Prelude.eqInt)(s)(e)) {
                                    return new Cons(s, tail_1);
                                };
                                if (Prelude.otherwise) {
                                    var __tco_s = Prelude["+"](Prelude.semiringInt)(s)(step);
                                    var __tco_e = e;
                                    var __tco_step = step;
                                    var __tco_tail_1 = new Cons(s, tail_1);
                                    s = __tco_s;
                                    e = __tco_e;
                                    step = __tco_step;
                                    tail_1 = __tco_tail_1;
                                    continue tco;
                                };
                                throw new Error("Failed pattern match at bower_components/purescript-lists/src/Data/List.purs line 137, column 1 - line 138, column 1: " + [ s.constructor.name, e.constructor.name, step.constructor.name, tail_1.constructor.name ]);
                            };
                        };
                    };
                };
            };
            return go(end)(start)((function () {
                var _759 = Prelude[">"](Prelude.ordInt)(start)(end);
                if (_759) {
                    return 1;
                };
                if (!_759) {
                    return Prelude.negate(Prelude.ringInt)(1);
                };
                throw new Error("Failed pattern match at bower_components/purescript-lists/src/Data/List.purs line 137, column 1 - line 138, column 1: " + [ _759.constructor.name ]);
            })())(Nil.value);
        };
        throw new Error("Failed pattern match at bower_components/purescript-lists/src/Data/List.purs line 137, column 1 - line 138, column 1: " + [ start.constructor.name, end.constructor.name ]);
    };
};

/**
 *  | An infix synonym for `range`.
 */
var $dot$dot = range;

/**
 * ------------------------------------------------------------------------------
 *  List size -------------------------------------------------------------------
 * ------------------------------------------------------------------------------
 *  | Test whether a list is empty.
 *  |
 *  | Running time: `O(1)`
 */
var $$null = function (_395) {
    if (_395 instanceof Nil) {
        return true;
    };
    return false;
};
var monoidList = new Data_Monoid.Monoid(function () {
    return semigroupList;
}, Nil.value);

/**
 *  | Apply a function to each element in a list, keeping only the results which
 *  | contain a value.
 *  |
 *  | Running time: `O(n)`
 */
var mapMaybe = function (f) {
    var go = function (__copy_acc) {
        return function (__copy__429) {
            var acc = __copy_acc;
            var _429 = __copy__429;
            tco: while (true) {
                var acc_1 = acc;
                if (_429 instanceof Nil) {
                    return reverse(acc_1);
                };
                if (_429 instanceof Cons) {
                    var _763 = f(_429.value0);
                    if (_763 instanceof Data_Maybe.Nothing) {
                        var __tco_acc = acc;
                        var __tco__429 = _429.value1;
                        acc = __tco_acc;
                        _429 = __tco__429;
                        continue tco;
                    };
                    if (_763 instanceof Data_Maybe.Just) {
                        var __tco_acc = new Cons(_763.value0, acc);
                        var __tco__429 = _429.value1;
                        acc = __tco_acc;
                        _429 = __tco__429;
                        continue tco;
                    };
                    throw new Error("Failed pattern match at bower_components/purescript-lists/src/Data/List.purs line 415, column 1 - line 416, column 1: " + [ _763.constructor.name ]);
                };
                throw new Error("Failed pattern match at bower_components/purescript-lists/src/Data/List.purs line 415, column 1 - line 416, column 1: " + [ acc.constructor.name, _429.constructor.name ]);
            };
        };
    };
    return go(Nil.value);
};
var some = function (__dict_Alternative_8) {
    return function (__dict_Lazy_9) {
        return function (v) {
            return Prelude["<*>"]((__dict_Alternative_8["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())(Prelude["<$>"](((__dict_Alternative_8["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())["__superclass_Prelude.Functor_0"]())(Cons.create)(v))(Control_Lazy.defer(__dict_Lazy_9)(function (_392) {
                return many(__dict_Alternative_8)(__dict_Lazy_9)(v);
            }));
        };
    };
};
var many = function (__dict_Alternative_10) {
    return function (__dict_Lazy_11) {
        return function (v) {
            return Control_Alt["<|>"]((__dict_Alternative_10["__superclass_Control.Plus.Plus_1"]())["__superclass_Control.Alt.Alt_0"]())(some(__dict_Alternative_10)(__dict_Lazy_11)(v))(Prelude.pure(__dict_Alternative_10["__superclass_Prelude.Applicative_0"]())(Nil.value));
        };
    };
};
var length = function (_396) {
    if (_396 instanceof Nil) {
        return 0;
    };
    if (_396 instanceof Cons) {
        return Prelude["+"](Prelude.semiringInt)(1)(length(_396.value1));
    };
    throw new Error("Failed pattern match: " + [ _396.constructor.name ]);
};
var last = function (__copy__399) {
    var _399 = __copy__399;
    tco: while (true) {
        if (_399 instanceof Cons && _399.value1 instanceof Nil) {
            return new Data_Maybe.Just(_399.value0);
        };
        if (_399 instanceof Cons) {
            var __tco__399 = _399.value1;
            _399 = __tco__399;
            continue tco;
        };
        return Data_Maybe.Nothing.value;
    };
};
var insertBy = function (cmp) {
    return function (x) {
        return function (_397) {
            if (_397 instanceof Nil) {
                return new Cons(x, Nil.value);
            };
            if (_397 instanceof Cons) {
                var _779 = cmp(x)(_397.value0);
                if (_779 instanceof Prelude.GT) {
                    return new Cons(_397.value0, insertBy(cmp)(x)(_397.value1));
                };
                return new Cons(x, _397);
            };
            throw new Error("Failed pattern match: " + [ cmp.constructor.name, x.constructor.name, _397.constructor.name ]);
        };
    };
};
var insertAt = function (_405) {
    return function (x) {
        return function (_406) {
            if (_405 === 0) {
                return new Data_Maybe.Just(new Cons(x, _406));
            };
            if (_406 instanceof Cons) {
                return Prelude["<$>"](Data_Maybe.functorMaybe)(Cons.create(_406.value0))(insertAt(Prelude["-"](Prelude.ringInt)(_405)(1))(x)(_406.value1));
            };
            return Data_Maybe.Nothing.value;
        };
    };
};

/**
 *  | Insert an element into a sorted list.
 *  |
 *  | Running time: `O(n)`
 */
var insert = function (__dict_Ord_12) {
    return insertBy(Prelude.compare(__dict_Ord_12));
};
var init = function (_401) {
    if (_401 instanceof Cons && _401.value1 instanceof Nil) {
        return new Data_Maybe.Just(Nil.value);
    };
    if (_401 instanceof Cons) {
        return Prelude["<$>"](Data_Maybe.functorMaybe)(Cons.create(_401.value0))(init(_401.value1));
    };
    return Data_Maybe.Nothing.value;
};
var index = function (__copy__403) {
    return function (__copy__404) {
        var _403 = __copy__403;
        var _404 = __copy__404;
        tco: while (true) {
            if (_403 instanceof Nil) {
                return Data_Maybe.Nothing.value;
            };
            if (_403 instanceof Cons && _404 === 0) {
                return new Data_Maybe.Just(_403.value0);
            };
            if (_403 instanceof Cons) {
                var __tco__403 = _403.value1;
                var __tco__404 = Prelude["-"](Prelude.ringInt)(_404)(1);
                _403 = __tco__403;
                _404 = __tco__404;
                continue tco;
            };
            throw new Error("Failed pattern match: " + [ _403.constructor.name, _404.constructor.name ]);
        };
    };
};

/**
 *  | An infix synonym for `index`.
 */
var $bang$bang = index;

/**
 * ------------------------------------------------------------------------------
 *  Non-indexed reads -----------------------------------------------------------
 * ------------------------------------------------------------------------------
 *  | Get the first element in a list, or `Nothing` if the list is empty.
 *  |
 *  | Running time: `O(1)`.
 */
var head = function (_398) {
    if (_398 instanceof Nil) {
        return Data_Maybe.Nothing.value;
    };
    if (_398 instanceof Cons) {
        return new Data_Maybe.Just(_398.value0);
    };
    throw new Error("Failed pattern match at bower_components/purescript-lists/src/Data/List.purs line 234, column 1 - line 235, column 1: " + [ _398.constructor.name ]);
};
var groupBy = function (eq) {
    return function (_418) {
        if (_418 instanceof Nil) {
            return Nil.value;
        };
        if (_418 instanceof Cons) {
            var _803 = span(eq(_418.value0))(_418.value1);
            return new Cons(new Cons(_418.value0, _803.init), groupBy(eq)(_803.rest));
        };
        throw new Error("Failed pattern match: " + [ eq.constructor.name, _418.constructor.name ]);
    };
};

/**
 *  | Group equal, consecutive elements of a list into lists.
 *  |
 *  | For example,
 *  |
 *  | ```purescript
 *  | group (1 : 1 : 2 : 2 : 1 : Nil) == (1 : 1 : Nil) : (2 : 2 : Nil) : (1 : Nil) : Nil
 *  | ```
 *  |
 *  | Running time: `O(n)`
 */
var group = function (__dict_Eq_13) {
    return groupBy(Prelude["=="](__dict_Eq_13));
};

/**
 *  | Sort and then group the elements of a list into lists.
 *  |
 *  | ```purescript
 *  | group' [1,1,2,2,1] == [[1,1,1],[2,2]]
 *  | ```
 */
var group$prime = function (__dict_Ord_14) {
    return Prelude["<<<"](Prelude.semigroupoidFn)(group(__dict_Ord_14["__superclass_Prelude.Eq_0"]()))(sort(__dict_Ord_14));
};
var functorList = new Prelude.Functor(function (f) {
    return function (_447) {
        if (_447 instanceof Nil) {
            return Nil.value;
        };
        if (_447 instanceof Cons) {
            return new Cons(f(_447.value0), Prelude["<$>"](functorList)(f)(_447.value1));
        };
        throw new Error("Failed pattern match: " + [ f.constructor.name, _447.constructor.name ]);
    };
});

/**
 *  | Convert a list into any unfoldable structure.
 *  |
 *  | Running time: `O(n)`
 */
var fromList = function (__dict_Unfoldable_15) {
    return Data_Unfoldable.unfoldr(__dict_Unfoldable_15)(function (xs) {
        return Prelude["<$>"](Data_Maybe.functorMaybe)(function (rec) {
            return new Data_Tuple.Tuple(rec.head, rec.tail);
        })(uncons(xs));
    });
};
var foldableList = new Data_Foldable.Foldable(function (__dict_Monoid_16) {
    return function (f) {
        return function (_450) {
            if (_450 instanceof Nil) {
                return Data_Monoid.mempty(__dict_Monoid_16);
            };
            if (_450 instanceof Cons) {
                return Prelude["<>"](__dict_Monoid_16["__superclass_Prelude.Semigroup_0"]())(f(_450.value0))(Data_Foldable.foldMap(foldableList)(__dict_Monoid_16)(f)(_450.value1));
            };
            throw new Error("Failed pattern match: " + [ f.constructor.name, _450.constructor.name ]);
        };
    };
}, function (o) {
    return function (b) {
        return function (_449) {
            if (_449 instanceof Nil) {
                return b;
            };
            if (_449 instanceof Cons) {
                return Data_Foldable.foldl(foldableList)(o)(o(b)(_449.value0))(_449.value1);
            };
            throw new Error("Failed pattern match: " + [ o.constructor.name, b.constructor.name, _449.constructor.name ]);
        };
    };
}, function (o) {
    return function (b) {
        return function (_448) {
            if (_448 instanceof Nil) {
                return b;
            };
            if (_448 instanceof Cons) {
                return o(_448.value0)(Data_Foldable.foldr(foldableList)(o)(b)(_448.value1));
            };
            throw new Error("Failed pattern match: " + [ o.constructor.name, b.constructor.name, _448.constructor.name ]);
        };
    };
});
var traversableList = new Data_Traversable.Traversable(function () {
    return foldableList;
}, function () {
    return functorList;
}, function (__dict_Applicative_2) {
    return function (_453) {
        if (_453 instanceof Nil) {
            return Prelude.pure(__dict_Applicative_2)(Nil.value);
        };
        if (_453 instanceof Cons) {
            return Prelude["<*>"](__dict_Applicative_2["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_2["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Cons.create)(_453.value0))(Data_Traversable.sequence(traversableList)(__dict_Applicative_2)(_453.value1));
        };
        throw new Error("Failed pattern match: " + [ _453.constructor.name ]);
    };
}, function (__dict_Applicative_1) {
    return function (f) {
        return function (_452) {
            if (_452 instanceof Nil) {
                return Prelude.pure(__dict_Applicative_1)(Nil.value);
            };
            if (_452 instanceof Cons) {
                return Prelude["<*>"](__dict_Applicative_1["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_1["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Cons.create)(f(_452.value0)))(Data_Traversable.traverse(traversableList)(__dict_Applicative_1)(f)(_452.value1));
            };
            throw new Error("Failed pattern match: " + [ f.constructor.name, _452.constructor.name ]);
        };
    };
});

/**
 *  | A generalization of `zipWith` which accumulates results in some `Applicative`
 *  | functor.
 */
var zipWithA = function (__dict_Applicative_0) {
    return function (f) {
        return function (xs) {
            return function (ys) {
                return Data_Traversable.sequence(traversableList)(__dict_Applicative_0)(zipWith(f)(xs)(ys));
            };
        };
    };
};

/**
 *  | Transforms a list of pairs into a list of first components and a list of
 *  | second components.
 */
var unzip = Data_Foldable.foldr(foldableList)(function (_394) {
    return function (_393) {
        return new Data_Tuple.Tuple(new Cons(_394.value0, _393.value0), new Cons(_394.value1, _393.value1));
    };
})(new Data_Tuple.Tuple(Nil.value, Nil.value));
var foldM = function (__dict_Monad_17) {
    return function (f) {
        return function (a) {
            return function (_425) {
                if (_425 instanceof Nil) {
                    return Prelude["return"](__dict_Monad_17["__superclass_Prelude.Applicative_0"]())(a);
                };
                if (_425 instanceof Cons) {
                    return Prelude[">>="](__dict_Monad_17["__superclass_Prelude.Bind_1"]())(f(a)(_425.value0))(function (a$prime) {
                        return foldM(__dict_Monad_17)(f)(a$prime)(_425.value1);
                    });
                };
                throw new Error("Failed pattern match: " + [ f.constructor.name, a.constructor.name, _425.constructor.name ]);
            };
        };
    };
};

/**
 *  | Find the first index for which a predicate holds.
 */
var findIndex = function (fn) {
    var go = function (__copy_n) {
        return function (__copy__426) {
            var n = __copy_n;
            var _426 = __copy__426;
            tco: while (true) {
                if (_426 instanceof Cons) {
                    if (fn(_426.value0)) {
                        return new Data_Maybe.Just(n);
                    };
                    if (Prelude.otherwise) {
                        var __tco_n = Prelude["+"](Prelude.semiringInt)(n)(1);
                        var __tco__426 = _426.value1;
                        n = __tco_n;
                        _426 = __tco__426;
                        continue tco;
                    };
                };
                if (_426 instanceof Nil) {
                    return Data_Maybe.Nothing.value;
                };
                throw new Error("Failed pattern match at bower_components/purescript-lists/src/Data/List.purs line 296, column 1 - line 297, column 1: " + [ n.constructor.name, _426.constructor.name ]);
            };
        };
    };
    return go(0);
};

/**
 *  | Find the last index for which a predicate holds.
 */
var findLastIndex = function (fn) {
    return function (xs) {
        return Prelude["<$>"](Data_Maybe.functorMaybe)(Prelude["-"](Prelude.ringInt)(Prelude["-"](Prelude.ringInt)(length(xs))(1)))(findIndex(fn)(reverse(xs)));
    };
};
var filterM = function (__dict_Monad_18) {
    return function (p) {
        return function (_414) {
            if (_414 instanceof Nil) {
                return Prelude["return"](__dict_Monad_18["__superclass_Prelude.Applicative_0"]())(Nil.value);
            };
            if (_414 instanceof Cons) {
                return Prelude.bind(__dict_Monad_18["__superclass_Prelude.Bind_1"]())(p(_414.value0))(function (_68) {
                    return Prelude.bind(__dict_Monad_18["__superclass_Prelude.Bind_1"]())(filterM(__dict_Monad_18)(p)(_414.value1))(function (_67) {
                        return Prelude["return"](__dict_Monad_18["__superclass_Prelude.Applicative_0"]())((function () {
                            if (_68) {
                                return new Cons(_414.value0, _67);
                            };
                            if (!_68) {
                                return _67;
                            };
                            throw new Error("Failed pattern match: " + [ _68.constructor.name ]);
                        })());
                    });
                });
            };
            throw new Error("Failed pattern match: " + [ p.constructor.name, _414.constructor.name ]);
        };
    };
};

/**
 *  | Filter a list, keeping the elements which satisfy a predicate function.
 *  |
 *  | Running time: `O(n)`
 */
var filter = function (p) {
    var go = function (__copy_acc) {
        return function (__copy__428) {
            var acc = __copy_acc;
            var _428 = __copy__428;
            tco: while (true) {
                var acc_1 = acc;
                if (_428 instanceof Nil) {
                    return reverse(acc_1);
                };
                if (_428 instanceof Cons) {
                    if (p(_428.value0)) {
                        var __tco_acc = new Cons(_428.value0, acc);
                        var __tco__428 = _428.value1;
                        acc = __tco_acc;
                        _428 = __tco__428;
                        continue tco;
                    };
                    if (Prelude.otherwise) {
                        var __tco_acc = acc;
                        var __tco__428 = _428.value1;
                        acc = __tco_acc;
                        _428 = __tco__428;
                        continue tco;
                    };
                };
                throw new Error("Failed pattern match at bower_components/purescript-lists/src/Data/List.purs line 386, column 1 - line 387, column 1: " + [ acc.constructor.name, _428.constructor.name ]);
            };
        };
    };
    return go(Nil.value);
};

/**
 *  | Calculate the intersection of two lists, using the specified
 *  | function to determine equality of elements.
 *  |
 *  | Running time: `O(n^2)`
 */
var intersectBy = function (eq) {
    return function (_421) {
        return function (_422) {
            if (_421 instanceof Nil) {
                return Nil.value;
            };
            if (_422 instanceof Nil) {
                return Nil.value;
            };
            return filter(function (x) {
                return Data_Foldable.any(foldableList)(Prelude.booleanAlgebraBoolean)(eq(x))(_422);
            })(_421);
        };
    };
};

/**
 *  | Calculate the intersection of two lists.
 *  |
 *  | Running time: `O(n^2)`
 */
var intersect = function (__dict_Eq_19) {
    return intersectBy(Prelude["=="](__dict_Eq_19));
};
var nubBy = function ($eq$eq) {
    return function (_419) {
        if (_419 instanceof Nil) {
            return Nil.value;
        };
        if (_419 instanceof Cons) {
            return new Cons(_419.value0, nubBy($eq$eq)(filter(function (y) {
                return Prelude.not(Prelude.booleanAlgebraBoolean)($eq$eq(_419.value0)(y));
            })(_419.value1)));
        };
        throw new Error("Failed pattern match: " + [ $eq$eq.constructor.name, _419.constructor.name ]);
    };
};

/**
 * ------------------------------------------------------------------------------
 *  Set-like operations ---------------------------------------------------------
 * ------------------------------------------------------------------------------
 *  | Remove duplicate elements from a list.
 *  |
 *  | Running time: `O(n^2)`
 */
var nub = function (__dict_Eq_20) {
    return nubBy(Prelude["=="](__dict_Eq_20));
};
var eqList = function (__dict_Eq_21) {
    return new Prelude.Eq(function (_442) {
        return function (_443) {
            if (_442 instanceof Nil && _443 instanceof Nil) {
                return true;
            };
            if (_442 instanceof Cons && _443 instanceof Cons) {
                return Prelude["&&"](Prelude.booleanAlgebraBoolean)(Prelude["=="](__dict_Eq_21)(_442.value0)(_443.value0))(Prelude["=="](eqList(__dict_Eq_21))(_442.value1)(_443.value1));
            };
            return false;
        };
    });
};
var ordList = function (__dict_Ord_7) {
    return new Prelude.Ord(function () {
        return eqList(__dict_Ord_7["__superclass_Prelude.Eq_0"]());
    }, function (_444) {
        return function (_445) {
            if (_444 instanceof Nil && _445 instanceof Nil) {
                return Prelude.EQ.value;
            };
            if (_444 instanceof Nil) {
                return Prelude.LT.value;
            };
            if (_445 instanceof Nil) {
                return Prelude.GT.value;
            };
            if (_444 instanceof Cons && _445 instanceof Cons) {
                var _874 = Prelude.compare(__dict_Ord_7)(_444.value0)(_445.value0);
                if (_874 instanceof Prelude.EQ) {
                    return Prelude.compare(ordList(__dict_Ord_7))(_444.value1)(_445.value1);
                };
                return _874;
            };
            throw new Error("Failed pattern match: " + [ _444.constructor.name, _445.constructor.name ]);
        };
    });
};

/**
 *  | Find the index of the last element equal to the specified element.
 */
var elemLastIndex = function (__dict_Eq_22) {
    return function (x) {
        return findLastIndex(function (_18) {
            return Prelude["=="](__dict_Eq_22)(_18)(x);
        });
    };
};

/**
 *  | Find the index of the first element equal to the specified element.
 */
var elemIndex = function (__dict_Eq_23) {
    return function (x) {
        return findIndex(function (_17) {
            return Prelude["=="](__dict_Eq_23)(_17)(x);
        });
    };
};

/**
 *  | Drop those elements from the front of a list which match a predicate.
 *  |
 *  | Running time (worst case): `O(n)`
 */
var dropWhile = function (p) {
    var go = function (__copy__440) {
        var _440 = __copy__440;
        tco: while (true) {
            if (_440 instanceof Cons && p(_440.value0)) {
                var __tco__440 = _440.value1;
                _440 = __tco__440;
                continue tco;
            };
            return _440;
        };
    };
    return go;
};
var drop = function (__copy__415) {
    return function (__copy__416) {
        var _415 = __copy__415;
        var _416 = __copy__416;
        tco: while (true) {
            if (_415 === 0) {
                return _416;
            };
            if (_416 instanceof Nil) {
                return Nil.value;
            };
            if (_416 instanceof Cons) {
                var __tco__415 = Prelude["-"](Prelude.ringInt)(_415)(1);
                var __tco__416 = _416.value1;
                _415 = __tco__415;
                _416 = __tco__416;
                continue tco;
            };
            throw new Error("Failed pattern match: " + [ _415.constructor.name, _416.constructor.name ]);
        };
    };
};

/**
 * ------------------------------------------------------------------------------
 *  Sublists --------------------------------------------------------------------
 * ------------------------------------------------------------------------------
 *  | Extract a sublist by a start and end index.
 */
var slice = function (start) {
    return function (end) {
        return function (xs) {
            return take(Prelude["-"](Prelude.ringInt)(end)(start))(drop(start)(xs));
        };
    };
};
var deleteBy = function ($eq$eq) {
    return function (x) {
        return function (_420) {
            if (_420 instanceof Nil) {
                return Nil.value;
            };
            if (_420 instanceof Cons && $eq$eq(x)(_420.value0)) {
                return _420.value1;
            };
            if (_420 instanceof Cons) {
                return new Cons(_420.value0, deleteBy($eq$eq)(x)(_420.value1));
            };
            throw new Error("Failed pattern match: " + [ $eq$eq.constructor.name, x.constructor.name, _420.constructor.name ]);
        };
    };
};

/**
 *  | Calculate the union of two lists, using the specified
 *  | function to determine equality of elements.
 *  |
 *  | Running time: `O(n^2)`
 */
var unionBy = function (eq) {
    return function (xs) {
        return function (ys) {
            return Prelude["<>"](semigroupList)(xs)(Data_Foldable.foldl(foldableList)(Prelude.flip(deleteBy(eq)))(nubBy(eq)(ys))(xs));
        };
    };
};

/**
 *  | Calculate the union of two lists.
 *  |
 *  | Running time: `O(n^2)`
 */
var union = function (__dict_Eq_24) {
    return unionBy(Prelude["=="](__dict_Eq_24));
};
var deleteAt = function (_407) {
    return function (_408) {
        if (_407 === 0 && _408 instanceof Cons) {
            return new Data_Maybe.Just(_408.value1);
        };
        if (_408 instanceof Cons) {
            return Prelude["<$>"](Data_Maybe.functorMaybe)(Cons.create(_408.value0))(deleteAt(Prelude["-"](Prelude.ringInt)(_407)(1))(_408.value1));
        };
        return Data_Maybe.Nothing.value;
    };
};

/**
 *  | Delete the first occurrence of an element from a list.
 *  |
 *  | Running time: `O(n)`
 */
var $$delete = function (__dict_Eq_25) {
    return deleteBy(Prelude["=="](__dict_Eq_25));
};

/**
 *  | Delete the first occurrence of each element in the second list from the first list.
 *  |
 *  | Running time: `O(n^2)`
 */
var $bslash$bslash = function (__dict_Eq_26) {
    return Data_Foldable.foldl(foldableList)(Prelude.flip($$delete(__dict_Eq_26)));
};
var concatMap = function (f) {
    return function (_413) {
        if (_413 instanceof Nil) {
            return Nil.value;
        };
        if (_413 instanceof Cons) {
            return Prelude["<>"](semigroupList)(f(_413.value0))(concatMap(f)(_413.value1));
        };
        throw new Error("Failed pattern match: " + [ f.constructor.name, _413.constructor.name ]);
    };
};

/**
 *  | Filter a list of optional values, keeping only the elements which contain
 *  | a value.
 */
var catMaybes = mapMaybe(Prelude.id(Prelude.categoryFn));
var applyList = new Prelude.Apply(function () {
    return functorList;
}, function (_454) {
    return function (xs) {
        if (_454 instanceof Nil) {
            return Nil.value;
        };
        if (_454 instanceof Cons) {
            return Prelude["<>"](semigroupList)(Prelude["<$>"](functorList)(_454.value0)(xs))(Prelude["<*>"](applyList)(_454.value1)(xs));
        };
        throw new Error("Failed pattern match: " + [ _454.constructor.name, xs.constructor.name ]);
    };
});
var bindList = new Prelude.Bind(function () {
    return applyList;
}, Prelude.flip(concatMap));

/**
 *  | Flatten a list of lists.
 *  |
 *  | Running time: `O(n)`, where `n` is the total number of elements.
 */
var concat = function (_19) {
    return Prelude[">>="](bindList)(_19)(Prelude.id(Prelude.categoryFn));
};
var applicativeList = new Prelude.Applicative(function () {
    return applyList;
}, function (a) {
    return new Cons(a, Nil.value);
});
var monadList = new Prelude.Monad(function () {
    return applicativeList;
}, function () {
    return bindList;
});
var alterAt = function (_411) {
    return function (f) {
        return function (_412) {
            if (_411 === 0 && _412 instanceof Cons) {
                return Data_Maybe.Just.create((function () {
                    var _910 = f(_412.value0);
                    if (_910 instanceof Data_Maybe.Nothing) {
                        return _412.value1;
                    };
                    if (_910 instanceof Data_Maybe.Just) {
                        return new Cons(_910.value0, _412.value1);
                    };
                    throw new Error("Failed pattern match: " + [ _910.constructor.name ]);
                })());
            };
            if (_412 instanceof Cons) {
                return Prelude["<$>"](Data_Maybe.functorMaybe)(Cons.create(_412.value0))(alterAt(Prelude["-"](Prelude.ringInt)(_411)(1))(f)(_412.value1));
            };
            return Data_Maybe.Nothing.value;
        };
    };
};

/**
 *  | Update the element at the specified index by applying a function to
 *  | the current value, returning a new list or `Nothing` if the index is
 *  | out-of-bounds.
 *  |
 *  | Running time: `O(n)`
 */
var modifyAt = function (n) {
    return function (f) {
        return alterAt(n)(Prelude["<<<"](Prelude.semigroupoidFn)(Data_Maybe.Just.create)(f));
    };
};
var altList = new Control_Alt.Alt(function () {
    return functorList;
}, Prelude.append(semigroupList));
var plusList = new Control_Plus.Plus(function () {
    return altList;
}, Nil.value);
var alternativeList = new Control_Alternative.Alternative(function () {
    return plusList;
}, function () {
    return applicativeList;
});
var monadPlusList = new Control_MonadPlus.MonadPlus(function () {
    return alternativeList;
}, function () {
    return monadList;
});
module.exports = {
    Nil: Nil, 
    Cons: Cons, 
    foldM: foldM, 
    unzip: unzip, 
    zip: zip, 
    zipWithA: zipWithA, 
    zipWith: zipWith, 
    intersectBy: intersectBy, 
    intersect: intersect, 
    "\\\\": $bslash$bslash, 
    deleteBy: deleteBy, 
    "delete": $$delete, 
    unionBy: unionBy, 
    union: union, 
    nubBy: nubBy, 
    nub: nub, 
    groupBy: groupBy, 
    "group'": group$prime, 
    group: group, 
    span: span, 
    dropWhile: dropWhile, 
    drop: drop, 
    takeWhile: takeWhile, 
    take: take, 
    slice: slice, 
    sortBy: sortBy, 
    sort: sort, 
    catMaybes: catMaybes, 
    mapMaybe: mapMaybe, 
    filterM: filterM, 
    filter: filter, 
    concatMap: concatMap, 
    concat: concat, 
    reverse: reverse, 
    alterAt: alterAt, 
    modifyAt: modifyAt, 
    updateAt: updateAt, 
    deleteAt: deleteAt, 
    insertAt: insertAt, 
    findLastIndex: findLastIndex, 
    findIndex: findIndex, 
    elemLastIndex: elemLastIndex, 
    elemIndex: elemIndex, 
    index: index, 
    "!!": $bang$bang, 
    uncons: uncons, 
    init: init, 
    tail: tail, 
    last: last, 
    head: head, 
    insertBy: insertBy, 
    insert: insert, 
    snoc: snoc, 
    ":": $colon, 
    length: length, 
    "null": $$null, 
    many: many, 
    some: some, 
    replicateM: replicateM, 
    replicate: replicate, 
    range: range, 
    "..": $dot$dot, 
    singleton: singleton, 
    toList: toList, 
    fromList: fromList, 
    showList: showList, 
    eqList: eqList, 
    ordList: ordList, 
    semigroupList: semigroupList, 
    monoidList: monoidList, 
    functorList: functorList, 
    foldableList: foldableList, 
    unfoldableList: unfoldableList, 
    traversableList: traversableList, 
    applyList: applyList, 
    applicativeList: applicativeList, 
    bindList: bindList, 
    monadList: monadList, 
    altList: altList, 
    plusList: plusList, 
    alternativeList: alternativeList, 
    monadPlusList: monadPlusList
};
