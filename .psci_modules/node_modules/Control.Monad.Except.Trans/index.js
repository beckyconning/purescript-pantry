"use strict";
var Prelude = require("Prelude");
var Data_Either = require("Data.Either");
var Control_Monad_Rec_Class = require("Control.Monad.Rec.Class");
var Data_Monoid = require("Data.Monoid");
var Control_Monad_Trans = require("Control.Monad.Trans");
var Control_Monad_Eff_Class = require("Control.Monad.Eff.Class");
var Control_Alt = require("Control.Alt");
var Control_Alternative = require("Control.Alternative");
var Control_MonadPlus = require("Control.MonadPlus");
var Control_Plus = require("Control.Plus");

/**
 *  | A monad transformer which adds exceptions to other monads, in the same way
 *  | as `Except`. As before, `e` is the type of exceptions, and `a` is the type
 *  | of successful results. The new type parameter `m` is the inner monad that
 *  | computations run in.
 */
var ExceptT = function (x) {
    return x;
};

/**
 *  | Throw an exception in an `ExceptT` computation.
 */
var throwE = function (__dict_Applicative_0) {
    return Prelude["<<<"](Prelude.semigroupoidFn)(ExceptT)(Prelude["<<<"](Prelude.semigroupoidFn)(Prelude.pure(__dict_Applicative_0))(Data_Either.Left.create));
};

/**
 *  | The inverse of `ExceptT`. Run a computation in the `ExceptT` monad.
 */
var runExceptT = function (_239) {
    return _239;
};

/**
 *  | Transform any exceptions thrown by an `ExceptT` computation using the given function.
 */
var withExceptT = function (__dict_Functor_1) {
    return function (f) {
        var mapLeft = function (f_1) {
            return function (_240) {
                if (_240 instanceof Data_Either.Right) {
                    return new Data_Either.Right(_240.value0);
                };
                if (_240 instanceof Data_Either.Left) {
                    return new Data_Either.Left(f_1(_240.value0));
                };
                throw new Error("Failed pattern match at bower_components/purescript-transformers/src/Control/Monad/Except/Trans.purs line 30, column 3 - line 31, column 3: " + [ f_1.constructor.name, _240.constructor.name ]);
            };
        };
        return Prelude["<<<"](Prelude.semigroupoidFn)(ExceptT)(Prelude["<<<"](Prelude.semigroupoidFn)(Prelude["<$>"](__dict_Functor_1)(mapLeft(f)))(runExceptT));
    };
};
var monadTransExceptT = new Control_Monad_Trans.MonadTrans(function (__dict_Monad_4) {
    return function (m) {
        return ExceptT(Prelude.bind(__dict_Monad_4["__superclass_Prelude.Bind_1"]())(m)(function (_30) {
            return Prelude["return"](__dict_Monad_4["__superclass_Prelude.Applicative_0"]())(new Data_Either.Right(_30));
        }));
    };
});

/**
 *  | Transform the unwrapped computation using the given function.
 */
var mapExceptT = function (f) {
    return function (m) {
        return f(runExceptT(m));
    };
};
var functorExceptT = function (__dict_Functor_12) {
    return new Prelude.Functor(function (f) {
        return mapExceptT(Prelude["<$>"](__dict_Functor_12)(Prelude["<$>"](Data_Either.functorEither)(f)));
    });
};

/**
 *  | Catch an exception in an `ExceptT` computation.
 */
var catchE = function (__dict_Monad_13) {
    return function (m) {
        return function (handler) {
            return Prelude[">>="](__dict_Monad_13["__superclass_Prelude.Bind_1"]())(runExceptT(m))(Data_Either.either(Prelude["<<<"](Prelude.semigroupoidFn)(runExceptT)(handler))(Prelude["<<<"](Prelude.semigroupoidFn)(Prelude.pure(__dict_Monad_13["__superclass_Prelude.Applicative_0"]()))(Data_Either.Right.create)));
        };
    };
};
var applyExceptT = function (__dict_Apply_15) {
    return new Prelude.Apply(function () {
        return functorExceptT(__dict_Apply_15["__superclass_Prelude.Functor_0"]());
    }, function (_241) {
        return function (_242) {
            var f$prime = Prelude["<$>"](__dict_Apply_15["__superclass_Prelude.Functor_0"]())(Prelude["<*>"](Data_Either.applyEither))(_241);
            var x$prime = Prelude["<*>"](__dict_Apply_15)(f$prime)(_242);
            return x$prime;
        };
    });
};
var bindExceptT = function (__dict_Monad_14) {
    return new Prelude.Bind(function () {
        return applyExceptT((__dict_Monad_14["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]());
    }, function (m) {
        return function (k) {
            return Prelude[">>="](__dict_Monad_14["__superclass_Prelude.Bind_1"]())(runExceptT(m))(Data_Either.either(Prelude["<<<"](Prelude.semigroupoidFn)(Prelude["return"](__dict_Monad_14["__superclass_Prelude.Applicative_0"]()))(Data_Either.Left.create))(Prelude["<<<"](Prelude.semigroupoidFn)(runExceptT)(k)));
        };
    });
};
var applicativeExceptT = function (__dict_Applicative_16) {
    return new Prelude.Applicative(function () {
        return applyExceptT(__dict_Applicative_16["__superclass_Prelude.Apply_0"]());
    }, Prelude["<<<"](Prelude.semigroupoidFn)(ExceptT)(Prelude["<<<"](Prelude.semigroupoidFn)(Prelude.pure(__dict_Applicative_16))(Data_Either.Right.create)));
};
var monadExceptT = function (__dict_Monad_9) {
    return new Prelude.Monad(function () {
        return applicativeExceptT(__dict_Monad_9["__superclass_Prelude.Applicative_0"]());
    }, function () {
        return bindExceptT(__dict_Monad_9);
    });
};
var monadEffExceptT = function (__dict_Monad_10) {
    return function (__dict_MonadEff_11) {
        return new Control_Monad_Eff_Class.MonadEff(function () {
            return monadExceptT(__dict_Monad_10);
        }, Prelude["<<<"](Prelude.semigroupoidFn)(Control_Monad_Trans.lift(monadTransExceptT)(__dict_Monad_10))(Control_Monad_Eff_Class.liftEff(__dict_MonadEff_11)));
    };
};
var monadRecErrorT = function (__dict_Semigroup_5) {
    return function (__dict_MonadRec_6) {
        return new Control_Monad_Rec_Class.MonadRec(function () {
            return monadExceptT(__dict_MonadRec_6["__superclass_Prelude.Monad_0"]());
        }, function (f) {
            return Prelude["<<<"](Prelude.semigroupoidFn)(ExceptT)(Control_Monad_Rec_Class.tailRecM(__dict_MonadRec_6)(function (a) {
                return Prelude.bind((__dict_MonadRec_6["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Bind_1"]())(runExceptT(f(a)))(function (_27) {
                    return Prelude["return"]((__dict_MonadRec_6["__superclass_Prelude.Monad_0"]())["__superclass_Prelude.Applicative_0"]())((function () {
                        if (_27 instanceof Data_Either.Left) {
                            return new Data_Either.Right(new Data_Either.Left(_27.value0));
                        };
                        if (_27 instanceof Data_Either.Right && _27.value0 instanceof Data_Either.Left) {
                            return new Data_Either.Left(_27.value0.value0);
                        };
                        if (_27 instanceof Data_Either.Right && _27.value0 instanceof Data_Either.Right) {
                            return new Data_Either.Right(new Data_Either.Right(_27.value0.value0));
                        };
                        throw new Error("Failed pattern match at bower_components/purescript-transformers/src/Control/Monad/Except/Trans.purs line 55, column 1 - line 63, column 1: " + [ _27.constructor.name ]);
                    })());
                });
            }));
        });
    };
};
var altExceptT = function (__dict_Semigroup_19) {
    return function (__dict_Monad_20) {
        return new Control_Alt.Alt(function () {
            return functorExceptT(((__dict_Monad_20["__superclass_Prelude.Applicative_0"]())["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]());
        }, function (m) {
            return function (n) {
                return ExceptT(Prelude.bind(__dict_Monad_20["__superclass_Prelude.Bind_1"]())(runExceptT(m))(function (_29) {
                    if (_29 instanceof Data_Either.Right) {
                        return Prelude.pure(__dict_Monad_20["__superclass_Prelude.Applicative_0"]())(new Data_Either.Right(_29.value0));
                    };
                    if (_29 instanceof Data_Either.Left) {
                        return Prelude.bind(__dict_Monad_20["__superclass_Prelude.Bind_1"]())(runExceptT(n))(function (_28) {
                            if (_28 instanceof Data_Either.Right) {
                                return Prelude.pure(__dict_Monad_20["__superclass_Prelude.Applicative_0"]())(new Data_Either.Right(_28.value0));
                            };
                            if (_28 instanceof Data_Either.Left) {
                                return Prelude.pure(__dict_Monad_20["__superclass_Prelude.Applicative_0"]())(new Data_Either.Left(Prelude["<>"](__dict_Semigroup_19)(_29.value0)(_28.value0)));
                            };
                            throw new Error("Failed pattern match at bower_components/purescript-transformers/src/Control/Monad/Except/Trans.purs line 63, column 1 - line 74, column 1: " + [ _28.constructor.name ]);
                        });
                    };
                    throw new Error("Failed pattern match at bower_components/purescript-transformers/src/Control/Monad/Except/Trans.purs line 63, column 1 - line 74, column 1: " + [ _29.constructor.name ]);
                }));
            };
        });
    };
};
var plusExceptT = function (__dict_Monoid_2) {
    return function (__dict_Monad_3) {
        return new Control_Plus.Plus(function () {
            return altExceptT(__dict_Monoid_2["__superclass_Prelude.Semigroup_0"]())(__dict_Monad_3);
        }, throwE(__dict_Monad_3["__superclass_Prelude.Applicative_0"]())(Data_Monoid.mempty(__dict_Monoid_2)));
    };
};
var alternativeExceptT = function (__dict_Monoid_17) {
    return function (__dict_Monad_18) {
        return new Control_Alternative.Alternative(function () {
            return plusExceptT(__dict_Monoid_17)(__dict_Monad_18);
        }, function () {
            return applicativeExceptT(__dict_Monad_18["__superclass_Prelude.Applicative_0"]());
        });
    };
};
var monadPlusExceptT = function (__dict_Monoid_7) {
    return function (__dict_Monad_8) {
        return new Control_MonadPlus.MonadPlus(function () {
            return alternativeExceptT(__dict_Monoid_7)(__dict_Monad_8);
        }, function () {
            return monadExceptT(__dict_Monad_8);
        });
    };
};
module.exports = {
    ExceptT: ExceptT, 
    catchE: catchE, 
    throwE: throwE, 
    mapExceptT: mapExceptT, 
    withExceptT: withExceptT, 
    runExceptT: runExceptT, 
    functorExceptT: functorExceptT, 
    applyExceptT: applyExceptT, 
    applicativeExceptT: applicativeExceptT, 
    bindExceptT: bindExceptT, 
    monadExceptT: monadExceptT, 
    monadRecErrorT: monadRecErrorT, 
    altExceptT: altExceptT, 
    plusExceptT: plusExceptT, 
    alternativeExceptT: alternativeExceptT, 
    monadPlusExceptT: monadPlusExceptT, 
    monadTransExceptT: monadTransExceptT, 
    monadEffExceptT: monadEffExceptT
};
