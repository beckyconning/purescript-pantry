"use strict";
var Prelude = require("Prelude");
var Control_Monad_Trans = require("Control.Monad.Trans");
var Control_Monad_Aff = require("Control.Monad.Aff");
var Control_Monad_Cont_Trans = require("Control.Monad.Cont.Trans");
var Control_Monad_Error_Trans = require("Control.Monad.Error.Trans");
var Control_Monad_Except_Trans = require("Control.Monad.Except.Trans");
var Control_Monad_List_Trans = require("Control.Monad.List.Trans");
var Control_Monad_Maybe_Trans = require("Control.Monad.Maybe.Trans");
var Control_Monad_Reader_Trans = require("Control.Monad.Reader.Trans");
var Control_Monad_RWS_Trans = require("Control.Monad.RWS.Trans");
var Control_Monad_State_Trans = require("Control.Monad.State.Trans");
var Control_Monad_Writer_Trans = require("Control.Monad.Writer.Trans");
var Data_Monoid = require("Data.Monoid");
var MonadAff = function (liftAff) {
    this.liftAff = liftAff;
};
var monadAffAff = new MonadAff(Prelude.id(Prelude.categoryFn));
var liftAff = function (dict) {
    return dict.liftAff;
};
var monadAffContT = function (__dict_Monad_0) {
    return function (__dict_MonadAff_1) {
        return new MonadAff(Prelude["<<<"](Prelude.semigroupoidFn)(Control_Monad_Trans.lift(Control_Monad_Cont_Trans.monadTransContT)(__dict_Monad_0))(liftAff(__dict_MonadAff_1)));
    };
};
var monadAffError = function (__dict_Monad_2) {
    return function (__dict_MonadAff_3) {
        return new MonadAff(Prelude["<<<"](Prelude.semigroupoidFn)(Control_Monad_Trans.lift(Control_Monad_Error_Trans.monadTransErrorT)(__dict_Monad_2))(liftAff(__dict_MonadAff_3)));
    };
};
var monadAffExceptT = function (__dict_Monad_4) {
    return function (__dict_MonadAff_5) {
        return new MonadAff(Prelude["<<<"](Prelude.semigroupoidFn)(Control_Monad_Trans.lift(Control_Monad_Except_Trans.monadTransExceptT)(__dict_Monad_4))(liftAff(__dict_MonadAff_5)));
    };
};
var monadAffListT = function (__dict_Monad_6) {
    return function (__dict_MonadAff_7) {
        return new MonadAff(Prelude["<<<"](Prelude.semigroupoidFn)(Control_Monad_Trans.lift(Control_Monad_List_Trans.monadTransListT)(__dict_Monad_6))(liftAff(__dict_MonadAff_7)));
    };
};
var monadAffMaybe = function (__dict_Monad_8) {
    return function (__dict_MonadAff_9) {
        return new MonadAff(Prelude["<<<"](Prelude.semigroupoidFn)(Control_Monad_Trans.lift(Control_Monad_Maybe_Trans.monadTransMaybeT)(__dict_Monad_8))(liftAff(__dict_MonadAff_9)));
    };
};
var monadAffRWS = function (__dict_Monad_10) {
    return function (__dict_Monoid_11) {
        return function (__dict_MonadAff_12) {
            return new MonadAff(Prelude["<<<"](Prelude.semigroupoidFn)(Control_Monad_Trans.lift(Control_Monad_RWS_Trans.monadTransRWST(__dict_Monoid_11))(__dict_Monad_10))(liftAff(__dict_MonadAff_12)));
        };
    };
};
var monadAffReader = function (__dict_Monad_13) {
    return function (__dict_MonadAff_14) {
        return new MonadAff(Prelude["<<<"](Prelude.semigroupoidFn)(Control_Monad_Trans.lift(Control_Monad_Reader_Trans.monadTransReaderT)(__dict_Monad_13))(liftAff(__dict_MonadAff_14)));
    };
};
var monadAffState = function (__dict_Monad_15) {
    return function (__dict_MonadAff_16) {
        return new MonadAff(Prelude["<<<"](Prelude.semigroupoidFn)(Control_Monad_Trans.lift(Control_Monad_State_Trans.monadTransStateT)(__dict_Monad_15))(liftAff(__dict_MonadAff_16)));
    };
};
var monadAffWriter = function (__dict_Monad_17) {
    return function (__dict_Monoid_18) {
        return function (__dict_MonadAff_19) {
            return new MonadAff(Prelude["<<<"](Prelude.semigroupoidFn)(Control_Monad_Trans.lift(Control_Monad_Writer_Trans.monadTransWriterT(__dict_Monoid_18))(__dict_Monad_17))(liftAff(__dict_MonadAff_19)));
        };
    };
};
module.exports = {
    MonadAff: MonadAff, 
    liftAff: liftAff, 
    monadAffAff: monadAffAff, 
    monadAffContT: monadAffContT, 
    monadAffError: monadAffError, 
    monadAffExceptT: monadAffExceptT, 
    monadAffListT: monadAffListT, 
    monadAffMaybe: monadAffMaybe, 
    monadAffReader: monadAffReader, 
    monadAffRWS: monadAffRWS, 
    monadAffState: monadAffState, 
    monadAffWriter: monadAffWriter
};
