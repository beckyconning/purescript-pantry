
/**
 *  | A data type and functions for working with ordered pairs.
 */
"use strict";
var Prelude = require("Prelude");
var Data_Monoid = require("Data.Monoid");
var Data_Functor_Invariant = require("Data.Functor.Invariant");
var Control_Lazy = require("Control.Lazy");
var Data_Maybe_First = require("Data.Maybe.First");
var Data_Foldable = require("Data.Foldable");
var Control_Biapplicative = require("Control.Biapplicative");
var Control_Biapply = require("Control.Biapply");
var Control_Comonad = require("Control.Comonad");
var Control_Extend = require("Control.Extend");
var Data_Bifoldable = require("Data.Bifoldable");
var Data_Bifunctor = require("Data.Bifunctor");
var Data_Bitraversable = require("Data.Bitraversable");
var Data_Maybe = require("Data.Maybe");
var Data_Traversable = require("Data.Traversable");

/**
 *  | A simple product type for wrapping a pair of component values.
 */
var Tuple = (function () {
    function Tuple(value0, value1) {
        this.value0 = value0;
        this.value1 = value1;
    };
    Tuple.create = function (value0) {
        return function (value1) {
            return new Tuple(value0, value1);
        };
    };
    return Tuple;
})();

/**
 *  | Turn a function of two arguments into a function that expects a tuple.
 */
var uncurry = function (f) {
    return function (_249) {
        return f(_249.value0)(_249.value1);
    };
};

/**
 *  | Exchange the first and second components of a tuple.
 */
var swap = function (_250) {
    return new Tuple(_250.value1, _250.value0);
};

/**
 *  | Returns the second component of a tuple.
 */
var snd = function (_248) {
    return _248.value1;
};

/**
 *  | Allows `Tuple`s to be rendered as a string with `show` whenever there are
 *  | `Show` instances for both component types.
 */
var showTuple = function (__dict_Show_2) {
    return function (__dict_Show_3) {
        return new Prelude.Show(function (_251) {
            return "Tuple (" + (Prelude.show(__dict_Show_2)(_251.value0) + (") (" + (Prelude.show(__dict_Show_3)(_251.value1) + ")")));
        });
    };
};
var semiringTuple = function (__dict_Semiring_4) {
    return function (__dict_Semiring_5) {
        return new Prelude.Semiring(function (_260) {
            return function (_261) {
                return new Tuple(Prelude.add(__dict_Semiring_4)(_260.value0)(_261.value0), Prelude.add(__dict_Semiring_5)(_260.value1)(_261.value1));
            };
        }, function (_262) {
            return function (_263) {
                return new Tuple(Prelude.mul(__dict_Semiring_4)(_262.value0)(_263.value0), Prelude.mul(__dict_Semiring_5)(_262.value1)(_263.value1));
            };
        }, new Tuple(Prelude.one(__dict_Semiring_4), Prelude.one(__dict_Semiring_5)), new Tuple(Prelude.zero(__dict_Semiring_4), Prelude.zero(__dict_Semiring_5)));
    };
};
var semigroupoidTuple = new Prelude.Semigroupoid(function (_256) {
    return function (_257) {
        return new Tuple(_257.value0, _256.value1);
    };
});

/**
 *  | The `Semigroup` instance enables use of the associative operator `<>` on
 *  | `Tuple`s whenever there are `Semigroup` instances for the component
 *  | types. The `<>` operator is applied pairwise, so:
 *  | ```purescript
 *  | (Tuple a1 b1) <> (Tuple a2 b2) = Tuple (a1 <> a2) (b1 <> b2)
 *  | ```
 */
var semigroupTuple = function (__dict_Semigroup_6) {
    return function (__dict_Semigroup_7) {
        return new Prelude.Semigroup(function (_258) {
            return function (_259) {
                return new Tuple(Prelude["<>"](__dict_Semigroup_6)(_258.value0)(_259.value0), Prelude["<>"](__dict_Semigroup_7)(_258.value1)(_259.value1));
            };
        });
    };
};
var ringTuple = function (__dict_Ring_8) {
    return function (__dict_Ring_9) {
        return new Prelude.Ring(function () {
            return semiringTuple(__dict_Ring_8["__superclass_Prelude.Semiring_0"]())(__dict_Ring_9["__superclass_Prelude.Semiring_0"]());
        }, function (_268) {
            return function (_269) {
                return new Tuple(Prelude.sub(__dict_Ring_8)(_268.value0)(_269.value0), Prelude.sub(__dict_Ring_9)(_268.value1)(_269.value1));
            };
        });
    };
};
var monoidTuple = function (__dict_Monoid_14) {
    return function (__dict_Monoid_15) {
        return new Data_Monoid.Monoid(function () {
            return semigroupTuple(__dict_Monoid_14["__superclass_Prelude.Semigroup_0"]())(__dict_Monoid_15["__superclass_Prelude.Semigroup_0"]());
        }, new Tuple(Data_Monoid.mempty(__dict_Monoid_14), Data_Monoid.mempty(__dict_Monoid_15)));
    };
};
var moduloSemiringTuple = function (__dict_ModuloSemiring_17) {
    return function (__dict_ModuloSemiring_18) {
        return new Prelude.ModuloSemiring(function () {
            return semiringTuple(__dict_ModuloSemiring_17["__superclass_Prelude.Semiring_0"]())(__dict_ModuloSemiring_18["__superclass_Prelude.Semiring_0"]());
        }, function (_264) {
            return function (_265) {
                return new Tuple(Prelude.div(__dict_ModuloSemiring_17)(_264.value0)(_265.value0), Prelude.div(__dict_ModuloSemiring_18)(_264.value1)(_265.value1));
            };
        }, function (_266) {
            return function (_267) {
                return new Tuple(Prelude.mod(__dict_ModuloSemiring_17)(_266.value0)(_267.value0), Prelude.mod(__dict_ModuloSemiring_18)(_266.value1)(_267.value1));
            };
        });
    };
};

/**
 *  | Lookup a value in a data structure of `Tuple`s, generalizing association lists.
 */
var lookup = function (__dict_Foldable_19) {
    return function (__dict_Eq_20) {
        return function (a) {
            return function (f) {
                return Data_Maybe_First.runFirst(Data_Foldable.foldMap(__dict_Foldable_19)(Data_Maybe_First.monoidFirst)(function (_246) {
                    var _693 = Prelude["=="](__dict_Eq_20)(a)(_246.value0);
                    if (_693) {
                        return new Data_Maybe.Just(_246.value1);
                    };
                    if (!_693) {
                        return Data_Maybe.Nothing.value;
                    };
                    throw new Error("Failed pattern match at bower_components/purescript-tuples/src/Data/Tuple.purs line 173, column 1 - line 174, column 1: " + [ _693.constructor.name ]);
                })(f));
            };
        };
    };
};

/**
 *  | The `Functor` instance allows functions to transform the contents of a
 *  | `Tuple` with the `<$>` operator, applying the function to the second
 *  | component, so:
 *  | ```purescript
 *  | f <$> (Tuple x y) = Tuple x (f y)
 *  | ````
 */
var functorTuple = new Prelude.Functor(function (f) {
    return function (_275) {
        return new Tuple(_275.value0, f(_275.value1));
    };
});
var invariantTuple = new Data_Functor_Invariant.Invariant(Data_Functor_Invariant.imapF(functorTuple));

/**
 *  | Returns the first component of a tuple.
 */
var fst = function (_247) {
    return _247.value0;
};
var lazyTuple = function (__dict_Lazy_21) {
    return function (__dict_Lazy_22) {
        return new Control_Lazy.Lazy(function (f) {
            return new Tuple(Control_Lazy.defer(__dict_Lazy_21)(function (_244) {
                return fst(f(Prelude.unit));
            }), Control_Lazy.defer(__dict_Lazy_22)(function (_245) {
                return snd(f(Prelude.unit));
            }));
        });
    };
};
var foldableTuple = new Data_Foldable.Foldable(function (__dict_Monoid_23) {
    return function (f) {
        return function (_285) {
            return f(_285.value1);
        };
    };
}, function (f) {
    return function (z) {
        return function (_284) {
            return f(z)(_284.value1);
        };
    };
}, function (f) {
    return function (z) {
        return function (_283) {
            return f(_283.value1)(z);
        };
    };
});
var traversableTuple = new Data_Traversable.Traversable(function () {
    return foldableTuple;
}, function () {
    return functorTuple;
}, function (__dict_Applicative_1) {
    return function (_290) {
        return Prelude["<$>"]((__dict_Applicative_1["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Tuple.create(_290.value0))(_290.value1);
    };
}, function (__dict_Applicative_0) {
    return function (f) {
        return function (_289) {
            return Prelude["<$>"]((__dict_Applicative_0["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Tuple.create(_289.value0))(f(_289.value1));
        };
    };
});
var extendTuple = new Control_Extend.Extend(function () {
    return functorTuple;
}, function (f) {
    return function (_282) {
        return new Tuple(_282.value0, f(_282));
    };
});

/**
 *  | Allows `Tuple`s to be checked for equality with `==` and `/=` whenever
 *  | there are `Eq` instances for both component types.
 */
var eqTuple = function (__dict_Eq_24) {
    return function (__dict_Eq_25) {
        return new Prelude.Eq(function (_252) {
            return function (_253) {
                return Prelude["&&"](Prelude.booleanAlgebraBoolean)(Prelude["=="](__dict_Eq_24)(_252.value0)(_253.value0))(Prelude["=="](__dict_Eq_25)(_252.value1)(_253.value1));
            };
        });
    };
};

/**
 *  | Allows `Tuple`s to be compared with `compare`, `>`, `>=`, `<` and `<=`
 *  | whenever there are `Ord` instances for both component types. To obtain
 *  | the result, the `fst`s are `compare`d, and if they are `EQ`ual, the
 *  | `snd`s are `compare`d.
 */
var ordTuple = function (__dict_Ord_10) {
    return function (__dict_Ord_11) {
        return new Prelude.Ord(function () {
            return eqTuple(__dict_Ord_10["__superclass_Prelude.Eq_0"]())(__dict_Ord_11["__superclass_Prelude.Eq_0"]());
        }, function (_254) {
            return function (_255) {
                var _738 = Prelude.compare(__dict_Ord_10)(_254.value0)(_255.value0);
                if (_738 instanceof Prelude.EQ) {
                    return Prelude.compare(__dict_Ord_11)(_254.value1)(_255.value1);
                };
                return _738;
            };
        });
    };
};
var divisionRingTuple = function (__dict_DivisionRing_26) {
    return function (__dict_DivisionRing_27) {
        return new Prelude.DivisionRing(function () {
            return moduloSemiringTuple(__dict_DivisionRing_26["__superclass_Prelude.ModuloSemiring_1"]())(__dict_DivisionRing_27["__superclass_Prelude.ModuloSemiring_1"]());
        }, function () {
            return ringTuple(__dict_DivisionRing_26["__superclass_Prelude.Ring_0"]())(__dict_DivisionRing_27["__superclass_Prelude.Ring_0"]());
        });
    };
};
var numTuple = function (__dict_Num_12) {
    return function (__dict_Num_13) {
        return new Prelude.Num(function () {
            return divisionRingTuple(__dict_Num_12["__superclass_Prelude.DivisionRing_0"]())(__dict_Num_13["__superclass_Prelude.DivisionRing_0"]());
        });
    };
};

/**
 *  | Turn a function that expects a tuple into a function of two arguments.
 */
var curry = function (f) {
    return function (a) {
        return function (b) {
            return f(new Tuple(a, b));
        };
    };
};
var comonadTuple = new Control_Comonad.Comonad(function () {
    return extendTuple;
}, snd);
var boundedTuple = function (__dict_Bounded_28) {
    return function (__dict_Bounded_29) {
        return new Prelude.Bounded(new Tuple(Prelude.bottom(__dict_Bounded_28), Prelude.bottom(__dict_Bounded_29)), new Tuple(Prelude.top(__dict_Bounded_28), Prelude.top(__dict_Bounded_29)));
    };
};
var boundedOrdTuple = function (__dict_BoundedOrd_30) {
    return function (__dict_BoundedOrd_31) {
        return new Prelude.BoundedOrd(function () {
            return boundedTuple(__dict_BoundedOrd_30["__superclass_Prelude.Bounded_0"]())(__dict_BoundedOrd_31["__superclass_Prelude.Bounded_0"]());
        }, function () {
            return ordTuple(__dict_BoundedOrd_30["__superclass_Prelude.Ord_1"]())(__dict_BoundedOrd_31["__superclass_Prelude.Ord_1"]());
        });
    };
};
var booleanAlgebraTuple = function (__dict_BooleanAlgebra_32) {
    return function (__dict_BooleanAlgebra_33) {
        return new Prelude.BooleanAlgebra(function () {
            return boundedTuple(__dict_BooleanAlgebra_32["__superclass_Prelude.Bounded_0"]())(__dict_BooleanAlgebra_33["__superclass_Prelude.Bounded_0"]());
        }, function (_270) {
            return function (_271) {
                return new Tuple(Prelude.conj(__dict_BooleanAlgebra_32)(_270.value0)(_271.value0), Prelude.conj(__dict_BooleanAlgebra_33)(_270.value1)(_271.value1));
            };
        }, function (_272) {
            return function (_273) {
                return new Tuple(Prelude.disj(__dict_BooleanAlgebra_32)(_272.value0)(_273.value0), Prelude.disj(__dict_BooleanAlgebra_33)(_272.value1)(_273.value1));
            };
        }, function (_274) {
            return new Tuple(Prelude.not(__dict_BooleanAlgebra_32)(_274.value0), Prelude.not(__dict_BooleanAlgebra_33)(_274.value1));
        });
    };
};
var bifunctorTuple = new Data_Bifunctor.Bifunctor(function (f) {
    return function (g) {
        return function (_276) {
            return new Tuple(f(_276.value0), g(_276.value1));
        };
    };
});
var bifoldableTuple = new Data_Bifoldable.Bifoldable(function (__dict_Monoid_37) {
    return function (f) {
        return function (g) {
            return function (_286) {
                return Prelude["<>"](__dict_Monoid_37["__superclass_Prelude.Semigroup_0"]())(f(_286.value0))(g(_286.value1));
            };
        };
    };
}, function (f) {
    return function (g) {
        return function (z) {
            return function (_288) {
                return g(f(z)(_288.value0))(_288.value1);
            };
        };
    };
}, function (f) {
    return function (g) {
        return function (z) {
            return function (_287) {
                return f(_287.value0)(g(_287.value1)(z));
            };
        };
    };
});
var bitraversableTuple = new Data_Bitraversable.Bitraversable(function () {
    return bifoldableTuple;
}, function () {
    return bifunctorTuple;
}, function (__dict_Applicative_35) {
    return function (_292) {
        return Prelude["<*>"](__dict_Applicative_35["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_35["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Tuple.create)(_292.value0))(_292.value1);
    };
}, function (__dict_Applicative_34) {
    return function (f) {
        return function (g) {
            return function (_291) {
                return Prelude["<*>"](__dict_Applicative_34["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_34["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Tuple.create)(f(_291.value0)))(g(_291.value1));
            };
        };
    };
});
var biapplyTuple = new Control_Biapply.Biapply(function () {
    return bifunctorTuple;
}, function (_279) {
    return function (_280) {
        return new Tuple(_279.value0(_280.value0), _279.value1(_280.value1));
    };
});
var biapplicativeTuple = new Control_Biapplicative.Biapplicative(function () {
    return biapplyTuple;
}, Tuple.create);

/**
 *  | The `Functor` instance allows functions to transform the contents of a
 *  | `Tuple` with the `<*>` operator whenever there is a `Semigroup` instance
 *  | for the `fst` component, so:
 *  | ```purescript
 *  | (Tuple a1 f) <*> (Tuple a2 x) == Tuple (a1 <> a2) (f x)
 *  | ```
 */
var applyTuple = function (__dict_Semigroup_38) {
    return new Prelude.Apply(function () {
        return functorTuple;
    }, function (_277) {
        return function (_278) {
            return new Tuple(Prelude["<>"](__dict_Semigroup_38)(_277.value0)(_278.value0), _277.value1(_278.value1));
        };
    });
};
var bindTuple = function (__dict_Semigroup_36) {
    return new Prelude.Bind(function () {
        return applyTuple(__dict_Semigroup_36);
    }, function (_281) {
        return function (f) {
            var _802 = f(_281.value1);
            return new Tuple(Prelude["<>"](__dict_Semigroup_36)(_281.value0)(_802.value0), _802.value1);
        };
    });
};
var applicativeTuple = function (__dict_Monoid_39) {
    return new Prelude.Applicative(function () {
        return applyTuple(__dict_Monoid_39["__superclass_Prelude.Semigroup_0"]());
    }, Tuple.create(Data_Monoid.mempty(__dict_Monoid_39)));
};
var monadTuple = function (__dict_Monoid_16) {
    return new Prelude.Monad(function () {
        return applicativeTuple(__dict_Monoid_16);
    }, function () {
        return bindTuple(__dict_Monoid_16["__superclass_Prelude.Semigroup_0"]());
    });
};
module.exports = {
    Tuple: Tuple, 
    lookup: lookup, 
    swap: swap, 
    uncurry: uncurry, 
    curry: curry, 
    snd: snd, 
    fst: fst, 
    showTuple: showTuple, 
    eqTuple: eqTuple, 
    ordTuple: ordTuple, 
    boundedTuple: boundedTuple, 
    boundedOrdTuple: boundedOrdTuple, 
    semigroupoidTuple: semigroupoidTuple, 
    semigroupTuple: semigroupTuple, 
    monoidTuple: monoidTuple, 
    semiringTuple: semiringTuple, 
    moduloSemiringTuple: moduloSemiringTuple, 
    ringTuple: ringTuple, 
    divisionRingTuple: divisionRingTuple, 
    numTuple: numTuple, 
    booleanAlgebraTuple: booleanAlgebraTuple, 
    functorTuple: functorTuple, 
    invariantTuple: invariantTuple, 
    bifunctorTuple: bifunctorTuple, 
    applyTuple: applyTuple, 
    biapplyTuple: biapplyTuple, 
    applicativeTuple: applicativeTuple, 
    biapplicativeTuple: biapplicativeTuple, 
    bindTuple: bindTuple, 
    monadTuple: monadTuple, 
    extendTuple: extendTuple, 
    comonadTuple: comonadTuple, 
    lazyTuple: lazyTuple, 
    foldableTuple: foldableTuple, 
    bifoldableTuple: bifoldableTuple, 
    traversableTuple: traversableTuple, 
    bitraversableTuple: bitraversableTuple
};
