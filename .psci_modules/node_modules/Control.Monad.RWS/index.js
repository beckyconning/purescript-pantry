
/**
 *  | This module defines the `RWS` monad.
 */
"use strict";
var Prelude = require("Prelude");
var Data_Identity = require("Data.Identity");
var Control_Monad_RWS_Trans = require("Control.Monad.RWS.Trans");
var Data_Monoid = require("Data.Monoid");
var Data_Tuple = require("Data.Tuple");

/**
 *  | Write to the accumulator in a `RWS` action
 */
var writer = function (__dict_Applicative_0) {
    return function (_334) {
        return function (_328) {
            return function (s) {
                return Prelude.pure(__dict_Applicative_0)({
                    state: s, 
                    result: _334.value0, 
                    log: _334.value1
                });
            };
        };
    };
};

/**
 *  | Change the type of the context in a `RWS` action
 */
var withRWS = Control_Monad_RWS_Trans.withRWST;

/**
 *  | Append a value to the accumulator in a `RWS` action
 */
var tell = function (__dict_Applicative_1) {
    return function (w) {
        return writer(__dict_Applicative_1)(new Data_Tuple.Tuple(Prelude.unit, w));
    };
};

/**
 *  | Get or modify the state in a `RWS` action
 */
var state = function (__dict_Applicative_2) {
    return function (__dict_Monoid_3) {
        return function (f) {
            return function (_332) {
                return function (s) {
                    var _656 = f(s);
                    return Prelude.pure(__dict_Applicative_2)(Control_Monad_RWS_Trans.mkSee(__dict_Monoid_3)(_656.value1)(_656.value0)(Data_Monoid.mempty(__dict_Monoid_3)));
                };
            };
        };
    };
};

/**
 *  | Create an action in the `RWS` monad from a function which uses the 
 *  | global context and state explicitly.
 */
var rws = function (f) {
    return function (r) {
        return function (s) {
            return Prelude["return"](Data_Identity.applicativeIdentity)(f(r)(s));
        };
    };
};

/**
 *  | Run a computation in the `RWS` monad.
 */
var runRWS = function (m) {
    return function (r) {
        return function (s) {
            return Data_Identity.runIdentity(Control_Monad_RWS_Trans.runRWST(m)(r)(s));
        };
    };
};

/**
 *  | Read a value which depends on the context in a `RWS` action.
 */
var reader = function (__dict_Applicative_4) {
    return function (__dict_Monoid_5) {
        return function (f) {
            return function (r) {
                return function (s) {
                    return Prelude.pure(__dict_Applicative_4)(Control_Monad_RWS_Trans.mkSee(__dict_Monoid_5)(s)(f(r))(Data_Monoid.mempty(__dict_Monoid_5)));
                };
            };
        };
    };
};

/**
 *  | Set the state in a `RWS` action
 */
var put = function (__dict_Applicative_6) {
    return function (__dict_Monoid_7) {
        return function (s) {
            return state(__dict_Applicative_6)(__dict_Monoid_7)(function (_333) {
                return new Data_Tuple.Tuple(Prelude.unit, s);
            });
        };
    };
};

/**
 *  | Execute a `RWS` action and modify the accumulator
 */
var pass = function (__dict_Monad_8) {
    return function (m) {
        return function (r) {
            return function (s) {
                return Prelude[">>="](__dict_Monad_8["__superclass_Prelude.Bind_1"]())(Control_Monad_RWS_Trans.runRWST(m)(r)(s))(function (_330) {
                    return Prelude.pure(__dict_Monad_8["__superclass_Prelude.Applicative_0"]())({
                        state: _330.state, 
                        result: _330.result.value0, 
                        log: _330.result.value1(_330.log)
                    });
                });
            };
        };
    };
};

/**
 *  | Modify the state in a `RWS` action
 */
var modify = function (__dict_Applicative_9) {
    return function (__dict_Monoid_10) {
        return function (f) {
            return state(__dict_Applicative_9)(__dict_Monoid_10)(function (s) {
                return new Data_Tuple.Tuple(Prelude.unit, f(s));
            });
        };
    };
};

/**
 *  | Change the types of the result and accumulator in a `RWS` action
 */
var mapRWS = function (f) {
    return Control_Monad_RWS_Trans.mapRWST(Prelude[">>>"](Prelude.semigroupoidFn)(Data_Identity.runIdentity)(Prelude[">>>"](Prelude.semigroupoidFn)(f)(Data_Identity.Identity)));
};

/**
 *  | Locally change the context of a `RWS` action.
 */
var local = function (f) {
    return function (m) {
        return function (r) {
            return function (s) {
                return Control_Monad_RWS_Trans.runRWST(m)(f(r))(s);
            };
        };
    };
};

/**
 *  | Execute a `RWS` action, and return a value which depends on the accumulator along with the return value
 */
var listens = function (__dict_Monad_11) {
    return function (f) {
        return function (m) {
            return function (r) {
                return function (s) {
                    return Prelude[">>="](__dict_Monad_11["__superclass_Prelude.Bind_1"]())(Control_Monad_RWS_Trans.runRWST(m)(r)(s))(function (_331) {
                        return Prelude.pure(__dict_Monad_11["__superclass_Prelude.Applicative_0"]())({
                            state: _331.state, 
                            result: new Data_Tuple.Tuple(_331.result, f(_331.log)), 
                            log: _331.log
                        });
                    });
                };
            };
        };
    };
};

/**
 *  | Execute a `RWS` action, and return the changes to the accumulator along with the return value
 */
var listen = function (__dict_Monad_12) {
    return function (m) {
        return function (r) {
            return function (s) {
                return Prelude[">>="](__dict_Monad_12["__superclass_Prelude.Bind_1"]())(Control_Monad_RWS_Trans.runRWST(m)(r)(s))(function (_329) {
                    return Prelude.pure(__dict_Monad_12["__superclass_Prelude.Applicative_0"]())({
                        state: _329.state, 
                        result: new Data_Tuple.Tuple(_329.result, _329.log), 
                        log: _329.log
                    });
                });
            };
        };
    };
};

/**
 *  | Get a value which depends on the state in a `RWS` action
 */
var gets = function (__dict_Applicative_13) {
    return function (__dict_Monoid_14) {
        return function (f) {
            return state(__dict_Applicative_13)(__dict_Monoid_14)(function (s) {
                return new Data_Tuple.Tuple(f(s), s);
            });
        };
    };
};

/**
 *  | Get the state in a `RWS` action
 */
var get = function (__dict_Applicative_15) {
    return function (__dict_Monoid_16) {
        return state(__dict_Applicative_15)(__dict_Monoid_16)(function (s) {
            return new Data_Tuple.Tuple(s, s);
        });
    };
};

/**
 *  | Run a computation in the `RWS` monad, discarding the result
 */
var execRWS = function (m) {
    return function (r) {
        return function (s) {
            return Data_Identity.runIdentity(Control_Monad_RWS_Trans.execRWST(Data_Identity.monadIdentity)(m)(r)(s));
        };
    };
};

/**
 *  | Run a computation in the `RWS` monad, discarding the final state
 */
var evalRWS = function (m) {
    return function (r) {
        return function (s) {
            return Data_Identity.runIdentity(Control_Monad_RWS_Trans.evalRWST(Data_Identity.monadIdentity)(m)(r)(s));
        };
    };
};

/**
 *  | Modify the accumulator in a `RWS` action
 */
var censor = function (__dict_Monad_17) {
    return function (f) {
        return function (m) {
            return function (r) {
                return function (s) {
                    return Prelude[">>="](__dict_Monad_17["__superclass_Prelude.Bind_1"]())(Control_Monad_RWS_Trans.runRWST(m)(r)(s))(function (see) {
                        return Prelude.pure(__dict_Monad_17["__superclass_Prelude.Applicative_0"]())((function () {
                            var _674 = {};
                            for (var _675 in see) {
                                if (see.hasOwnProperty(_675)) {
                                    _674[_675] = see[_675];
                                };
                            };
                            _674.log = f(see.log);
                            return _674;
                        })());
                    });
                };
            };
        };
    };
};

/**
 *  | Get the context of a `RWS` action
 */
var ask = function (__dict_Applicative_18) {
    return function (__dict_Monoid_19) {
        return function (r) {
            return function (s) {
                return Prelude.pure(__dict_Applicative_18)(Control_Monad_RWS_Trans.mkSee(__dict_Monoid_19)(s)(r)(Data_Monoid.mempty(__dict_Monoid_19)));
            };
        };
    };
};
module.exports = {
    modify: modify, 
    put: put, 
    gets: gets, 
    get: get, 
    state: state, 
    censor: censor, 
    listens: listens, 
    tell: tell, 
    pass: pass, 
    listen: listen, 
    writer: writer, 
    reader: reader, 
    local: local, 
    ask: ask, 
    withRWS: withRWS, 
    mapRWS: mapRWS, 
    execRWS: execRWS, 
    evalRWS: evalRWS, 
    runRWS: runRWS, 
    rws: rws
};
