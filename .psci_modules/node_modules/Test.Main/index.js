"use strict";
var Test_QuickCheck_Arbitrary = require("Test.QuickCheck.Arbitrary");
var Test_Signal = require("Test.Signal");
var Prelude = require("Prelude");
var Signal = require("Signal");
var Test_QuickCheck_Gen = require("Test.QuickCheck.Gen");
var Test_Unit = require("Test.Unit");
var Control_Apply = require("Control.Apply");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Control_Monad_Eff_Console = require("Control.Monad.Eff.Console");
var Data_Identity = require("Data.Identity");
var Data_Traversable = require("Data.Traversable");
var Signal_Channel = require("Signal.Channel");
var Doc = function (x) {
    return x;
};
var EmptyDoc = function (x) {
    return x;
};
var ChangeNotificationResult = function (x) {
    return x;
};
var ChangeNotification = function (x) {
    return x;
};
var runEmptyDoc = function (_7) {
    return _7;
};
var contents = function (xs) {
    return function (_8) {
        return Signal.constant(xs);
    };
};
var arbSignal = function (__dict_Arbitrary_0) {
    return new Test_QuickCheck_Arbitrary.Arbitrary(Prelude.map(Test_QuickCheck_Gen.functorGen)(Test_Signal.unsafeFromArray)(Test_QuickCheck_Arbitrary.arbitrary(Test_QuickCheck_Arbitrary.arbArray(__dict_Arbitrary_0))));
};
var arbIdentity = function (__dict_Arbitrary_1) {
    return new Test_QuickCheck_Arbitrary.Arbitrary(Prelude["<$>"](Test_QuickCheck_Gen.functorGen)(Data_Identity.Identity)(Test_QuickCheck_Arbitrary.arbitrary(__dict_Arbitrary_1)));
};
var arbDoc = new Test_QuickCheck_Arbitrary.Arbitrary(Prelude.map(Test_QuickCheck_Gen.functorGen)(Prelude.compose(Prelude.semigroupoidFn)(EmptyDoc)(Doc))(Prelude.apply(Test_QuickCheck_Gen.applyGen)(Prelude.map(Test_QuickCheck_Gen.functorGen)(function (_0) {
    return function (_1) {
        return {
            _id: _0, 
            _rev: _1
        };
    };
})(Test_QuickCheck_Arbitrary.arbitrary(Test_QuickCheck_Arbitrary.arbString)))(Test_QuickCheck_Arbitrary.arbitrary(Test_QuickCheck_Arbitrary.arbString))));
var main = function __do() {
    var _6 = Test_QuickCheck_Gen["randomSample'"](100)(Test_QuickCheck_Arbitrary.arbitrary(Test_QuickCheck_Arbitrary.arbArray(arbDoc)))();
    return Test_Unit.runTest(Test_Unit.assertFn("should have the value of the initially provided array")(function (done) {
        return done(true);
    }))();
};
var arbChangeNotificationResult = new Test_QuickCheck_Arbitrary.Arbitrary(Prelude.map(Test_QuickCheck_Gen.functorGen)(ChangeNotificationResult)(Prelude.apply(Test_QuickCheck_Gen.applyGen)(Prelude.map(Test_QuickCheck_Gen.functorGen)(function (_2) {
    return function (_3) {
        return {
            id: _2, 
            changes: _3
        };
    };
})(Test_QuickCheck_Arbitrary.arbitrary(Test_QuickCheck_Arbitrary.arbString)))(Test_QuickCheck_Arbitrary.arbitrary(Test_QuickCheck_Arbitrary.arbArray(Test_QuickCheck_Arbitrary.arbString)))));
var arbChangeNotification = new Test_QuickCheck_Arbitrary.Arbitrary(Prelude.map(Test_QuickCheck_Gen.functorGen)(ChangeNotification)(Prelude.apply(Test_QuickCheck_Gen.applyGen)(Prelude.map(Test_QuickCheck_Gen.functorGen)(function (_4) {
    return function (_5) {
        return {
            last_seq: _4, 
            results: _5
        };
    };
})(Test_QuickCheck_Arbitrary.arbitrary(Test_QuickCheck_Arbitrary.arbInt)))(Test_QuickCheck_Arbitrary.arbitrary(Test_QuickCheck_Arbitrary.arbArray(arbChangeNotificationResult)))));
module.exports = {
    ChangeNotification: ChangeNotification, 
    ChangeNotificationResult: ChangeNotificationResult, 
    EmptyDoc: EmptyDoc, 
    Doc: Doc, 
    main: main, 
    contents: contents, 
    runEmptyDoc: runEmptyDoc, 
    arbDoc: arbDoc, 
    arbChangeNotificationResult: arbChangeNotificationResult, 
    arbChangeNotification: arbChangeNotification, 
    arbSignal: arbSignal, 
    arbIdentity: arbIdentity
};
