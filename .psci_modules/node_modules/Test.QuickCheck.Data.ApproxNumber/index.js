"use strict";
var Prelude = require("Prelude");
var Test_QuickCheck_Arbitrary = require("Test.QuickCheck.Arbitrary");
var Test_QuickCheck_Gen = require("Test.QuickCheck.Gen");

/**
 *  | A newtype for `Number` whose `Eq` instance uses an epsilon value to allow
 *  | for precision erros when comparing.
 */
var ApproxNumber = function (x) {
    return x;
};

/**
 *  Approximate equality comparison
 */
var $eq$tilde$eq = function (x) {
    return function (y) {
        return Prelude["&&"](Prelude.booleanAlgebraBoolean)(y - x <= 1.0000000000000002e-8)(y - x >= -1.0000000000000002e-8);
    };
};
var semiringApproxNumber = new Prelude.Semiring(function (_599) {
    return function (_600) {
        return _599 + _600;
    };
}, function (_601) {
    return function (_602) {
        return _601 * _602;
    };
}, 1, 0);
var ringApproxNumber = new Prelude.Ring(function () {
    return semiringApproxNumber;
}, function (_607) {
    return function (_608) {
        return _607 - _608;
    };
});
var moduloSemiringApproxNumber = new Prelude.ModuloSemiring(function () {
    return semiringApproxNumber;
}, function (_603) {
    return function (_604) {
        return _603 / _604;
    };
}, function (_605) {
    return function (_606) {
        return Prelude.mod(Prelude.moduloSemiringNumber)(_605)(_606);
    };
});
var eqApproxNumber = new Prelude.Eq(function (_595) {
    return function (_596) {
        return $eq$tilde$eq(_595)(_596);
    };
});
var ordApproxNumber = new Prelude.Ord(function () {
    return eqApproxNumber;
}, function (_597) {
    return function (_598) {
        return Prelude.compare(Prelude.ordNumber)(_597)(_598);
    };
});
var divisionRingApproxNumber = new Prelude.DivisionRing(function () {
    return moduloSemiringApproxNumber;
}, function () {
    return ringApproxNumber;
});
var numApproxNumber = new Prelude.Num(function () {
    return divisionRingApproxNumber;
});
var coarbitraryApproxNumber = new Test_QuickCheck_Arbitrary.Coarbitrary(function (_594) {
    return Test_QuickCheck_Arbitrary.coarbitrary(Test_QuickCheck_Arbitrary.coarbNumber)(_594);
});
var arbitraryApproxNumber = new Test_QuickCheck_Arbitrary.Arbitrary(Prelude["<$>"](Test_QuickCheck_Gen.functorGen)(ApproxNumber)(Test_QuickCheck_Arbitrary.arbitrary(Test_QuickCheck_Arbitrary.arbNumber)));
module.exports = {
    ApproxNumber: ApproxNumber, 
    "=~=": $eq$tilde$eq, 
    arbitraryApproxNumber: arbitraryApproxNumber, 
    coarbitraryApproxNumber: coarbitraryApproxNumber, 
    eqApproxNumber: eqApproxNumber, 
    ordApproxNumber: ordApproxNumber, 
    semiringApproxNumber: semiringApproxNumber, 
    moduloSemiringApproxNumber: moduloSemiringApproxNumber, 
    ringApproxNumber: ringApproxNumber, 
    divisionRingApproxNumber: divisionRingApproxNumber, 
    numApproxNumber: numApproxNumber
};
