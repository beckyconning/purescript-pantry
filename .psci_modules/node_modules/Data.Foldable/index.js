"use strict";
var $foreign = require("./foreign");
var Prelude = require("Prelude");
var Data_Monoid = require("Data.Monoid");
var Control_Apply = require("Control.Apply");
var Data_Monoid_Disj = require("Data.Monoid.Disj");
var Data_Monoid_Conj = require("Data.Monoid.Conj");
var Data_Maybe = require("Data.Maybe");
var Data_Maybe_First = require("Data.Maybe.First");
var Data_Maybe_Last = require("Data.Maybe.Last");
var Data_Monoid_Additive = require("Data.Monoid.Additive");
var Data_Monoid_Dual = require("Data.Monoid.Dual");
var Data_Monoid_Multiplicative = require("Data.Monoid.Multiplicative");

/**
 *  | `Foldable` represents data structures which can be _folded_.
 *  |
 *  | - `foldr` folds a structure from the right
 *  | - `foldl` folds a structure from the left
 *  | - `foldMap` folds a structure by accumulating values in a `Monoid`
 */
var Foldable = function (foldMap, foldl, foldr) {
    this.foldMap = foldMap;
    this.foldl = foldl;
    this.foldr = foldr;
};

/**
 *  | `Foldable` represents data structures which can be _folded_.
 *  |
 *  | - `foldr` folds a structure from the right
 *  | - `foldl` folds a structure from the left
 *  | - `foldMap` folds a structure by accumulating values in a `Monoid`
 */
var foldr = function (dict) {
    return dict.foldr;
};

/**
 *  | Traverse a data structure, performing some effects encoded by an
 *  | `Applicative` functor at each value, ignoring the final result.
 *  |
 *  | For example:
 *  |
 *  | ```purescript
 *  | traverse_ print [1, 2, 3]
 *  | ```
 */
var traverse_ = function (__dict_Applicative_0) {
    return function (__dict_Foldable_1) {
        return function (f) {
            return foldr(__dict_Foldable_1)(Prelude["<<<"](Prelude.semigroupoidFn)(Control_Apply["*>"](__dict_Applicative_0["__superclass_Prelude.Apply_0"]()))(f))(Prelude.pure(__dict_Applicative_0)(Prelude.unit));
        };
    };
};

/**
 *  | A version of `traverse_` with its arguments flipped.
 *  |
 *  | This can be useful when running an action written using do notation
 *  | for every element in a data structure:
 *  |
 *  | For example:
 *  |
 *  | ```purescript
 *  | for_ [1, 2, 3] \n -> do
 *  |   print n
 *  |   trace "squared is"
 *  |   print (n * n)
 *  | ```
 */
var for_ = function (__dict_Applicative_2) {
    return function (__dict_Foldable_3) {
        return Prelude.flip(traverse_(__dict_Applicative_2)(__dict_Foldable_3));
    };
};

/**
 *  | Perform all of the effects in some data structure in the order
 *  | given by the `Foldable` instance, ignoring the final result.
 *  |
 *  | For example:
 *  |
 *  | ```purescript
 *  | sequence_ [ trace "Hello, ", trace " world!" ]
 *  | ```
 */
var sequence_ = function (__dict_Applicative_4) {
    return function (__dict_Foldable_5) {
        return traverse_(__dict_Applicative_4)(__dict_Foldable_5)(Prelude.id(Prelude.categoryFn));
    };
};

/**
 *  | `Foldable` represents data structures which can be _folded_.
 *  |
 *  | - `foldr` folds a structure from the right
 *  | - `foldl` folds a structure from the left
 *  | - `foldMap` folds a structure by accumulating values in a `Monoid`
 */
var foldl = function (dict) {
    return dict.foldl;
};

/**
 *  | Fold a data structure, accumulating values in some `Monoid`,
 *  | combining adjacent elements using the specified separator.
 */
var intercalate = function (__dict_Foldable_6) {
    return function (__dict_Monoid_7) {
        return function (sep) {
            return function (xs) {
                var go = function (_155) {
                    return function (x) {
                        if (_155.init) {
                            return {
                                init: false, 
                                acc: x
                            };
                        };
                        return {
                            init: false, 
                            acc: Prelude["<>"](__dict_Monoid_7["__superclass_Prelude.Semigroup_0"]())(_155.acc)(Prelude["<>"](__dict_Monoid_7["__superclass_Prelude.Semigroup_0"]())(sep)(x))
                        };
                    };
                };
                return (foldl(__dict_Foldable_6)(go)({
                    init: true, 
                    acc: Data_Monoid.mempty(__dict_Monoid_7)
                })(xs)).acc;
            };
        };
    };
};

/**
 *  | Fold a data structure, accumulating values in some `Monoid`.
 */
var mconcat = function (__dict_Foldable_8) {
    return function (__dict_Monoid_9) {
        return foldl(__dict_Foldable_8)(Prelude["<>"](__dict_Monoid_9["__superclass_Prelude.Semigroup_0"]()))(Data_Monoid.mempty(__dict_Monoid_9));
    };
};

/**
 *  | Find the product of the numeric values in a data structure.
 */
var product = function (__dict_Foldable_10) {
    return function (__dict_Semiring_11) {
        return foldl(__dict_Foldable_10)(Prelude["*"](__dict_Semiring_11))(Prelude.one(__dict_Semiring_11));
    };
};

/**
 *  | Find the sum of the numeric values in a data structure.
 */
var sum = function (__dict_Foldable_12) {
    return function (__dict_Semiring_13) {
        return foldl(__dict_Foldable_12)(Prelude["+"](__dict_Semiring_13))(Prelude.zero(__dict_Semiring_13));
    };
};
var foldableMultiplicative = new Foldable(function (__dict_Monoid_14) {
    return function (f) {
        return function (_154) {
            return f(_154);
        };
    };
}, function (f) {
    return function (z) {
        return function (_153) {
            return f(z)(_153);
        };
    };
}, function (f) {
    return function (z) {
        return function (_152) {
            return f(_152)(z);
        };
    };
});
var foldableMaybe = new Foldable(function (__dict_Monoid_15) {
    return function (f) {
        return function (_133) {
            if (_133 instanceof Data_Maybe.Nothing) {
                return Data_Monoid.mempty(__dict_Monoid_15);
            };
            if (_133 instanceof Data_Maybe.Just) {
                return f(_133.value0);
            };
            throw new Error("Failed pattern match at bower_components/purescript-foldable-traversable/src/Data/Foldable.purs line 51, column 1 - line 59, column 1: " + [ f.constructor.name, _133.constructor.name ]);
        };
    };
}, function (f) {
    return function (z) {
        return function (_132) {
            if (_132 instanceof Data_Maybe.Nothing) {
                return z;
            };
            if (_132 instanceof Data_Maybe.Just) {
                return f(z)(_132.value0);
            };
            throw new Error("Failed pattern match at bower_components/purescript-foldable-traversable/src/Data/Foldable.purs line 51, column 1 - line 59, column 1: " + [ f.constructor.name, z.constructor.name, _132.constructor.name ]);
        };
    };
}, function (f) {
    return function (z) {
        return function (_131) {
            if (_131 instanceof Data_Maybe.Nothing) {
                return z;
            };
            if (_131 instanceof Data_Maybe.Just) {
                return f(_131.value0)(z);
            };
            throw new Error("Failed pattern match at bower_components/purescript-foldable-traversable/src/Data/Foldable.purs line 51, column 1 - line 59, column 1: " + [ f.constructor.name, z.constructor.name, _131.constructor.name ]);
        };
    };
});
var foldableDual = new Foldable(function (__dict_Monoid_16) {
    return function (f) {
        return function (_145) {
            return f(_145);
        };
    };
}, function (f) {
    return function (z) {
        return function (_144) {
            return f(z)(_144);
        };
    };
}, function (f) {
    return function (z) {
        return function (_143) {
            return f(_143)(z);
        };
    };
});
var foldableDisj = new Foldable(function (__dict_Monoid_17) {
    return function (f) {
        return function (_148) {
            return f(_148);
        };
    };
}, function (f) {
    return function (z) {
        return function (_147) {
            return f(z)(_147);
        };
    };
}, function (f) {
    return function (z) {
        return function (_146) {
            return f(_146)(z);
        };
    };
});
var foldableConj = new Foldable(function (__dict_Monoid_18) {
    return function (f) {
        return function (_151) {
            return f(_151);
        };
    };
}, function (f) {
    return function (z) {
        return function (_150) {
            return f(z)(_150);
        };
    };
}, function (f) {
    return function (z) {
        return function (_149) {
            return f(_149)(z);
        };
    };
});
var foldableArray = new Foldable(function (__dict_Monoid_19) {
    return function (f) {
        return function (xs) {
            return foldr(foldableArray)(function (x) {
                return function (acc) {
                    return Prelude["<>"](__dict_Monoid_19["__superclass_Prelude.Semigroup_0"]())(f(x))(acc);
                };
            })(Data_Monoid.mempty(__dict_Monoid_19))(xs);
        };
    };
}, $foreign.foldlArray, $foreign.foldrArray);
var foldableAdditive = new Foldable(function (__dict_Monoid_20) {
    return function (f) {
        return function (_142) {
            return f(_142);
        };
    };
}, function (f) {
    return function (z) {
        return function (_141) {
            return f(z)(_141);
        };
    };
}, function (f) {
    return function (z) {
        return function (_140) {
            return f(_140)(z);
        };
    };
});

/**
 *  | `Foldable` represents data structures which can be _folded_.
 *  |
 *  | - `foldr` folds a structure from the right
 *  | - `foldl` folds a structure from the left
 *  | - `foldMap` folds a structure by accumulating values in a `Monoid`
 */
var foldMap = function (dict) {
    return dict.foldMap;
};
var foldableFirst = new Foldable(function (__dict_Monoid_21) {
    return function (f) {
        return function (_136) {
            return foldMap(foldableMaybe)(__dict_Monoid_21)(f)(_136);
        };
    };
}, function (f) {
    return function (z) {
        return function (_135) {
            return foldl(foldableMaybe)(f)(z)(_135);
        };
    };
}, function (f) {
    return function (z) {
        return function (_134) {
            return foldr(foldableMaybe)(f)(z)(_134);
        };
    };
});
var foldableLast = new Foldable(function (__dict_Monoid_22) {
    return function (f) {
        return function (_139) {
            return foldMap(foldableMaybe)(__dict_Monoid_22)(f)(_139);
        };
    };
}, function (f) {
    return function (z) {
        return function (_138) {
            return foldl(foldableMaybe)(f)(z)(_138);
        };
    };
}, function (f) {
    return function (z) {
        return function (_137) {
            return foldr(foldableMaybe)(f)(z)(_137);
        };
    };
});

/**
 *  | Fold a data structure, accumulating values in some `Monoid`.
 */
var fold = function (__dict_Foldable_23) {
    return function (__dict_Monoid_24) {
        return foldMap(__dict_Foldable_23)(__dict_Monoid_24)(Prelude.id(Prelude.categoryFn));
    };
};

/**
 *  | Try to find an element in a data structure which satisfies a predicate.
 */
var find = function (__dict_Foldable_25) {
    return function (p) {
        return foldl(__dict_Foldable_25)(function (r) {
            return function (x) {
                var _690 = p(x);
                if (_690) {
                    return new Data_Maybe.Just(x);
                };
                if (!_690) {
                    return r;
                };
                throw new Error("Failed pattern match at bower_components/purescript-foldable-traversable/src/Data/Foldable.purs line 181, column 1 - line 182, column 1: " + [ _690.constructor.name ]);
            };
        })(Data_Maybe.Nothing.value);
    };
};

/**
 *  | Test whether a predicate holds for any element in a data structure.
 */
var any = function (__dict_Foldable_26) {
    return function (__dict_BooleanAlgebra_27) {
        return function (p) {
            return Prelude["<<<"](Prelude.semigroupoidFn)(Data_Monoid_Disj.runDisj)(foldMap(__dict_Foldable_26)(Data_Monoid_Disj.monoidDisj(__dict_BooleanAlgebra_27))(Prelude["<<<"](Prelude.semigroupoidFn)(Data_Monoid_Disj.Disj)(p)));
        };
    };
};

/**
 *  | Test whether a value is an element of a data structure.
 */
var elem = function (__dict_Foldable_28) {
    return function (__dict_Eq_29) {
        return Prelude["<<<"](Prelude.semigroupoidFn)(any(__dict_Foldable_28)(Prelude.booleanAlgebraBoolean))(Prelude["=="](__dict_Eq_29));
    };
};

/**
 *  | Test whether a value is not an element of a data structure.
 */
var notElem = function (__dict_Foldable_30) {
    return function (__dict_Eq_31) {
        return function (x) {
            return Prelude["<<<"](Prelude.semigroupoidFn)(Prelude.not(Prelude.booleanAlgebraBoolean))(elem(__dict_Foldable_30)(__dict_Eq_31)(x));
        };
    };
};

/**
 *  | Test whether any `Boolean` value in a data structure is `true`.
 */
var or = function (__dict_Foldable_32) {
    return function (__dict_BooleanAlgebra_33) {
        return any(__dict_Foldable_32)(__dict_BooleanAlgebra_33)(Prelude.id(Prelude.categoryFn));
    };
};

/**
 *  | Test whether a predicate holds for all elements in a data structure.
 */
var all = function (__dict_Foldable_34) {
    return function (__dict_BooleanAlgebra_35) {
        return function (p) {
            return Prelude["<<<"](Prelude.semigroupoidFn)(Data_Monoid_Conj.runConj)(foldMap(__dict_Foldable_34)(Data_Monoid_Conj.monoidConj(__dict_BooleanAlgebra_35))(Prelude["<<<"](Prelude.semigroupoidFn)(Data_Monoid_Conj.Conj)(p)));
        };
    };
};

/**
 *  | Test whether all `Boolean` values in a data structure are `true`.
 */
var and = function (__dict_Foldable_36) {
    return function (__dict_BooleanAlgebra_37) {
        return all(__dict_Foldable_36)(__dict_BooleanAlgebra_37)(Prelude.id(Prelude.categoryFn));
    };
};
module.exports = {
    Foldable: Foldable, 
    find: find, 
    notElem: notElem, 
    elem: elem, 
    product: product, 
    sum: sum, 
    all: all, 
    any: any, 
    or: or, 
    and: and, 
    intercalate: intercalate, 
    mconcat: mconcat, 
    sequence_: sequence_, 
    for_: for_, 
    traverse_: traverse_, 
    fold: fold, 
    foldMap: foldMap, 
    foldl: foldl, 
    foldr: foldr, 
    foldableArray: foldableArray, 
    foldableMaybe: foldableMaybe, 
    foldableFirst: foldableFirst, 
    foldableLast: foldableLast, 
    foldableAdditive: foldableAdditive, 
    foldableDual: foldableDual, 
    foldableDisj: foldableDisj, 
    foldableConj: foldableConj, 
    foldableMultiplicative: foldableMultiplicative
};
