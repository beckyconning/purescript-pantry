
/**
 *  | This module defines the reader-writer-state monad transformer, `RWST`.
 */
"use strict";
var Prelude = require("Prelude");
var Data_Tuple = require("Data.Tuple");
var Data_Monoid = require("Data.Monoid");
var Control_Monad_Trans = require("Control.Monad.Trans");
var Control_Monad_Eff_Class = require("Control.Monad.Eff.Class");

/**
 *  | The reader-writer-state monad transformer, which combines the operations
 *  | of `ReaderT`, `WriterT` and `StateT` into a single monad transformer.
 */
var RWST = function (x) {
    return x;
};

/**
 *  | Run a computation in the `RWST` monad.
 */
var runRWST = function (_327) {
    return _327;
};

/**
 *  | Change the context type in a `RWST` monad action.
 */
var withRWST = function (f) {
    return function (m) {
        return function (r) {
            return function (s) {
                return Data_Tuple.uncurry(runRWST(m))(f(r)(s));
            };
        };
    };
};
var mkSee = function (__dict_Monoid_5) {
    return function (s) {
        return function (a) {
            return function (w) {
                return {
                    state: s, 
                    result: a, 
                    log: w
                };
            };
        };
    };
};
var monadTransRWST = function (__dict_Monoid_6) {
    return new Control_Monad_Trans.MonadTrans(function (__dict_Monad_7) {
        return function (m) {
            return function (_326) {
                return function (s) {
                    return Prelude[">>="](__dict_Monad_7["__superclass_Prelude.Bind_1"]())(m)(function (a) {
                        return Prelude["return"](__dict_Monad_7["__superclass_Prelude.Applicative_0"]())(mkSee(__dict_Monoid_6)(s)(a)(Data_Monoid.mempty(__dict_Monoid_6)));
                    });
                };
            };
        };
    });
};

/**
 *  | Change the result and accumulator types in a `RWST` monad action.
 */
var mapRWST = function (f) {
    return function (m) {
        return function (r) {
            return function (s) {
                return f(runRWST(m)(r)(s));
            };
        };
    };
};
var functorRWST = function (__dict_Functor_8) {
    return new Prelude.Functor(function (f) {
        return function (m) {
            return function (r) {
                return function (s) {
                    return Prelude["<$>"](__dict_Functor_8)(function (see) {
                        var _652 = {};
                        for (var _653 in see) {
                            if (see.hasOwnProperty(_653)) {
                                _652[_653] = see[_653];
                            };
                        };
                        _652.result = f(see.result);
                        return _652;
                    })(runRWST(m)(r)(s));
                };
            };
        };
    });
};

/**
 *  | Run a computation in the `RWST` monad, discarding the result.
 */
var execRWST = function (__dict_Monad_9) {
    return function (m) {
        return function (r) {
            return function (s) {
                return Prelude[">>="](__dict_Monad_9["__superclass_Prelude.Bind_1"]())(runRWST(m)(r)(s))(function (see) {
                    return Prelude["return"](__dict_Monad_9["__superclass_Prelude.Applicative_0"]())(new Data_Tuple.Tuple(see.state, see.log));
                });
            };
        };
    };
};

/**
 *  | Run a computation in the `RWST` monad, discarding the final state.
 */
var evalRWST = function (__dict_Monad_10) {
    return function (m) {
        return function (r) {
            return function (s) {
                return Prelude[">>="](__dict_Monad_10["__superclass_Prelude.Bind_1"]())(runRWST(m)(r)(s))(function (see) {
                    return Prelude["return"](__dict_Monad_10["__superclass_Prelude.Applicative_0"]())(new Data_Tuple.Tuple(see.result, see.log));
                });
            };
        };
    };
};
var applyRWST = function (__dict_Bind_13) {
    return function (__dict_Monoid_14) {
        return new Prelude.Apply(function () {
            return functorRWST((__dict_Bind_13["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]());
        }, function (f) {
            return function (m) {
                return function (r) {
                    return function (s) {
                        return Prelude[">>="](__dict_Bind_13)(runRWST(f)(r)(s))(function (_323) {
                            return Prelude["<#>"]((__dict_Bind_13["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(runRWST(m)(r)(_323.state))(function (_322) {
                                return mkSee(__dict_Monoid_14)(_322.state)(_323.result(_322.result))(Prelude["++"](__dict_Monoid_14["__superclass_Prelude.Semigroup_0"]())(_323.log)(_322.log));
                            });
                        });
                    };
                };
            };
        });
    };
};
var bindRWST = function (__dict_Bind_11) {
    return function (__dict_Monoid_12) {
        return new Prelude.Bind(function () {
            return applyRWST(__dict_Bind_11)(__dict_Monoid_12);
        }, function (m) {
            return function (f) {
                return function (r) {
                    return function (s) {
                        return Prelude[">>="](__dict_Bind_11)(runRWST(m)(r)(s))(function (_324) {
                            return Prelude["<#>"]((__dict_Bind_11["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(runRWST(f(_324.result))(r)(_324.state))(function (see$prime) {
                                var _663 = {};
                                for (var _664 in see$prime) {
                                    if (see$prime.hasOwnProperty(_664)) {
                                        _663[_664] = see$prime[_664];
                                    };
                                };
                                _663.log = Prelude["++"](__dict_Monoid_12["__superclass_Prelude.Semigroup_0"]())(_324.log)(see$prime.log);
                                return _663;
                            });
                        });
                    };
                };
            };
        });
    };
};
var applicativeRWST = function (__dict_Monad_15) {
    return function (__dict_Monoid_16) {
        return new Prelude.Applicative(function () {
            return applyRWST(__dict_Monad_15["__superclass_Prelude.Bind_1"]())(__dict_Monoid_16);
        }, function (a) {
            return function (_325) {
                return function (s) {
                    return Prelude.pure(__dict_Monad_15["__superclass_Prelude.Applicative_0"]())(mkSee(__dict_Monoid_16)(s)(a)(Data_Monoid.mempty(__dict_Monoid_16)));
                };
            };
        });
    };
};
var monadRWST = function (__dict_Monad_0) {
    return function (__dict_Monoid_1) {
        return new Prelude.Monad(function () {
            return applicativeRWST(__dict_Monad_0)(__dict_Monoid_1);
        }, function () {
            return bindRWST(__dict_Monad_0["__superclass_Prelude.Bind_1"]())(__dict_Monoid_1);
        });
    };
};
var monadEffRWS = function (__dict_Monad_2) {
    return function (__dict_Monoid_3) {
        return function (__dict_MonadEff_4) {
            return new Control_Monad_Eff_Class.MonadEff(function () {
                return monadRWST(__dict_Monad_2)(__dict_Monoid_3);
            }, Prelude["<<<"](Prelude.semigroupoidFn)(Control_Monad_Trans.lift(monadTransRWST(__dict_Monoid_3))(__dict_Monad_2))(Control_Monad_Eff_Class.liftEff(__dict_MonadEff_4)));
        };
    };
};
module.exports = {
    RWST: RWST, 
    withRWST: withRWST, 
    mapRWST: mapRWST, 
    execRWST: execRWST, 
    evalRWST: evalRWST, 
    runRWST: runRWST, 
    mkSee: mkSee, 
    functorRWST: functorRWST, 
    applyRWST: applyRWST, 
    bindRWST: bindRWST, 
    applicativeRWST: applicativeRWST, 
    monadRWST: monadRWST, 
    monadTransRWST: monadTransRWST, 
    monadEffRWS: monadEffRWS
};
