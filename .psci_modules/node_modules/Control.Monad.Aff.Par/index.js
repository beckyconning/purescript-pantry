
/**
 *  | A newtype over `Aff` that provides `Applicative` instances that run in 
 *  | parallel. This is useful, for example, if you want to run a whole bunch 
 *  | of AJAX requests at the same time, rather than sequentially.
 */
"use strict";
var Prelude = require("Prelude");
var Data_Monoid = require("Data.Monoid");
var Control_Monad_Aff_AVar = require("Control.Monad.Aff.AVar");
var Control_Monad_Aff = require("Control.Monad.Aff");
var Data_Either = require("Data.Either");
var Control_Plus = require("Control.Plus");
var Control_Apply = require("Control.Apply");
var Control_Alt = require("Control.Alt");
var Control_Alternative = require("Control.Alternative");
var Control_Monad_Error_Class = require("Control.Monad.Error.Class");
var Par = function (x) {
    return x;
};

/**
 *  | Extracts the `Aff` from the `Par`.
 */
var runPar = function (_135) {
    return _135;
};
var functorPar = new Prelude.Functor(function (f) {
    return function (_136) {
        return Prelude["<$>"](Control_Monad_Aff.functorAff)(f)(_136);
    };
});
var applyPar = new Prelude.Apply(function () {
    return functorPar;
}, function (_137) {
    return function (_138) {
        return Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.makeVar)(function (_48) {
            return Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.makeVar)(function (_47) {
                return Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff.forkAff(Prelude[">>="](Control_Monad_Aff.bindAff)(_137)(Control_Monad_Aff_AVar.putVar(_48))))(function (_46) {
                    return Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff.forkAff(Prelude[">>="](Control_Monad_Aff.bindAff)(_138)(Control_Monad_Aff_AVar.putVar(_47))))(function (_45) {
                        return Control_Monad_Aff.cancelWith(Prelude["<*>"](Control_Monad_Aff.applyAff)(Control_Monad_Aff_AVar.takeVar(_48))(Control_Monad_Aff_AVar.takeVar(_47)))(Prelude["<>"](Control_Monad_Aff.semigroupCanceler)(_46)(_45));
                    });
                });
            });
        });
    };
});
var semigroupPar = function (__dict_Semigroup_0) {
    return new Prelude.Semigroup(function (a) {
        return function (b) {
            return Prelude["<*>"](applyPar)(Prelude["<$>"](functorPar)(Prelude.append(__dict_Semigroup_0))(a))(b);
        };
    });
};
var applicativePar = new Prelude.Applicative(function () {
    return applyPar;
}, function (v) {
    return Prelude.pure(Control_Monad_Aff.applicativeAff)(v);
});
var monoidPar = function (__dict_Monoid_1) {
    return new Data_Monoid.Monoid(function () {
        return semigroupPar(__dict_Monoid_1["__superclass_Prelude.Semigroup_0"]());
    }, Prelude.pure(applicativePar)(Data_Monoid.mempty(__dict_Monoid_1)));
};

/**
 *  | Returns the first value, or the first error if both error.
 */
var altPar = new Control_Alt.Alt(function () {
    return functorPar;
}, function (_139) {
    return function (_140) {
        var maybeKill = function (va) {
            return function (ve) {
                return function (err) {
                    return Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.takeVar(ve))(function (_49) {
                        return Prelude.bind(Control_Monad_Aff.bindAff)((function () {
                            var _234 = Prelude["=="](Prelude.eqInt)(_49)(1);
                            if (_234) {
                                return Control_Monad_Aff_AVar.killVar(va)(err);
                            };
                            if (!_234) {
                                return Prelude["return"](Control_Monad_Aff.applicativeAff)(Prelude.unit);
                            };
                            throw new Error("Failed pattern match at bower_components/purescript-aff/src/Control/Monad/Aff/Par.purs line 51, column 11 - line 55, column 7: " + [ _234.constructor.name ]);
                        })())(function () {
                            return Control_Monad_Aff_AVar.putVar(ve)(Prelude["+"](Prelude.semiringInt)(_49)(1));
                        });
                    });
                };
            };
        };
        return Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.makeVar)(function (_53) {
            return Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar["makeVar'"](0))(function (_52) {
                return Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff.forkAff(Prelude[">>="](Control_Monad_Aff.bindAff)(Control_Monad_Aff.attempt(_139))(Data_Either.either(maybeKill(_53)(_52))(Control_Monad_Aff_AVar.putVar(_53)))))(function (_51) {
                    return Prelude.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff.forkAff(Prelude[">>="](Control_Monad_Aff.bindAff)(Control_Monad_Aff.attempt(_140))(Data_Either.either(maybeKill(_53)(_52))(Control_Monad_Aff_AVar.putVar(_53)))))(function (_50) {
                        return Control_Monad_Aff.cancelWith(Control_Monad_Aff_AVar.takeVar(_53))(Prelude["<>"](Control_Monad_Aff.semigroupCanceler)(_51)(_50));
                    });
                });
            });
        });
    };
});
var plusPar = new Control_Plus.Plus(function () {
    return altPar;
}, Control_Plus.empty(Control_Monad_Aff.plusAff));
var alternativePar = new Control_Alternative.Alternative(function () {
    return plusPar;
}, function () {
    return applicativePar;
});
module.exports = {
    Par: Par, 
    runPar: runPar, 
    semigroupPar: semigroupPar, 
    monoidPar: monoidPar, 
    functorPar: functorPar, 
    applyPar: applyPar, 
    applicativePar: applicativePar, 
    altPar: altPar, 
    plusPar: plusPar, 
    alternativePar: alternativePar
};
