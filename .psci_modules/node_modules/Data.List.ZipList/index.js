
/**
 *  | This module defines the type of _zip lists_, i.e. linked lists
 *  | with a zippy `Applicative` instance.
 */
"use strict";
var Prelude = require("Prelude");
var Data_Monoid = require("Data.Monoid");
var Data_Foldable = require("Data.Foldable");
var Data_Traversable = require("Data.Traversable");
var Data_List_Lazy = require("Data.List.Lazy");
var Control_Alt = require("Control.Alt");
var Control_Plus = require("Control.Plus");
var Control_Alternative = require("Control.Alternative");

/**
 *  | `ZipList` is a newtype around `List` which provides a zippy
 *  | `Applicative` instance.
 */
var ZipList = function (x) {
    return x;
};
var showZipList = function (__dict_Show_2) {
    return new Prelude.Show(function (_563) {
        return "(ZipList " + (Prelude.show(Data_List_Lazy.showList(__dict_Show_2))(_563) + ")");
    });
};

/**
 *  | Unpack a `ZipList` to obtain the underlying list.
 */
var runZipList = function (_562) {
    return _562;
};
var semigroupZipList = new Prelude.Semigroup(function (z1) {
    return function (z2) {
        return Prelude["++"](Data_List_Lazy.semigroupList)(runZipList(z1))(runZipList(z2));
    };
});
var monoidZipList = new Data_Monoid.Monoid(function () {
    return semigroupZipList;
}, Data_Monoid.mempty(Data_List_Lazy.monoidList));
var functorZipList = new Prelude.Functor(function (f) {
    return function (_569) {
        return Prelude.map(Data_List_Lazy.functorList)(f)(_569);
    };
});
var foldableZipList = new Data_Foldable.Foldable(function (__dict_Monoid_4) {
    return function (f) {
        return function (_566) {
            return Data_Foldable.foldMap(Data_List_Lazy.foldableList)(__dict_Monoid_4)(f)(_566);
        };
    };
}, function (f) {
    return function (b) {
        return function (_564) {
            return Data_Foldable.foldl(Data_List_Lazy.foldableList)(f)(b)(_564);
        };
    };
}, function (f) {
    return function (b) {
        return function (_565) {
            return Data_Foldable.foldr(Data_List_Lazy.foldableList)(f)(b)(_565);
        };
    };
});
var traversableZipList = new Data_Traversable.Traversable(function () {
    return foldableZipList;
}, function () {
    return functorZipList;
}, function (__dict_Applicative_1) {
    return function (_568) {
        return Prelude["<$>"]((__dict_Applicative_1["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(ZipList)(Data_Traversable.sequence(Data_List_Lazy.traversableList)(__dict_Applicative_1)(_568));
    };
}, function (__dict_Applicative_0) {
    return function (f) {
        return function (_567) {
            return Prelude["<$>"]((__dict_Applicative_0["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(ZipList)(Data_Traversable.traverse(Data_List_Lazy.traversableList)(__dict_Applicative_0)(f)(_567));
        };
    };
});
var eqZipList = function (__dict_Eq_5) {
    return new Prelude.Eq(function (z1) {
        return function (z2) {
            return Prelude.eq(Data_List_Lazy.eqList(__dict_Eq_5))(runZipList(z1))(runZipList(z2));
        };
    });
};
var ordZipList = function (__dict_Ord_3) {
    return new Prelude.Ord(function () {
        return eqZipList(__dict_Ord_3["__superclass_Prelude.Eq_0"]());
    }, function (z1) {
        return function (z2) {
            return Prelude.compare(Data_List_Lazy.ordList(__dict_Ord_3))(runZipList(z1))(runZipList(z2));
        };
    });
};
var applyZipList = new Prelude.Apply(function () {
    return functorZipList;
}, function (_570) {
    return function (_571) {
        return Data_List_Lazy.zipWith(Prelude["$"])(_570)(_571);
    };
});
var applicativeZipList = new Prelude.Applicative(function () {
    return applyZipList;
}, Prelude["<<<"](Prelude.semigroupoidFn)(ZipList)(Data_List_Lazy.repeat));
var altZipList = new Control_Alt.Alt(function () {
    return functorZipList;
}, Prelude.append(semigroupZipList));
var plusZipList = new Control_Plus.Plus(function () {
    return altZipList;
}, Data_Monoid.mempty(monoidZipList));
var alternativeZipList = new Control_Alternative.Alternative(function () {
    return plusZipList;
}, function () {
    return applicativeZipList;
});
module.exports = {
    ZipList: ZipList, 
    runZipList: runZipList, 
    showZipList: showZipList, 
    eqZipList: eqZipList, 
    ordZipList: ordZipList, 
    semigroupZipList: semigroupZipList, 
    monoidZipList: monoidZipList, 
    foldableZipList: foldableZipList, 
    traversableZipList: traversableZipList, 
    functorZipList: functorZipList, 
    applyZipList: applyZipList, 
    applicativeZipList: applicativeZipList, 
    altZipList: altZipList, 
    plusZipList: plusZipList, 
    alternativeZipList: alternativeZipList
};
