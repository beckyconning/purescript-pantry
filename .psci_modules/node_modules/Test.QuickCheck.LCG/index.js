"use strict";
var Prelude = require("Prelude");
var Data_Maybe_Unsafe = require("Data.Maybe.Unsafe");
var Data_Int = require("Data.Int");
var $$Math = require("Math");
var Control_Monad_Eff_Random = require("Control.Monad.Eff.Random");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Data_Int_Bits = require("Data.Int.Bits");

/**
 *  | A seed for the linear congruential generator. We omit a `Semiring`
 *  | instance because there is no `zero` value, as 0 is not an acceptable
 *  | seed for the generator.
 */
var Seed = function (x) {
    return x;
};
var showSeed = new Prelude.Show(function (_158) {
    return "Seed " + Prelude.show(Prelude.showInt)(_158);
});

/**
 *  | The minimum permissible Seed value.
 */
var seedMin = 1;
var runSeed = function (_157) {
    return _157;
};

/**
 *  | The *modulus*: a magic constant for the linear congruential generator.
 *  | It is equal to 2^31 - 1, a Mersenne prime. It is useful for this value to
 *  | be prime, because then the requirement of the initial seed being coprime
 *  | to the modulus is satisfied when the seed is between 1 and lcgN - 1.
 */
var lcgN = 2147483647;

/**
 *  | The *multiplier*: a magic constant for the linear congruential generator
 */
var lcgM = 48271;

/**
 *  | The maximum permissible Seed value.
 */
var seedMax = Prelude["-"](Prelude.ringInt)(lcgM)(1);

/**
 *  | The *increment*: a magic constant for the linear congruential generator
 */
var lcgC = 0;

/**
 *  | Step the linear congruential generator
 */
var lcgNext = (function () {
    var go = function (n) {
        return Data_Maybe_Unsafe.fromJust(Data_Int.fromNumber($$Math["%"](Data_Int.toNumber(lcgM) * Data_Int.toNumber(n) + Data_Int.toNumber(lcgC))(Data_Int.toNumber(lcgN))));
    };
    return Prelude["<<<"](Prelude.semigroupoidFn)(Seed)(Prelude["<<<"](Prelude.semigroupoidFn)(go)(runSeed));
})();
var eqSeed = new Prelude.Eq(function (_159) {
    return function (_160) {
        return Prelude.eq(Prelude.eqInt)(_159)(_160);
    };
});
var ensureBetween = function (min) {
    return function (max) {
        return function (n) {
            var rangeSize = Prelude["-"](Prelude.ringInt)(max)(min);
            return Prelude["+"](Prelude.semiringInt)(Prelude.mod(Prelude.moduloSemiringInt)(Prelude["+"](Prelude.semiringInt)(Prelude.mod(Prelude.moduloSemiringInt)(n)(rangeSize))(rangeSize))(rangeSize))(min);
        };
    };
};
var mkSeed = function (x) {
    return ensureBetween(seedMin)(seedMax)(x);
};

/**
 *  | Create a random seed
 */
var randomSeed = Prelude["<$>"](Control_Monad_Eff.functorEff)(mkSeed)(Control_Monad_Eff_Random.randomInt(seedMin)(seedMax));
module.exports = {
    randomSeed: randomSeed, 
    lcgNext: lcgNext, 
    lcgN: lcgN, 
    lcgC: lcgC, 
    lcgM: lcgM, 
    runSeed: runSeed, 
    mkSeed: mkSeed, 
    showSeed: showSeed, 
    eqSeed: eqSeed
};
