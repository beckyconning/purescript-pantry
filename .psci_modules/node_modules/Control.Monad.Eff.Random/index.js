"use strict";
var $foreign = require("./foreign");
var Prelude = require("Prelude");
var Data_Int = require("Data.Int");
var Control_Monad_Eff = require("Control.Monad.Eff");

/**
 *  | Returns a random number between a minimum value (inclusive) and a maximum
 *  | value (exclusive). It is unspecified what happens if `maximum < minimum`.
 *  |
 *  | For example:
 *  | ``` purescript
 *  | randomRange 1.0 2.0 >>= Console.print
 *  | ```
 *  | will print a random number between 1 and 2.
 */
var randomRange = function (min) {
    return function (max) {
        return function __do() {
            var _22 = $foreign.random();
            return Prelude["return"](Control_Monad_Eff.applicativeEff)(_22 * (max - min) + min)();
        };
    };
};

/**
 *  | Takes a range specified by `low` (the first argument) and `high` (the
 *  | second), and returns a random integer uniformly distributed in the closed
 *  | interval `[low, high]`. It is unspecified what happens if `low > high`,
 *  | or if either of `low` or `high` is not an integer.
 *  |
 *  | For example:
 *  | ``` purescript
 *  | randomInt 1 10 >>= Console.print
 *  | ```
 *  | will print a random integer between 1 and 10.
 */
var randomInt = function (low) {
    return function (high) {
        return function __do() {
            var _21 = $foreign.random();
            return (function () {
                var asNumber = ((Data_Int.toNumber(high) - Data_Int.toNumber(low)) + 1) * _21 + Data_Int.toNumber(low);
                return Prelude["return"](Control_Monad_Eff.applicativeEff)(Data_Int.floor(asNumber));
            })()();
        };
    };
};

/**
 *  | Returns a random boolean value with an equal chance of being `true` or
 *  | `false`.
 */
var randomBool = Prelude["<$>"](Control_Monad_Eff.functorEff)(function (_8) {
    return _8 < 0.5;
})($foreign.random);
module.exports = {
    randomBool: randomBool, 
    randomRange: randomRange, 
    randomInt: randomInt, 
    random: $foreign.random
};
