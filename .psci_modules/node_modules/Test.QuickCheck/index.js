
/**
 *  | This module is a partial port of the Haskell QuickCheck library.
 *  |
 *  | QuickCheck provides a way to write _property-based_ tests.
 *  |
 *  | The `Arbitrary` and `CoArbitrary` type classes allow us to create
 *  | random data with which we can run our tests. This module provides
 *  | instances of both classes for PureScript's core data structures,
 *  | as well as functions for writing new instances.
 *  |
 *  | Test suites can use the `quickCheck` and `quickCheckPure` functions
 *  | to test properties.
 *  |
 *  | For example:
 *  |
 *  | ```purescript
 *  | main = quickCheck \n -> n + 1 > n
 *  | ```
 */
"use strict";
var Prelude = require("Prelude");
var Control_Monad_Eff_Exception = require("Control.Monad.Eff.Exception");
var Test_QuickCheck_LCG = require("Test.QuickCheck.LCG");
var Control_Monad_Eff_Console = require("Control.Monad.Eff.Console");
var Test_QuickCheck_Gen = require("Test.QuickCheck.Gen");
var Data_List = require("Data.List");
var Test_QuickCheck_Arbitrary = require("Test.QuickCheck.Arbitrary");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Control_Monad_Eff_Random = require("Control.Monad.Eff.Random");
var Data_Int = require("Data.Int");

/**
 *  | The result of a test: success or failure (with an error message).
 */
var Success = (function () {
    function Success() {

    };
    Success.value = new Success();
    return Success;
})();

/**
 *  | The result of a test: success or failure (with an error message).
 */
var Failed = (function () {
    function Failed(value0) {
        this.value0 = value0;
    };
    Failed.create = function (value0) {
        return new Failed(value0);
    };
    return Failed;
})();

/**
 *  | The `Testable` class represents _testable properties_.
 *  |
 *  | A testable property is a function of zero or more `Arbitrary` arguments,
 *  | returning a `Boolean` or `Result`.
 *  |
 *  | Testable properties can be passed to the `quickCheck` function.
 */
var Testable = function (test) {
    this.test = test;
};

/**
 *  | This operator attaches an error message to a failed test.
 *  |
 *  | For example:
 *  |
 *  | ```purescript
 *  | test x = myProperty x <?> ("myProperty did not hold for " <> show x)
 *  | ```
 */
var $less$qmark$greater = function (_589) {
    return function (msg) {
        if (_589) {
            return Success.value;
        };
        if (!_589) {
            return new Failed(msg);
        };
        throw new Error("Failed pattern match at bower_components/purescript-quickcheck/src/Test/QuickCheck.purs line 104, column 1 - line 105, column 1: " + [ _589.constructor.name, msg.constructor.name ]);
    };
};

/**
 *  | Self-documenting equality assertion
 */
var $eq$eq$eq = function (__dict_Eq_0) {
    return function (__dict_Show_1) {
        return function (a) {
            return function (b) {
                return $less$qmark$greater(Prelude["=="](__dict_Eq_0)(a)(b))(Prelude.show(__dict_Show_1)(a) + (" /= " + Prelude.show(__dict_Show_1)(b)));
            };
        };
    };
};

/**
 *  | Self-documenting inequality assertion
 */
var $div$eq$eq = function (__dict_Eq_2) {
    return function (__dict_Show_3) {
        return function (a) {
            return function (b) {
                return $less$qmark$greater(Prelude["/="](__dict_Eq_2)(a)(b))(Prelude.show(__dict_Show_3)(a) + (" == " + Prelude.show(__dict_Show_3)(b)));
            };
        };
    };
};
var testableResult = new Testable(Prelude["return"](Test_QuickCheck_Gen.applicativeGen));
var testableBoolean = new Testable(function (_592) {
    if (_592) {
        return Prelude["return"](Test_QuickCheck_Gen.applicativeGen)(Success.value);
    };
    if (!_592) {
        return Prelude["return"](Test_QuickCheck_Gen.applicativeGen)(new Failed("Test returned false"));
    };
    throw new Error("Failed pattern match at bower_components/purescript-quickcheck/src/Test/QuickCheck.purs line 83, column 1 - line 87, column 1: " + [ _592.constructor.name ]);
});

/**
 *  | The `Testable` class represents _testable properties_.
 *  |
 *  | A testable property is a function of zero or more `Arbitrary` arguments,
 *  | returning a `Boolean` or `Result`.
 *  |
 *  | Testable properties can be passed to the `quickCheck` function.
 */
var test = function (dict) {
    return dict.test;
};
var testableFunction = function (__dict_Arbitrary_4) {
    return function (__dict_Testable_5) {
        return new Testable(function (f) {
            return Prelude[">>="](Test_QuickCheck_Gen.bindGen)(Test_QuickCheck_Arbitrary.arbitrary(__dict_Arbitrary_4))(Prelude["<<<"](Prelude.semigroupoidFn)(test(__dict_Testable_5))(f));
        });
    };
};
var showResult = new Prelude.Show(function (_593) {
    if (_593 instanceof Success) {
        return "Success";
    };
    if (_593 instanceof Failed) {
        return "Failed: " + _593.value0;
    };
    throw new Error("Failed pattern match at bower_components/purescript-quickcheck/src/Test/QuickCheck.purs line 93, column 1 - line 104, column 1: " + [ _593.constructor.name ]);
});

/**
 *  | Test a property, returning all test results as an array.
 *  |
 *  | The first argument is the _random seed_ to be passed to the random generator.
 *  | The second argument is the number of tests to run.
 */
var quickCheckPure = function (__dict_Testable_6) {
    return function (s) {
        return function (n) {
            return function (prop) {
                return Test_QuickCheck_Gen.evalGen(Data_List.replicateM(Test_QuickCheck_Gen.monadGen)(n)(test(__dict_Testable_6)(prop)))({
                    newSeed: s, 
                    size: 10
                });
            };
        };
    };
};

/**
 *  | A variant of the `quickCheck` function which accepts an extra parameter
 *  | representing the number of tests which should be run.
 */
var quickCheck$prime = function (__dict_Testable_7) {
    return function (n) {
        return function (prop) {
            var throwOnFirstFailure = function (__copy_n_1) {
                return function (__copy__590) {
                    var n_1 = __copy_n_1;
                    var _590 = __copy__590;
                    tco: while (true) {
                        if (_590 instanceof Data_List.Nil) {
                            return Prelude["return"](Control_Monad_Eff.applicativeEff)(Prelude.unit);
                        };
                        var n_2 = n_1;
                        if (_590 instanceof Data_List.Cons && _590.value0 instanceof Failed) {
                            return Control_Monad_Eff_Exception.throwException(Control_Monad_Eff_Exception.error("Test " + (Prelude.show(Prelude.showInt)(n_2) + (" failed: \n" + _590.value0.value0))));
                        };
                        if (_590 instanceof Data_List.Cons) {
                            var __tco_n_1 = Prelude["+"](Prelude.semiringInt)(n_1)(Prelude.one(Prelude.semiringInt));
                            var __tco__590 = _590.value1;
                            n_1 = __tco_n_1;
                            _590 = __tco__590;
                            continue tco;
                        };
                        throw new Error("Failed pattern match at bower_components/purescript-quickcheck/src/Test/QuickCheck.purs line 44, column 1 - line 45, column 1: " + [ n_1.constructor.name, _590.constructor.name ]);
                    };
                };
            };
            var countSuccesses = function (_591) {
                if (_591 instanceof Data_List.Nil) {
                    return Prelude.zero(Prelude.semiringInt);
                };
                if (_591 instanceof Data_List.Cons && _591.value0 instanceof Success) {
                    return Prelude["+"](Prelude.semiringInt)(Prelude.one(Prelude.semiringInt))(countSuccesses(_591.value1));
                };
                if (_591 instanceof Data_List.Cons) {
                    return countSuccesses(_591.value1);
                };
                throw new Error("Failed pattern match at bower_components/purescript-quickcheck/src/Test/QuickCheck.purs line 44, column 1 - line 45, column 1: " + [ _591.constructor.name ]);
            };
            return function __do() {
                var _87 = Test_QuickCheck_LCG.randomSeed();
                return (function () {
                    var results = quickCheckPure(__dict_Testable_7)(_87)(n)(prop);
                    var successes = countSuccesses(results);
                    return function __do() {
                        Control_Monad_Eff_Console.log(Prelude.show(Prelude.showInt)(successes) + ("/" + (Prelude.show(Prelude.showInt)(n) + " test(s) passed.")))();
                        return throwOnFirstFailure(Prelude.one(Prelude.semiringInt))(results)();
                    };
                })()();
            };
        };
    };
};

/**
 *  | Test a property.
 *  |
 *  | This function generates a new random seed, runs 100 tests and
 *  | prints the test results to the console.
 */
var quickCheck = function (__dict_Testable_8) {
    return function (prop) {
        return quickCheck$prime(__dict_Testable_8)(100)(prop);
    };
};
module.exports = {
    Success: Success, 
    Failed: Failed, 
    Testable: Testable, 
    "/==": $div$eq$eq, 
    "===": $eq$eq$eq, 
    "<?>": $less$qmark$greater, 
    test: test, 
    quickCheckPure: quickCheckPure, 
    "quickCheck'": quickCheck$prime, 
    quickCheck: quickCheck, 
    testableResult: testableResult, 
    testableBoolean: testableBoolean, 
    testableFunction: testableFunction, 
    showResult: showResult
};
