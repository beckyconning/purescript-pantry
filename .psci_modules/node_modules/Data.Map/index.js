
/**
 *  | This module defines a type of maps as balanced 2-3 trees, based on
 *  | <http://www.cs.princeton.edu/~dpw/courses/cos326-12/ass/2-3-trees.pdf>
 */
"use strict";
var Prelude = require("Prelude");
var Data_Foldable = require("Data.Foldable");
var Data_Tuple = require("Data.Tuple");
var Data_Traversable = require("Data.Traversable");
var Data_List = require("Data.List");
var Data_Maybe = require("Data.Maybe");
var Data_Monoid = require("Data.Monoid");

/**
 *  | `Map k v` represents maps from keys of type `k` to values of type `v`.
 */
var Leaf = (function () {
    function Leaf() {

    };
    Leaf.value = new Leaf();
    return Leaf;
})();

/**
 *  | `Map k v` represents maps from keys of type `k` to values of type `v`.
 */
var Two = (function () {
    function Two(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    Two.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new Two(value0, value1, value2, value3);
                };
            };
        };
    };
    return Two;
})();

/**
 *  | `Map k v` represents maps from keys of type `k` to values of type `v`.
 */
var Three = (function () {
    function Three(value0, value1, value2, value3, value4, value5, value6) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
        this.value5 = value5;
        this.value6 = value6;
    };
    Three.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return function (value4) {
                        return function (value5) {
                            return function (value6) {
                                return new Three(value0, value1, value2, value3, value4, value5, value6);
                            };
                        };
                    };
                };
            };
        };
    };
    return Three;
})();
var TwoLeft = (function () {
    function TwoLeft(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    TwoLeft.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new TwoLeft(value0, value1, value2);
            };
        };
    };
    return TwoLeft;
})();
var TwoRight = (function () {
    function TwoRight(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    TwoRight.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new TwoRight(value0, value1, value2);
            };
        };
    };
    return TwoRight;
})();
var ThreeLeft = (function () {
    function ThreeLeft(value0, value1, value2, value3, value4, value5) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
        this.value5 = value5;
    };
    ThreeLeft.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return function (value4) {
                        return function (value5) {
                            return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                        };
                    };
                };
            };
        };
    };
    return ThreeLeft;
})();
var ThreeMiddle = (function () {
    function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
        this.value5 = value5;
    };
    ThreeMiddle.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return function (value4) {
                        return function (value5) {
                            return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                        };
                    };
                };
            };
        };
    };
    return ThreeMiddle;
})();
var ThreeRight = (function () {
    function ThreeRight(value0, value1, value2, value3, value4, value5) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
        this.value4 = value4;
        this.value5 = value5;
    };
    ThreeRight.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return function (value4) {
                        return function (value5) {
                            return new ThreeRight(value0, value1, value2, value3, value4, value5);
                        };
                    };
                };
            };
        };
    };
    return ThreeRight;
})();
var KickUp = (function () {
    function KickUp(value0, value1, value2, value3) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
        this.value3 = value3;
    };
    KickUp.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return function (value3) {
                    return new KickUp(value0, value1, value2, value3);
                };
            };
        };
    };
    return KickUp;
})();
var values = function (_468) {
    if (_468 instanceof Leaf) {
        return Data_List.Nil.value;
    };
    if (_468 instanceof Two) {
        return Prelude["++"](Data_List.semigroupList)(values(_468.value0))(Prelude["++"](Data_List.semigroupList)(Prelude.pure(Data_List.applicativeList)(_468.value2))(values(_468.value3)));
    };
    if (_468 instanceof Three) {
        return Prelude["++"](Data_List.semigroupList)(values(_468.value0))(Prelude["++"](Data_List.semigroupList)(Prelude.pure(Data_List.applicativeList)(_468.value2))(Prelude["++"](Data_List.semigroupList)(values(_468.value3))(Prelude["++"](Data_List.semigroupList)(Prelude.pure(Data_List.applicativeList)(_468.value5))(values(_468.value6)))));
    };
    throw new Error("Failed pattern match: " + [ _468.constructor.name ]);
};
var toList = function (_466) {
    if (_466 instanceof Leaf) {
        return Data_List.Nil.value;
    };
    if (_466 instanceof Two) {
        return Prelude["++"](Data_List.semigroupList)(toList(_466.value0))(Prelude["++"](Data_List.semigroupList)(Prelude.pure(Data_List.applicativeList)(new Data_Tuple.Tuple(_466.value1, _466.value2)))(toList(_466.value3)));
    };
    if (_466 instanceof Three) {
        return Prelude["++"](Data_List.semigroupList)(toList(_466.value0))(Prelude["++"](Data_List.semigroupList)(Prelude.pure(Data_List.applicativeList)(new Data_Tuple.Tuple(_466.value1, _466.value2)))(Prelude["++"](Data_List.semigroupList)(toList(_466.value3))(Prelude["++"](Data_List.semigroupList)(Prelude.pure(Data_List.applicativeList)(new Data_Tuple.Tuple(_466.value4, _466.value5)))(toList(_466.value6)))));
    };
    throw new Error("Failed pattern match: " + [ _466.constructor.name ]);
};

/**
 *  | Calculate the number of key/value pairs in a map
 */
var size = Prelude["<<<"](Prelude.semigroupoidFn)(Data_List.length)(values);

/**
 *  | Create a map with one key/value pair
 */
var singleton = function (k) {
    return function (v) {
        return new Two(Leaf.value, k, v, Leaf.value);
    };
};
var showTree = function (__dict_Show_0) {
    return function (__dict_Show_1) {
        return function (_461) {
            if (_461 instanceof Leaf) {
                return "Leaf";
            };
            if (_461 instanceof Two) {
                return "Two (" + (showTree(__dict_Show_0)(__dict_Show_1)(_461.value0) + (") (" + (Prelude.show(__dict_Show_0)(_461.value1) + (") (" + (Prelude.show(__dict_Show_1)(_461.value2) + (") (" + (showTree(__dict_Show_0)(__dict_Show_1)(_461.value3) + ")")))))));
            };
            if (_461 instanceof Three) {
                return "Three (" + (showTree(__dict_Show_0)(__dict_Show_1)(_461.value0) + (") (" + (Prelude.show(__dict_Show_0)(_461.value1) + (") (" + (Prelude.show(__dict_Show_1)(_461.value2) + (") (" + (showTree(__dict_Show_0)(__dict_Show_1)(_461.value3) + (") (" + (Prelude.show(__dict_Show_0)(_461.value4) + (") (" + (Prelude.show(__dict_Show_1)(_461.value5) + (") (" + (showTree(__dict_Show_0)(__dict_Show_1)(_461.value6) + ")")))))))))))));
            };
            throw new Error("Failed pattern match: " + [ _461.constructor.name ]);
        };
    };
};
var showMap = function (__dict_Show_2) {
    return function (__dict_Show_3) {
        return new Prelude.Show(function (m) {
            return "fromList " + Prelude.show(Data_List.showList(Data_Tuple.showTuple(__dict_Show_2)(__dict_Show_3)))(toList(m));
        });
    };
};
var lookup = function (__copy___dict_Ord_6) {
    return function (__copy_k) {
        return function (__copy__463) {
            var __dict_Ord_6 = __copy___dict_Ord_6;
            var k = __copy_k;
            var _463 = __copy__463;
            tco: while (true) {
                if (_463 instanceof Leaf) {
                    return Data_Maybe.Nothing.value;
                };
                var k_1 = k;
                if (_463 instanceof Two && Prelude["=="](__dict_Ord_6["__superclass_Prelude.Eq_0"]())(k_1)(_463.value1)) {
                    return new Data_Maybe.Just(_463.value2);
                };
                var k_1 = k;
                if (_463 instanceof Two && Prelude["<"](__dict_Ord_6)(k_1)(_463.value1)) {
                    var __tco___dict_Ord_6 = __dict_Ord_6;
                    var __tco__463 = _463.value0;
                    __dict_Ord_6 = __tco___dict_Ord_6;
                    k = k_1;
                    _463 = __tco__463;
                    continue tco;
                };
                var k_1 = k;
                if (_463 instanceof Two) {
                    var __tco___dict_Ord_6 = __dict_Ord_6;
                    var __tco__463 = _463.value3;
                    __dict_Ord_6 = __tco___dict_Ord_6;
                    k = k_1;
                    _463 = __tco__463;
                    continue tco;
                };
                var k_1 = k;
                if (_463 instanceof Three && Prelude["=="](__dict_Ord_6["__superclass_Prelude.Eq_0"]())(k_1)(_463.value1)) {
                    return new Data_Maybe.Just(_463.value2);
                };
                var k_1 = k;
                if (_463 instanceof Three && Prelude["=="](__dict_Ord_6["__superclass_Prelude.Eq_0"]())(k_1)(_463.value4)) {
                    return new Data_Maybe.Just(_463.value5);
                };
                var k_1 = k;
                if (_463 instanceof Three && Prelude["<"](__dict_Ord_6)(k_1)(_463.value1)) {
                    var __tco___dict_Ord_6 = __dict_Ord_6;
                    var __tco__463 = _463.value0;
                    __dict_Ord_6 = __tco___dict_Ord_6;
                    k = k_1;
                    _463 = __tco__463;
                    continue tco;
                };
                var k_1 = k;
                if (_463 instanceof Three && Prelude["&&"](Prelude.booleanAlgebraBoolean)(Prelude["<"](__dict_Ord_6)(_463.value1)(k_1))(Prelude["<="](__dict_Ord_6)(k_1)(_463.value4))) {
                    var __tco___dict_Ord_6 = __dict_Ord_6;
                    var __tco__463 = _463.value3;
                    __dict_Ord_6 = __tco___dict_Ord_6;
                    k = k_1;
                    _463 = __tco__463;
                    continue tco;
                };
                if (_463 instanceof Three) {
                    var __tco___dict_Ord_6 = __dict_Ord_6;
                    var __tco_k = k;
                    var __tco__463 = _463.value6;
                    __dict_Ord_6 = __tco___dict_Ord_6;
                    k = __tco_k;
                    _463 = __tco__463;
                    continue tco;
                };
                throw new Error("Failed pattern match: " + [ k.constructor.name, _463.constructor.name ]);
            };
        };
    };
};

/**
 *  | Test if a key is a member of a map
 */
var member = function (__dict_Ord_7) {
    return function (k) {
        return function (m) {
            return Data_Maybe.isJust(lookup(__dict_Ord_7)(k)(m));
        };
    };
};
var keys = function (_467) {
    if (_467 instanceof Leaf) {
        return Data_List.Nil.value;
    };
    if (_467 instanceof Two) {
        return Prelude["++"](Data_List.semigroupList)(keys(_467.value0))(Prelude["++"](Data_List.semigroupList)(Prelude.pure(Data_List.applicativeList)(_467.value1))(keys(_467.value3)));
    };
    if (_467 instanceof Three) {
        return Prelude["++"](Data_List.semigroupList)(keys(_467.value0))(Prelude["++"](Data_List.semigroupList)(Prelude.pure(Data_List.applicativeList)(_467.value1))(Prelude["++"](Data_List.semigroupList)(keys(_467.value3))(Prelude["++"](Data_List.semigroupList)(Prelude.pure(Data_List.applicativeList)(_467.value4))(keys(_467.value6)))));
    };
    throw new Error("Failed pattern match: " + [ _467.constructor.name ]);
};

/**
 *  | Test if a map is empty
 */
var isEmpty = function (_462) {
    if (_462 instanceof Leaf) {
        return true;
    };
    return false;
};
var functorMap = new Prelude.Functor(function (f) {
    return function (_469) {
        if (_469 instanceof Leaf) {
            return Leaf.value;
        };
        if (_469 instanceof Two) {
            return new Two(Prelude.map(functorMap)(f)(_469.value0), _469.value1, f(_469.value2), Prelude.map(functorMap)(f)(_469.value3));
        };
        if (_469 instanceof Three) {
            return new Three(Prelude.map(functorMap)(f)(_469.value0), _469.value1, f(_469.value2), Prelude.map(functorMap)(f)(_469.value3), _469.value4, f(_469.value5), Prelude.map(functorMap)(f)(_469.value6));
        };
        throw new Error("Failed pattern match: " + [ f.constructor.name, _469.constructor.name ]);
    };
});
var fromZipper = function (__copy___dict_Ord_8) {
    return function (__copy__464) {
        return function (__copy__465) {
            var __dict_Ord_8 = __copy___dict_Ord_8;
            var _464 = __copy__464;
            var _465 = __copy__465;
            tco: while (true) {
                if (_464 instanceof Data_List.Nil) {
                    return _465;
                };
                if (_464 instanceof Data_List.Cons && _464.value0 instanceof TwoLeft) {
                    var __tco___dict_Ord_8 = __dict_Ord_8;
                    var __tco__464 = _464.value1;
                    var __tco__465 = new Two(_465, _464.value0.value0, _464.value0.value1, _464.value0.value2);
                    __dict_Ord_8 = __tco___dict_Ord_8;
                    _464 = __tco__464;
                    _465 = __tco__465;
                    continue tco;
                };
                if (_464 instanceof Data_List.Cons && _464.value0 instanceof TwoRight) {
                    var __tco___dict_Ord_8 = __dict_Ord_8;
                    var __tco__464 = _464.value1;
                    var __tco__465 = new Two(_464.value0.value0, _464.value0.value1, _464.value0.value2, _465);
                    __dict_Ord_8 = __tco___dict_Ord_8;
                    _464 = __tco__464;
                    _465 = __tco__465;
                    continue tco;
                };
                if (_464 instanceof Data_List.Cons && _464.value0 instanceof ThreeLeft) {
                    var __tco___dict_Ord_8 = __dict_Ord_8;
                    var __tco__464 = _464.value1;
                    var __tco__465 = new Three(_465, _464.value0.value0, _464.value0.value1, _464.value0.value2, _464.value0.value3, _464.value0.value4, _464.value0.value5);
                    __dict_Ord_8 = __tco___dict_Ord_8;
                    _464 = __tco__464;
                    _465 = __tco__465;
                    continue tco;
                };
                if (_464 instanceof Data_List.Cons && _464.value0 instanceof ThreeMiddle) {
                    var __tco___dict_Ord_8 = __dict_Ord_8;
                    var __tco__464 = _464.value1;
                    var __tco__465 = new Three(_464.value0.value0, _464.value0.value1, _464.value0.value2, _465, _464.value0.value3, _464.value0.value4, _464.value0.value5);
                    __dict_Ord_8 = __tco___dict_Ord_8;
                    _464 = __tco__464;
                    _465 = __tco__465;
                    continue tco;
                };
                if (_464 instanceof Data_List.Cons && _464.value0 instanceof ThreeRight) {
                    var __tco___dict_Ord_8 = __dict_Ord_8;
                    var __tco__464 = _464.value1;
                    var __tco__465 = new Three(_464.value0.value0, _464.value0.value1, _464.value0.value2, _464.value0.value3, _464.value0.value4, _464.value0.value5, _465);
                    __dict_Ord_8 = __tco___dict_Ord_8;
                    _464 = __tco__464;
                    _465 = __tco__465;
                    continue tco;
                };
                throw new Error("Failed pattern match: " + [ _464.constructor.name, _465.constructor.name ]);
            };
        };
    };
};

/**
 *  | Insert a key/value pair into a map
 */
var insert = function (__dict_Ord_9) {
    var up = function (__copy___dict_Ord_10) {
        return function (__copy__472) {
            return function (__copy__473) {
                var __dict_Ord_10 = __copy___dict_Ord_10;
                var _472 = __copy__472;
                var _473 = __copy__473;
                tco: while (true) {
                    if (_472 instanceof Data_List.Nil) {
                        return new Two(_473.value0, _473.value1, _473.value2, _473.value3);
                    };
                    if (_472 instanceof Data_List.Cons && _472.value0 instanceof TwoLeft) {
                        return fromZipper(__dict_Ord_10)(_472.value1)(new Three(_473.value0, _473.value1, _473.value2, _473.value3, _472.value0.value0, _472.value0.value1, _472.value0.value2));
                    };
                    if (_472 instanceof Data_List.Cons && _472.value0 instanceof TwoRight) {
                        return fromZipper(__dict_Ord_10)(_472.value1)(new Three(_472.value0.value0, _472.value0.value1, _472.value0.value2, _473.value0, _473.value1, _473.value2, _473.value3));
                    };
                    if (_472 instanceof Data_List.Cons && _472.value0 instanceof ThreeLeft) {
                        var __tco___dict_Ord_10 = __dict_Ord_10;
                        var __tco__472 = _472.value1;
                        var __tco__473 = new KickUp(new Two(_473.value0, _473.value1, _473.value2, _473.value3), _472.value0.value0, _472.value0.value1, new Two(_472.value0.value2, _472.value0.value3, _472.value0.value4, _472.value0.value5));
                        __dict_Ord_10 = __tco___dict_Ord_10;
                        _472 = __tco__472;
                        _473 = __tco__473;
                        continue tco;
                    };
                    if (_472 instanceof Data_List.Cons && _472.value0 instanceof ThreeMiddle) {
                        var __tco___dict_Ord_10 = __dict_Ord_10;
                        var __tco__472 = _472.value1;
                        var __tco__473 = new KickUp(new Two(_472.value0.value0, _472.value0.value1, _472.value0.value2, _473.value0), _473.value1, _473.value2, new Two(_473.value3, _472.value0.value3, _472.value0.value4, _472.value0.value5));
                        __dict_Ord_10 = __tco___dict_Ord_10;
                        _472 = __tco__472;
                        _473 = __tco__473;
                        continue tco;
                    };
                    if (_472 instanceof Data_List.Cons && _472.value0 instanceof ThreeRight) {
                        var __tco___dict_Ord_10 = __dict_Ord_10;
                        var __tco__472 = _472.value1;
                        var __tco__473 = new KickUp(new Two(_472.value0.value0, _472.value0.value1, _472.value0.value2, _472.value0.value3), _472.value0.value4, _472.value0.value5, new Two(_473.value0, _473.value1, _473.value2, _473.value3));
                        __dict_Ord_10 = __tco___dict_Ord_10;
                        _472 = __tco__472;
                        _473 = __tco__473;
                        continue tco;
                    };
                    throw new Error("Failed pattern match at bower_components/purescript-maps/src/Data/Map.purs line 147, column 1 - line 148, column 1: " + [ _472.constructor.name, _473.constructor.name ]);
                };
            };
        };
    };
    var down = function (__copy___dict_Ord_11) {
        return function (__copy_ctx) {
            return function (__copy_k) {
                return function (__copy_v) {
                    return function (__copy__471) {
                        var __dict_Ord_11 = __copy___dict_Ord_11;
                        var ctx = __copy_ctx;
                        var k = __copy_k;
                        var v = __copy_v;
                        var _471 = __copy__471;
                        tco: while (true) {
                            var ctx_1 = ctx;
                            var k_1 = k;
                            var v_1 = v;
                            if (_471 instanceof Leaf) {
                                return up(__dict_Ord_11)(ctx_1)(new KickUp(Leaf.value, k_1, v_1, Leaf.value));
                            };
                            var ctx_1 = ctx;
                            var k_1 = k;
                            var v_1 = v;
                            if (_471 instanceof Two && Prelude["=="](__dict_Ord_11["__superclass_Prelude.Eq_0"]())(k_1)(_471.value1)) {
                                return fromZipper(__dict_Ord_11)(ctx_1)(new Two(_471.value0, k_1, v_1, _471.value3));
                            };
                            var ctx_1 = ctx;
                            var k_1 = k;
                            var v_1 = v;
                            if (_471 instanceof Two && Prelude["<"](__dict_Ord_11)(k_1)(_471.value1)) {
                                var __tco___dict_Ord_11 = __dict_Ord_11;
                                var __tco_ctx = new Data_List.Cons(new TwoLeft(_471.value1, _471.value2, _471.value3), ctx_1);
                                var __tco__471 = _471.value0;
                                __dict_Ord_11 = __tco___dict_Ord_11;
                                ctx = __tco_ctx;
                                k = k_1;
                                v = v_1;
                                _471 = __tco__471;
                                continue tco;
                            };
                            var ctx_1 = ctx;
                            var k_1 = k;
                            var v_1 = v;
                            if (_471 instanceof Two) {
                                var __tco___dict_Ord_11 = __dict_Ord_11;
                                var __tco_ctx = new Data_List.Cons(new TwoRight(_471.value0, _471.value1, _471.value2), ctx_1);
                                var __tco__471 = _471.value3;
                                __dict_Ord_11 = __tco___dict_Ord_11;
                                ctx = __tco_ctx;
                                k = k_1;
                                v = v_1;
                                _471 = __tco__471;
                                continue tco;
                            };
                            var ctx_1 = ctx;
                            var k_1 = k;
                            var v_1 = v;
                            if (_471 instanceof Three && Prelude["=="](__dict_Ord_11["__superclass_Prelude.Eq_0"]())(k_1)(_471.value1)) {
                                return fromZipper(__dict_Ord_11)(ctx_1)(new Three(_471.value0, k_1, v_1, _471.value3, _471.value4, _471.value5, _471.value6));
                            };
                            var ctx_1 = ctx;
                            var k_1 = k;
                            var v_1 = v;
                            if (_471 instanceof Three && Prelude["=="](__dict_Ord_11["__superclass_Prelude.Eq_0"]())(k_1)(_471.value4)) {
                                return fromZipper(__dict_Ord_11)(ctx_1)(new Three(_471.value0, _471.value1, _471.value2, _471.value3, k_1, v_1, _471.value6));
                            };
                            var ctx_1 = ctx;
                            var k_1 = k;
                            var v_1 = v;
                            if (_471 instanceof Three && Prelude["<"](__dict_Ord_11)(k_1)(_471.value1)) {
                                var __tco___dict_Ord_11 = __dict_Ord_11;
                                var __tco_ctx = new Data_List.Cons(new ThreeLeft(_471.value1, _471.value2, _471.value3, _471.value4, _471.value5, _471.value6), ctx_1);
                                var __tco__471 = _471.value0;
                                __dict_Ord_11 = __tco___dict_Ord_11;
                                ctx = __tco_ctx;
                                k = k_1;
                                v = v_1;
                                _471 = __tco__471;
                                continue tco;
                            };
                            var ctx_1 = ctx;
                            var k_1 = k;
                            var v_1 = v;
                            if (_471 instanceof Three && Prelude["&&"](Prelude.booleanAlgebraBoolean)(Prelude["<"](__dict_Ord_11)(_471.value1)(k_1))(Prelude["<="](__dict_Ord_11)(k_1)(_471.value4))) {
                                var __tco___dict_Ord_11 = __dict_Ord_11;
                                var __tco_ctx = new Data_List.Cons(new ThreeMiddle(_471.value0, _471.value1, _471.value2, _471.value4, _471.value5, _471.value6), ctx_1);
                                var __tco__471 = _471.value3;
                                __dict_Ord_11 = __tco___dict_Ord_11;
                                ctx = __tco_ctx;
                                k = k_1;
                                v = v_1;
                                _471 = __tco__471;
                                continue tco;
                            };
                            if (_471 instanceof Three) {
                                var __tco___dict_Ord_11 = __dict_Ord_11;
                                var __tco_ctx = new Data_List.Cons(new ThreeRight(_471.value0, _471.value1, _471.value2, _471.value3, _471.value4, _471.value5), ctx);
                                var __tco_k = k;
                                var __tco_v = v;
                                var __tco__471 = _471.value6;
                                __dict_Ord_11 = __tco___dict_Ord_11;
                                ctx = __tco_ctx;
                                k = __tco_k;
                                v = __tco_v;
                                _471 = __tco__471;
                                continue tco;
                            };
                            throw new Error("Failed pattern match at bower_components/purescript-maps/src/Data/Map.purs line 147, column 1 - line 148, column 1: " + [ ctx.constructor.name, k.constructor.name, v.constructor.name, _471.constructor.name ]);
                        };
                    };
                };
            };
        };
    };
    return down(__dict_Ord_9)(Data_List.Nil.value);
};
var foldableMap = new Data_Foldable.Foldable(function (__dict_Monoid_12) {
    return function (f) {
        return function (m) {
            return Data_Foldable.foldMap(Data_List.foldableList)(__dict_Monoid_12)(f)(values(m));
        };
    };
}, function (f) {
    return function (z) {
        return function (m) {
            return Data_Foldable.foldl(Data_List.foldableList)(f)(z)(values(m));
        };
    };
}, function (f) {
    return function (z) {
        return function (m) {
            return Data_Foldable.foldr(Data_List.foldableList)(f)(z)(values(m));
        };
    };
});
var eqMap = function (__dict_Eq_13) {
    return function (__dict_Eq_14) {
        return new Prelude.Eq(function (m1) {
            return function (m2) {
                return Prelude["=="](Data_List.eqList(Data_Tuple.eqTuple(__dict_Eq_13)(__dict_Eq_14)))(toList(m1))(toList(m2));
            };
        });
    };
};
var ordMap = function (__dict_Ord_4) {
    return function (__dict_Ord_5) {
        return new Prelude.Ord(function () {
            return eqMap(__dict_Ord_4["__superclass_Prelude.Eq_0"]())(__dict_Ord_5["__superclass_Prelude.Eq_0"]());
        }, function (m1) {
            return function (m2) {
                return Prelude.compare(Data_List.ordList(Data_Tuple.ordTuple(__dict_Ord_4)(__dict_Ord_5)))(toList(m1))(toList(m2));
            };
        });
    };
};

/**
 *  | An empty map
 */
var empty = Leaf.value;

/**
 *  | Create a map from an array of key/value pairs
 */
var fromList = function (__dict_Ord_15) {
    return Data_Foldable.foldl(Data_List.foldableList)(function (m) {
        return function (_459) {
            return insert(__dict_Ord_15)(_459.value0)(_459.value1)(m);
        };
    })(empty);
};

/**
 *  | Delete a key and its corresponding value from a map
 */
var $$delete = function (__dict_Ord_17) {
    var up = function (__copy___dict_Ord_18) {
        return function (__copy__475) {
            return function (__copy__476) {
                var __dict_Ord_18 = __copy___dict_Ord_18;
                var _475 = __copy__475;
                var _476 = __copy__476;
                tco: while (true) {
                    if (_475 instanceof Data_List.Nil) {
                        return _476;
                    };
                    if (_475 instanceof Data_List.Cons && (_475.value0 instanceof TwoLeft && (_475.value0.value2 instanceof Leaf && _476 instanceof Leaf))) {
                        return fromZipper(__dict_Ord_18)(_475.value1)(new Two(Leaf.value, _475.value0.value0, _475.value0.value1, Leaf.value));
                    };
                    if (_475 instanceof Data_List.Cons && (_475.value0 instanceof TwoRight && (_475.value0.value0 instanceof Leaf && _476 instanceof Leaf))) {
                        return fromZipper(__dict_Ord_18)(_475.value1)(new Two(Leaf.value, _475.value0.value1, _475.value0.value2, Leaf.value));
                    };
                    if (_475 instanceof Data_List.Cons && (_475.value0 instanceof TwoLeft && _475.value0.value2 instanceof Two)) {
                        var __tco___dict_Ord_18 = __dict_Ord_18;
                        var __tco__475 = _475.value1;
                        var __tco__476 = new Three(_476, _475.value0.value0, _475.value0.value1, _475.value0.value2.value0, _475.value0.value2.value1, _475.value0.value2.value2, _475.value0.value2.value3);
                        __dict_Ord_18 = __tco___dict_Ord_18;
                        _475 = __tco__475;
                        _476 = __tco__476;
                        continue tco;
                    };
                    if (_475 instanceof Data_List.Cons && (_475.value0 instanceof TwoRight && _475.value0.value0 instanceof Two)) {
                        var __tco___dict_Ord_18 = __dict_Ord_18;
                        var __tco__475 = _475.value1;
                        var __tco__476 = new Three(_475.value0.value0.value0, _475.value0.value0.value1, _475.value0.value0.value2, _475.value0.value0.value3, _475.value0.value1, _475.value0.value2, _476);
                        __dict_Ord_18 = __tco___dict_Ord_18;
                        _475 = __tco__475;
                        _476 = __tco__476;
                        continue tco;
                    };
                    if (_475 instanceof Data_List.Cons && (_475.value0 instanceof TwoLeft && _475.value0.value2 instanceof Three)) {
                        return fromZipper(__dict_Ord_18)(_475.value1)(new Two(new Two(_476, _475.value0.value0, _475.value0.value1, _475.value0.value2.value0), _475.value0.value2.value1, _475.value0.value2.value2, new Two(_475.value0.value2.value3, _475.value0.value2.value4, _475.value0.value2.value5, _475.value0.value2.value6)));
                    };
                    if (_475 instanceof Data_List.Cons && (_475.value0 instanceof TwoRight && _475.value0.value0 instanceof Three)) {
                        return fromZipper(__dict_Ord_18)(_475.value1)(new Two(new Two(_475.value0.value0.value0, _475.value0.value0.value1, _475.value0.value0.value2, _475.value0.value0.value3), _475.value0.value0.value4, _475.value0.value0.value5, new Two(_475.value0.value0.value6, _475.value0.value1, _475.value0.value2, _476)));
                    };
                    if (_475 instanceof Data_List.Cons && (_475.value0 instanceof ThreeLeft && (_475.value0.value2 instanceof Leaf && (_475.value0.value5 instanceof Leaf && _476 instanceof Leaf)))) {
                        return fromZipper(__dict_Ord_18)(_475.value1)(new Three(Leaf.value, _475.value0.value0, _475.value0.value1, Leaf.value, _475.value0.value3, _475.value0.value4, Leaf.value));
                    };
                    if (_475 instanceof Data_List.Cons && (_475.value0 instanceof ThreeMiddle && (_475.value0.value0 instanceof Leaf && (_475.value0.value5 instanceof Leaf && _476 instanceof Leaf)))) {
                        return fromZipper(__dict_Ord_18)(_475.value1)(new Three(Leaf.value, _475.value0.value1, _475.value0.value2, Leaf.value, _475.value0.value3, _475.value0.value4, Leaf.value));
                    };
                    if (_475 instanceof Data_List.Cons && (_475.value0 instanceof ThreeRight && (_475.value0.value0 instanceof Leaf && (_475.value0.value3 instanceof Leaf && _476 instanceof Leaf)))) {
                        return fromZipper(__dict_Ord_18)(_475.value1)(new Three(Leaf.value, _475.value0.value1, _475.value0.value2, Leaf.value, _475.value0.value4, _475.value0.value5, Leaf.value));
                    };
                    if (_475 instanceof Data_List.Cons && (_475.value0 instanceof ThreeLeft && _475.value0.value2 instanceof Two)) {
                        return fromZipper(__dict_Ord_18)(_475.value1)(new Two(new Three(_476, _475.value0.value0, _475.value0.value1, _475.value0.value2.value0, _475.value0.value2.value1, _475.value0.value2.value2, _475.value0.value2.value3), _475.value0.value3, _475.value0.value4, _475.value0.value5));
                    };
                    if (_475 instanceof Data_List.Cons && (_475.value0 instanceof ThreeMiddle && _475.value0.value0 instanceof Two)) {
                        return fromZipper(__dict_Ord_18)(_475.value1)(new Two(new Three(_475.value0.value0.value0, _475.value0.value0.value1, _475.value0.value0.value2, _475.value0.value0.value3, _475.value0.value1, _475.value0.value2, _476), _475.value0.value3, _475.value0.value4, _475.value0.value5));
                    };
                    if (_475 instanceof Data_List.Cons && (_475.value0 instanceof ThreeMiddle && _475.value0.value5 instanceof Two)) {
                        return fromZipper(__dict_Ord_18)(_475.value1)(new Two(_475.value0.value0, _475.value0.value1, _475.value0.value2, new Three(_476, _475.value0.value3, _475.value0.value4, _475.value0.value5.value0, _475.value0.value5.value1, _475.value0.value5.value2, _475.value0.value5.value3)));
                    };
                    if (_475 instanceof Data_List.Cons && (_475.value0 instanceof ThreeRight && _475.value0.value3 instanceof Two)) {
                        return fromZipper(__dict_Ord_18)(_475.value1)(new Two(_475.value0.value0, _475.value0.value1, _475.value0.value2, new Three(_475.value0.value3.value0, _475.value0.value3.value1, _475.value0.value3.value2, _475.value0.value3.value3, _475.value0.value4, _475.value0.value5, _476)));
                    };
                    if (_475 instanceof Data_List.Cons && (_475.value0 instanceof ThreeLeft && _475.value0.value2 instanceof Three)) {
                        return fromZipper(__dict_Ord_18)(_475.value1)(new Three(new Two(_476, _475.value0.value0, _475.value0.value1, _475.value0.value2.value0), _475.value0.value2.value1, _475.value0.value2.value2, new Two(_475.value0.value2.value3, _475.value0.value2.value4, _475.value0.value2.value5, _475.value0.value2.value6), _475.value0.value3, _475.value0.value4, _475.value0.value5));
                    };
                    if (_475 instanceof Data_List.Cons && (_475.value0 instanceof ThreeMiddle && _475.value0.value0 instanceof Three)) {
                        return fromZipper(__dict_Ord_18)(_475.value1)(new Three(new Two(_475.value0.value0.value0, _475.value0.value0.value1, _475.value0.value0.value2, _475.value0.value0.value3), _475.value0.value0.value4, _475.value0.value0.value5, new Two(_475.value0.value0.value6, _475.value0.value1, _475.value0.value2, _476), _475.value0.value3, _475.value0.value4, _475.value0.value5));
                    };
                    if (_475 instanceof Data_List.Cons && (_475.value0 instanceof ThreeMiddle && _475.value0.value5 instanceof Three)) {
                        return fromZipper(__dict_Ord_18)(_475.value1)(new Three(_475.value0.value0, _475.value0.value1, _475.value0.value2, new Two(_476, _475.value0.value3, _475.value0.value4, _475.value0.value5.value0), _475.value0.value5.value1, _475.value0.value5.value2, new Two(_475.value0.value5.value3, _475.value0.value5.value4, _475.value0.value5.value5, _475.value0.value5.value6)));
                    };
                    if (_475 instanceof Data_List.Cons && (_475.value0 instanceof ThreeRight && _475.value0.value3 instanceof Three)) {
                        return fromZipper(__dict_Ord_18)(_475.value1)(new Three(_475.value0.value0, _475.value0.value1, _475.value0.value2, new Two(_475.value0.value3.value0, _475.value0.value3.value1, _475.value0.value3.value2, _475.value0.value3.value3), _475.value0.value3.value4, _475.value0.value3.value5, new Two(_475.value0.value3.value6, _475.value0.value4, _475.value0.value5, _476)));
                    };
                    throw new Error("Failed pattern match at bower_components/purescript-maps/src/Data/Map.purs line 170, column 1 - line 171, column 1: " + [ _475.constructor.name, _476.constructor.name ]);
                };
            };
        };
    };
    var removeMaxNode = function (__copy___dict_Ord_19) {
        return function (__copy_ctx) {
            return function (__copy__478) {
                var __dict_Ord_19 = __copy___dict_Ord_19;
                var ctx = __copy_ctx;
                var _478 = __copy__478;
                tco: while (true) {
                    var ctx_1 = ctx;
                    if (_478 instanceof Two && (_478.value0 instanceof Leaf && _478.value3 instanceof Leaf)) {
                        return up(__dict_Ord_19)(ctx_1)(Leaf.value);
                    };
                    var ctx_1 = ctx;
                    if (_478 instanceof Two) {
                        var __tco___dict_Ord_19 = __dict_Ord_19;
                        var __tco_ctx = new Data_List.Cons(new TwoRight(_478.value0, _478.value1, _478.value2), ctx_1);
                        var __tco__478 = _478.value3;
                        __dict_Ord_19 = __tco___dict_Ord_19;
                        ctx = __tco_ctx;
                        _478 = __tco__478;
                        continue tco;
                    };
                    var ctx_1 = ctx;
                    if (_478 instanceof Three && (_478.value0 instanceof Leaf && (_478.value3 instanceof Leaf && _478.value6 instanceof Leaf))) {
                        return up(__dict_Ord_19)(new Data_List.Cons(new TwoRight(Leaf.value, _478.value1, _478.value2), ctx_1))(Leaf.value);
                    };
                    if (_478 instanceof Three) {
                        var __tco___dict_Ord_19 = __dict_Ord_19;
                        var __tco_ctx = new Data_List.Cons(new ThreeRight(_478.value0, _478.value1, _478.value2, _478.value3, _478.value4, _478.value5), ctx);
                        var __tco__478 = _478.value6;
                        __dict_Ord_19 = __tco___dict_Ord_19;
                        ctx = __tco_ctx;
                        _478 = __tco__478;
                        continue tco;
                    };
                    throw new Error("Failed pattern match at bower_components/purescript-maps/src/Data/Map.purs line 170, column 1 - line 171, column 1: " + [ ctx.constructor.name, _478.constructor.name ]);
                };
            };
        };
    };
    var maxNode = function (__copy___dict_Ord_20) {
        return function (__copy__477) {
            var __dict_Ord_20 = __copy___dict_Ord_20;
            var _477 = __copy__477;
            tco: while (true) {
                if (_477 instanceof Two && _477.value3 instanceof Leaf) {
                    return {
                        key: _477.value1, 
                        value: _477.value2
                    };
                };
                if (_477 instanceof Two) {
                    var __tco___dict_Ord_20 = __dict_Ord_20;
                    var __tco__477 = _477.value3;
                    __dict_Ord_20 = __tco___dict_Ord_20;
                    _477 = __tco__477;
                    continue tco;
                };
                if (_477 instanceof Three && _477.value6 instanceof Leaf) {
                    return {
                        key: _477.value4, 
                        value: _477.value5
                    };
                };
                if (_477 instanceof Three) {
                    var __tco___dict_Ord_20 = __dict_Ord_20;
                    var __tco__477 = _477.value6;
                    __dict_Ord_20 = __tco___dict_Ord_20;
                    _477 = __tco__477;
                    continue tco;
                };
                throw new Error("Failed pattern match at bower_components/purescript-maps/src/Data/Map.purs line 170, column 1 - line 171, column 1: " + [ _477.constructor.name ]);
            };
        };
    };
    var down = function (__copy___dict_Ord_21) {
        return function (__copy_ctx) {
            return function (__copy_k) {
                return function (__copy__474) {
                    var __dict_Ord_21 = __copy___dict_Ord_21;
                    var ctx = __copy_ctx;
                    var k = __copy_k;
                    var _474 = __copy__474;
                    tco: while (true) {
                        var ctx_1 = ctx;
                        if (_474 instanceof Leaf) {
                            return fromZipper(__dict_Ord_21)(ctx_1)(Leaf.value);
                        };
                        var ctx_1 = ctx;
                        var k_1 = k;
                        if (_474 instanceof Two && (_474.value0 instanceof Leaf && (_474.value3 instanceof Leaf && Prelude["=="](__dict_Ord_21["__superclass_Prelude.Eq_0"]())(k_1)(_474.value1)))) {
                            return up(__dict_Ord_21)(ctx_1)(Leaf.value);
                        };
                        var ctx_1 = ctx;
                        var k_1 = k;
                        if (_474 instanceof Two) {
                            if (Prelude["=="](__dict_Ord_21["__superclass_Prelude.Eq_0"]())(k_1)(_474.value1)) {
                                var max = maxNode(__dict_Ord_21)(_474.value0);
                                return removeMaxNode(__dict_Ord_21)(new Data_List.Cons(new TwoLeft(max.key, max.value, _474.value3), ctx_1))(_474.value0);
                            };
                            if (Prelude["<"](__dict_Ord_21)(k_1)(_474.value1)) {
                                var __tco___dict_Ord_21 = __dict_Ord_21;
                                var __tco_ctx = new Data_List.Cons(new TwoLeft(_474.value1, _474.value2, _474.value3), ctx_1);
                                var __tco__474 = _474.value0;
                                __dict_Ord_21 = __tco___dict_Ord_21;
                                ctx = __tco_ctx;
                                k = k_1;
                                _474 = __tco__474;
                                continue tco;
                            };
                            if (Prelude.otherwise) {
                                var __tco___dict_Ord_21 = __dict_Ord_21;
                                var __tco_ctx = new Data_List.Cons(new TwoRight(_474.value0, _474.value1, _474.value2), ctx_1);
                                var __tco__474 = _474.value3;
                                __dict_Ord_21 = __tco___dict_Ord_21;
                                ctx = __tco_ctx;
                                k = k_1;
                                _474 = __tco__474;
                                continue tco;
                            };
                        };
                        var ctx_1 = ctx;
                        var k_1 = k;
                        if (_474 instanceof Three && (_474.value0 instanceof Leaf && (_474.value3 instanceof Leaf && _474.value6 instanceof Leaf))) {
                            if (Prelude["=="](__dict_Ord_21["__superclass_Prelude.Eq_0"]())(k_1)(_474.value1)) {
                                return fromZipper(__dict_Ord_21)(ctx_1)(new Two(Leaf.value, _474.value4, _474.value5, Leaf.value));
                            };
                            if (Prelude["=="](__dict_Ord_21["__superclass_Prelude.Eq_0"]())(k_1)(_474.value4)) {
                                return fromZipper(__dict_Ord_21)(ctx_1)(new Two(Leaf.value, _474.value1, _474.value2, Leaf.value));
                            };
                        };
                        if (_474 instanceof Three) {
                            if (Prelude["=="](__dict_Ord_21["__superclass_Prelude.Eq_0"]())(k)(_474.value1)) {
                                var max = maxNode(__dict_Ord_21)(_474.value0);
                                return removeMaxNode(__dict_Ord_21)(new Data_List.Cons(new ThreeLeft(max.key, max.value, _474.value3, _474.value4, _474.value5, _474.value6), ctx))(_474.value0);
                            };
                            if (Prelude["=="](__dict_Ord_21["__superclass_Prelude.Eq_0"]())(k)(_474.value4)) {
                                var max = maxNode(__dict_Ord_21)(_474.value3);
                                return removeMaxNode(__dict_Ord_21)(new Data_List.Cons(new ThreeMiddle(_474.value0, _474.value1, _474.value2, max.key, max.value, _474.value6), ctx))(_474.value3);
                            };
                            if (Prelude["<"](__dict_Ord_21)(k)(_474.value1)) {
                                var __tco___dict_Ord_21 = __dict_Ord_21;
                                var __tco_ctx = new Data_List.Cons(new ThreeLeft(_474.value1, _474.value2, _474.value3, _474.value4, _474.value5, _474.value6), ctx);
                                var __tco_k = k;
                                var __tco__474 = _474.value0;
                                __dict_Ord_21 = __tco___dict_Ord_21;
                                ctx = __tco_ctx;
                                k = __tco_k;
                                _474 = __tco__474;
                                continue tco;
                            };
                            if (Prelude["&&"](Prelude.booleanAlgebraBoolean)(Prelude["<"](__dict_Ord_21)(_474.value1)(k))(Prelude["<"](__dict_Ord_21)(k)(_474.value4))) {
                                var __tco___dict_Ord_21 = __dict_Ord_21;
                                var __tco_ctx = new Data_List.Cons(new ThreeMiddle(_474.value0, _474.value1, _474.value2, _474.value4, _474.value5, _474.value6), ctx);
                                var __tco_k = k;
                                var __tco__474 = _474.value3;
                                __dict_Ord_21 = __tco___dict_Ord_21;
                                ctx = __tco_ctx;
                                k = __tco_k;
                                _474 = __tco__474;
                                continue tco;
                            };
                            if (Prelude.otherwise) {
                                var __tco___dict_Ord_21 = __dict_Ord_21;
                                var __tco_ctx = new Data_List.Cons(new ThreeRight(_474.value0, _474.value1, _474.value2, _474.value3, _474.value4, _474.value5), ctx);
                                var __tco_k = k;
                                var __tco__474 = _474.value6;
                                __dict_Ord_21 = __tco___dict_Ord_21;
                                ctx = __tco_ctx;
                                k = __tco_k;
                                _474 = __tco__474;
                                continue tco;
                            };
                        };
                        throw new Error("Failed pattern match at bower_components/purescript-maps/src/Data/Map.purs line 170, column 1 - line 171, column 1: " + [ ctx.constructor.name, k.constructor.name, _474.constructor.name ]);
                    };
                };
            };
        };
    };
    return down(__dict_Ord_17)(Data_List.Nil.value);
};

/**
 *  | Check whether the underlying tree satisfies the 2-3 invariant
 *  |
 *  | This function is provided for internal use.
 */
var checkValid = function (tree) {
    var allHeights = function (_470) {
        if (_470 instanceof Leaf) {
            return Prelude.pure(Data_List.applicativeList)(Prelude.zero(Prelude.semiringInt));
        };
        if (_470 instanceof Two) {
            return Prelude.map(Data_List.functorList)(function (n) {
                return Prelude["+"](Prelude.semiringInt)(n)(Prelude.one(Prelude.semiringInt));
            })(Prelude["++"](Data_List.semigroupList)(allHeights(_470.value0))(allHeights(_470.value3)));
        };
        if (_470 instanceof Three) {
            return Prelude.map(Data_List.functorList)(function (n) {
                return Prelude["+"](Prelude.semiringInt)(n)(Prelude.one(Prelude.semiringInt));
            })(Prelude["++"](Data_List.semigroupList)(allHeights(_470.value0))(Prelude["++"](Data_List.semigroupList)(allHeights(_470.value3))(allHeights(_470.value6))));
        };
        throw new Error("Failed pattern match at bower_components/purescript-maps/src/Data/Map.purs line 105, column 1 - line 106, column 1: " + [ _470.constructor.name ]);
    };
    return Prelude["=="](Prelude.eqInt)(Data_List.length(Data_List.nub(Prelude.eqInt)(allHeights(tree))))(Prelude.one(Prelude.semiringInt));
};

/**
 *  | Insert the value, delete a value, or update a value for a key in a map
 */
var alter = function (__dict_Ord_22) {
    return function (f) {
        return function (k) {
            return function (m) {
                var _1200 = f(lookup(__dict_Ord_22)(k)(m));
                if (_1200 instanceof Data_Maybe.Nothing) {
                    return $$delete(__dict_Ord_22)(k)(m);
                };
                if (_1200 instanceof Data_Maybe.Just) {
                    return insert(__dict_Ord_22)(k)(_1200.value0)(m);
                };
                throw new Error("Failed pattern match at bower_components/purescript-maps/src/Data/Map.purs line 227, column 1 - line 228, column 1: " + [ _1200.constructor.name ]);
            };
        };
    };
};

/**
 *  | Create a map from an array of key/value pairs, using the specified function
 *  | to combine values for duplicate keys.
 */
var fromListWith = function (__dict_Ord_23) {
    return function (f) {
        var combine = function (v) {
            return function (_479) {
                if (_479 instanceof Data_Maybe.Just) {
                    return Data_Maybe.Just.create(f(v)(_479.value0));
                };
                if (_479 instanceof Data_Maybe.Nothing) {
                    return new Data_Maybe.Just(v);
                };
                throw new Error("Failed pattern match at bower_components/purescript-maps/src/Data/Map.purs line 250, column 3 - line 251, column 3: " + [ v.constructor.name, _479.constructor.name ]);
            };
        };
        return Data_Foldable.foldl(Data_List.foldableList)(function (m) {
            return function (_460) {
                return alter(__dict_Ord_23)(combine(_460.value1))(_460.value0)(m);
            };
        })(empty);
    };
};

/**
 *  | Compute the union of two maps, using the specified function
 *  | to combine values for duplicate keys.
 */
var unionWith = function (__dict_Ord_24) {
    return function (f) {
        return function (m1) {
            return function (m2) {
                var go = function (m) {
                    return function (_480) {
                        return alter(__dict_Ord_24)(Prelude["<<<"](Prelude.semigroupoidFn)(Data_Maybe.Just.create)(Data_Maybe.maybe(_480.value1)(f(_480.value1))))(_480.value0)(m);
                    };
                };
                return Data_Foldable.foldl(Data_List.foldableList)(go)(m2)(toList(m1));
            };
        };
    };
};

/**
 *  | Compute the union of two maps, preferring values from the first map in the case
 *  | of duplicate keys
 */
var union = function (__dict_Ord_25) {
    return unionWith(__dict_Ord_25)(Prelude["const"]);
};
var semigroupMap = function (__dict_Ord_26) {
    return new Prelude.Semigroup(union(__dict_Ord_26));
};
var monoidMap = function (__dict_Ord_16) {
    return new Data_Monoid.Monoid(function () {
        return semigroupMap(__dict_Ord_16);
    }, empty);
};
var traversableMap = function (__dict_Ord_27) {
    return new Data_Traversable.Traversable(function () {
        return foldableMap;
    }, function () {
        return functorMap;
    }, function (__dict_Applicative_29) {
        return Data_Traversable.traverse(traversableMap(__dict_Ord_27))(__dict_Applicative_29)(Prelude.id(Prelude.categoryFn));
    }, function (__dict_Applicative_28) {
        return function (f) {
            return function (ms) {
                return Data_Foldable.foldr(Data_List.foldableList)(function (x) {
                    return function (acc) {
                        return Prelude["<*>"](__dict_Applicative_28["__superclass_Prelude.Apply_0"]())(Prelude["<$>"]((__dict_Applicative_28["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(union(__dict_Ord_27))(x))(acc);
                    };
                })(Prelude.pure(__dict_Applicative_28)(empty))(Prelude["<$>"](Data_List.functorList)(Prelude["<$>"]((__dict_Applicative_28["__superclass_Prelude.Apply_0"]())["__superclass_Prelude.Functor_0"]())(Data_Tuple.uncurry(singleton)))(Prelude["<$>"](Data_List.functorList)(Data_Traversable.traverse(Data_Tuple.traversableTuple)(__dict_Applicative_28)(f))(toList(ms))));
            };
        };
    });
};

/**
 *  | Compute the union of a collection of maps
 */
var unions = function (__dict_Ord_30) {
    return function (__dict_Foldable_31) {
        return Data_Foldable.foldl(__dict_Foldable_31)(union(__dict_Ord_30))(empty);
    };
};

/**
 *  | Update or delete the value for a key in a map
 */
var update = function (__dict_Ord_32) {
    return function (f) {
        return function (k) {
            return function (m) {
                return alter(__dict_Ord_32)(Data_Maybe.maybe(Data_Maybe.Nothing.value)(f))(k)(m);
            };
        };
    };
};
module.exports = {
    size: size, 
    unions: unions, 
    unionWith: unionWith, 
    union: union, 
    values: values, 
    keys: keys, 
    update: update, 
    alter: alter, 
    member: member, 
    "delete": $$delete, 
    fromListWith: fromListWith, 
    fromList: fromList, 
    toList: toList, 
    lookup: lookup, 
    insert: insert, 
    checkValid: checkValid, 
    singleton: singleton, 
    isEmpty: isEmpty, 
    empty: empty, 
    showTree: showTree, 
    eqMap: eqMap, 
    showMap: showMap, 
    ordMap: ordMap, 
    semigroupMap: semigroupMap, 
    monoidMap: monoidMap, 
    functorMap: functorMap, 
    foldableMap: foldableMap, 
    traversableMap: traversableMap
};
