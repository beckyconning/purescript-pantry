
/**
 *  | This module defines the random generator monad used by the `Test.QuickCheck`
 *  | module, as well as helper functions for constructing random generators.
 */
"use strict";
var $foreign = require("./foreign");
var Prelude = require("Prelude");
var $$Math = require("Math");
var Data_Array = require("Data.Array");
var Data_Maybe = require("Data.Maybe");
var Data_Monoid_Additive = require("Data.Monoid.Additive");
var Data_Foldable = require("Data.Foldable");
var Data_Tuple = require("Data.Tuple");
var Data_Traversable = require("Data.Traversable");
var Test_QuickCheck_LCG = require("Test.QuickCheck.LCG");
var Data_Int = require("Data.Int");
var Control_Monad_Eff = require("Control.Monad.Eff");
var Control_Monad_Eff_Random = require("Control.Monad.Eff.Random");
var Data_List = require("Data.List");

/**
 *  | The random generator monad
 *  |
 *  | `Gen` is a state monad which encodes a linear congruential generator.
 */
var Gen = (function () {
    function Gen(value0) {
        this.value0 = value0;
    };
    Gen.create = function (value0) {
        return new Gen(value0);
    };
    return Gen;
})();

/**
 *  | Run a random generator
 */
var runGen = function (_574) {
    return _574.value0;
};

/**
 *  | Create a random generator which uses the generator state explicitly.
 */
var stateful = function (f) {
    return new Gen(function (s) {
        return runGen(f(s))(s);
    });
};

/**
 *  | Create a random generator which depends on the size parameter.
 */
var sized = function (f) {
    return stateful(function (s) {
        return f(s.size);
    });
};

/**
 *  | Modify a random generator by setting a new random seed.
 */
var variant = function (n) {
    return function (g) {
        return Gen.create(function (s) {
            return runGen(g)((function () {
                var _684 = {};
                for (var _685 in s) {
                    if (s.hasOwnProperty(_685)) {
                        _684[_685] = s[_685];
                    };
                };
                _684.newSeed = n;
                return _684;
            })());
        });
    };
};

/**
 *  | Modify a random generator by setting a new size parameter.
 */
var resize = function (sz) {
    return function (g) {
        return Gen.create(function (s) {
            return runGen(g)((function () {
                var _686 = {};
                for (var _687 in s) {
                    if (s.hasOwnProperty(_687)) {
                        _686[_687] = s[_687];
                    };
                };
                _686.size = sz;
                return _686;
            })());
        });
    };
};

/**
 *  | Create a random generator for a function type.
 */
var repeatable = function (f) {
    return Gen.create(function (s) {
        return {
            value: function (a) {
                return (runGen(f(a))(s)).value;
            }, 
            state: s
        };
    });
};

/**
 *  | Perturb a random generator by modifying the current seed
 */
var perturbGen = function (n) {
    return function (_575) {
        var perturb = function (oldSeed) {
            return Test_QuickCheck_LCG.mkSeed(Prelude["+"](Prelude.semiringInt)(Test_QuickCheck_LCG.runSeed(Test_QuickCheck_LCG.lcgNext(Test_QuickCheck_LCG.mkSeed($foreign.float32ToInt32(n)))))(Test_QuickCheck_LCG.runSeed(oldSeed)));
        };
        return Gen.create(function (s) {
            return _575.value0((function () {
                var _690 = {};
                for (var _691 in s) {
                    if (s.hasOwnProperty(_691)) {
                        _690[_691] = s[_691];
                    };
                };
                _690.newSeed = perturb(s.newSeed);
                return _690;
            })());
        });
    };
};

/**
 *  | A random generator which simply outputs the current seed
 */
var lcgStep = (function () {
    var f = function (s) {
        return {
            value: Test_QuickCheck_LCG.runSeed(s.newSeed), 
            state: (function () {
                var _693 = {};
                for (var _694 in s) {
                    if (s.hasOwnProperty(_694)) {
                        _693[_694] = s[_694];
                    };
                };
                _693.newSeed = Test_QuickCheck_LCG.lcgNext(s.newSeed);
                return _693;
            })()
        };
    };
    return new Gen(f);
})();
var functorGen = new Prelude.Functor(function (f) {
    return function (_577) {
        return Gen.create(function (s) {
            var _697 = _577.value0(s);
            return {
                value: f(_697.value), 
                state: _697.state
            };
        });
    };
});

/**
 *  | A random generator which approximates a uniform random variable on `[0, 1]`
 */
var uniform = Prelude["<$>"](functorGen)(function (n) {
    return Data_Int.toNumber(n) / Data_Int.toNumber(Test_QuickCheck_LCG.lcgN);
})(lcgStep);

/**
 *  | Run a random generator, keeping only the randomly-generated result
 */
var evalGen = function (gen) {
    return function (st) {
        return (runGen(gen)(st)).value;
    };
};

/**
 *  | Create a random generator which chooses uniformly distributed
 *  | integers from the closed interval `[a, b]`.
 */
var chooseInt = function (a) {
    return function (b) {
        var clamp = function (x) {
            var _701 = Prelude.mod(Prelude.moduloSemiringInt)(x)(Prelude["+"](Prelude.semiringInt)(Prelude["-"](Prelude.ringInt)(b)(a))(Prelude.one(Prelude.semiringInt)));
            if (Prelude[">="](Prelude.ordInt)(_701)(0)) {
                return Prelude["+"](Prelude.semiringInt)(a)(_701);
            };
            if (Prelude.otherwise) {
                return Prelude["+"](Prelude.semiringInt)(Prelude["+"](Prelude.semiringInt)(b)(_701))(Prelude.one(Prelude.semiringInt));
            };
            throw new Error("Failed pattern match at bower_components/purescript-quickcheck/src/Test/QuickCheck/Gen.purs line 92, column 3 - line 93, column 3: " + [ _701.constructor.name ]);
        };
        return Prelude["<$>"](functorGen)(clamp)(lcgStep);
    };
};

/**
 *  | Create a random generator which samples a range of `Number`s i
 *  | with uniform probability.
 */
var choose = function (a) {
    return function (b) {
        var min = $$Math.min(a)(b);
        var max = $$Math.max(a)(b);
        return Prelude["<$>"](functorGen)(Prelude[">>>"](Prelude.semigroupoidFn)(Prelude["*"](Prelude.semiringNumber)(max - min))(Prelude["+"](Prelude.semiringNumber)(min)))(uniform);
    };
};
var applyGen = new Prelude.Apply(function () {
    return functorGen;
}, function (_578) {
    return function (_579) {
        return Gen.create(function (s) {
            var _704 = _578.value0(s);
            var _705 = _579.value0(_704.state);
            return {
                value: _704.value(_705.value), 
                state: _705.state
            };
        });
    };
});
var bindGen = new Prelude.Bind(function () {
    return applyGen;
}, function (_580) {
    return function (g) {
        return Gen.create(function (s) {
            var _714 = _580.value0(s);
            return runGen(g(_714.value))(_714.state);
        });
    };
});

/**
 *  | Create a random generator which selects and executes a random generator from
 *  | a non-empty, weighted collection of random generators.
 */
var frequency = function (x) {
    return function (xs) {
        var xxs = new Data_List.Cons(x, xs);
        var total = Data_Monoid_Additive.runAdditive(Data_Foldable.fold(Data_List.foldableList)(Data_Monoid_Additive.monoidAdditive(Prelude.semiringNumber))(Prelude.map(Data_List.functorList)(Prelude["<<<"](Prelude.semigroupoidFn)(Data_Monoid_Additive.Additive)(Data_Tuple.fst))(xxs)));
        var pick = function (__copy_n) {
            return function (__copy_d) {
                return function (__copy__576) {
                    var n = __copy_n;
                    var d = __copy_d;
                    var _576 = __copy__576;
                    tco: while (true) {
                        var n_1 = n;
                        var d_1 = d;
                        if (_576 instanceof Data_List.Nil) {
                            return d_1;
                        };
                        if (_576 instanceof Data_List.Cons) {
                            var _721 = n <= _576.value0.value0;
                            if (_721) {
                                return _576.value0.value1;
                            };
                            if (!_721) {
                                var __tco_n = n - _576.value0.value0;
                                var __tco_d = d;
                                var __tco__576 = _576.value1;
                                n = __tco_n;
                                d = __tco_d;
                                _576 = __tco__576;
                                continue tco;
                            };
                            throw new Error("Failed pattern match at bower_components/purescript-quickcheck/src/Test/QuickCheck/Gen.purs line 106, column 1 - line 107, column 1: " + [ _721.constructor.name ]);
                        };
                        throw new Error("Failed pattern match at bower_components/purescript-quickcheck/src/Test/QuickCheck/Gen.purs line 106, column 1 - line 107, column 1: " + [ n.constructor.name, d.constructor.name, _576.constructor.name ]);
                    };
                };
            };
        };
        return Prelude.bind(bindGen)(choose(0)(total))(function (_76) {
            return pick(_76)(Data_Tuple.snd(x))(xxs);
        });
    };
};

/**
 *  | Create a random generator which selects and executes a random generator from
 *  | a non-empty collection of random generators with uniform probability.
 */
var oneOf = function (x) {
    return function (xs) {
        return Prelude.bind(bindGen)(chooseInt(Prelude.zero(Prelude.semiringInt))(Data_Array.length(xs)))(function (_75) {
            var _728 = Prelude["<"](Prelude.ordInt)(_75)(Prelude.one(Prelude.semiringInt));
            if (_728) {
                return x;
            };
            if (!_728) {
                return Data_Maybe.fromMaybe(x)(Data_Array["!!"](xs)(Prelude["-"](Prelude.ringInt)(_75)(Prelude.one(Prelude.semiringInt))));
            };
            throw new Error("Failed pattern match at bower_components/purescript-quickcheck/src/Test/QuickCheck/Gen.purs line 99, column 1 - line 100, column 1: " + [ _728.constructor.name ]);
        });
    };
};
var applicativeGen = new Prelude.Applicative(function () {
    return applyGen;
}, function (a) {
    return new Gen(function (s) {
        return {
            value: a, 
            state: s
        };
    });
});

/**
 *  | Create a random generator which selects a value from a non-empty collection with
 *  | uniform probability.
 */
var elements = function (x) {
    return function (xs) {
        return Prelude.bind(bindGen)(chooseInt(Prelude.zero(Prelude.semiringInt))(Data_Array.length(xs)))(function (_81) {
            return Prelude.pure(applicativeGen)((function () {
                var _730 = Prelude["=="](Prelude.eqInt)(_81)(Prelude.zero(Prelude.semiringInt));
                if (_730) {
                    return x;
                };
                if (!_730) {
                    return Data_Maybe.fromMaybe(x)(Data_Array["!!"](xs)(Prelude["-"](Prelude.ringInt)(_81)(Prelude.one(Prelude.semiringInt))));
                };
                throw new Error("Failed pattern match at bower_components/purescript-quickcheck/src/Test/QuickCheck/Gen.purs line 138, column 1 - line 139, column 1: " + [ _730.constructor.name ]);
            })());
        });
    };
};
var monadGen = new Prelude.Monad(function () {
    return applicativeGen;
}, function () {
    return bindGen;
});

/**
 *  | Create a random generator which generates a vector of random values of a specified size.
 */
var vectorOf = function (k) {
    return function (g) {
        if (Prelude["<="](Prelude.ordInt)(k)(0)) {
            return Prelude["return"](applicativeGen)([  ]);
        };
        if (Prelude.otherwise) {
            return Data_Traversable.sequence(Data_Traversable.traversableArray)(applicativeGen)(Prelude["<$>"](Prelude.functorArray)(Prelude["const"](g))(Data_Array.range(Prelude.one(Prelude.semiringInt))(k)));
        };
        throw new Error("Failed pattern match at bower_components/purescript-quickcheck/src/Test/QuickCheck/Gen.purs line 131, column 1 - line 132, column 1: " + [ k.constructor.name, g.constructor.name ]);
    };
};

/**
 *  | Create a random generator which generates an array of random values.
 */
var arrayOf = function (g) {
    return sized(function (n) {
        return Prelude.bind(bindGen)(chooseInt(Prelude.zero(Prelude.semiringInt))(n))(function (_77) {
            return vectorOf(_77)(g);
        });
    });
};

/**
 *  | Create a random generator which generates a non-empty array of random values.
 */
var arrayOf1 = function (g) {
    return sized(function (n) {
        return Prelude.bind(bindGen)(chooseInt(Prelude.zero(Prelude.semiringInt))(n))(function (_80) {
            return Prelude.bind(bindGen)(g)(function (_79) {
                return Prelude.bind(bindGen)(vectorOf(Prelude["-"](Prelude.ringInt)(_80)(Prelude.one(Prelude.semiringInt)))(g))(function (_78) {
                    return Prelude["return"](applicativeGen)(new Data_Tuple.Tuple(_79, _78));
                });
            });
        });
    });
};

/**
 *  | Sample a random generator
 */
var sample = function (seed) {
    return function (sz) {
        return function (g) {
            return evalGen(vectorOf(sz)(g))({
                newSeed: seed, 
                size: sz
            });
        };
    };
};

/**
 *  | Sample a random generator, using a randomly generated seed
 */
var randomSample$prime = function (n) {
    return function (g) {
        return function __do() {
            var _82 = Test_QuickCheck_LCG.randomSeed();
            return Prelude["return"](Control_Monad_Eff.applicativeEff)(sample(_82)(n)(g))();
        };
    };
};

/**
 *  | Get a random sample of 10 values
 */
var randomSample = randomSample$prime(10);
module.exports = {
    "randomSample'": randomSample$prime, 
    randomSample: randomSample, 
    sample: sample, 
    uniform: uniform, 
    perturbGen: perturbGen, 
    evalGen: evalGen, 
    runGen: runGen, 
    elements: elements, 
    vectorOf: vectorOf, 
    arrayOf1: arrayOf1, 
    arrayOf: arrayOf, 
    frequency: frequency, 
    oneOf: oneOf, 
    chooseInt: chooseInt, 
    choose: choose, 
    resize: resize, 
    sized: sized, 
    variant: variant, 
    stateful: stateful, 
    repeatable: repeatable, 
    functorGen: functorGen, 
    applyGen: applyGen, 
    applicativeGen: applicativeGen, 
    bindGen: bindGen, 
    monadGen: monadGen
};
