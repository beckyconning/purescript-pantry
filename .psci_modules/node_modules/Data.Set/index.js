
/**
 *  | This module defines a type of sets as balanced 2-3 trees, based on
 *  | <http://www.cs.princeton.edu/~dpw/courses/cos326-12/ass/2-3-trees.pdf>
 *  |
 *  | Qualified import is encouraged, so as to avoid name clashes with other modules.
 */
"use strict";
var Prelude = require("Prelude");
var Data_Foldable = require("Data.Foldable");
var Data_Map = require("Data.Map");
var Data_Tuple = require("Data.Tuple");
var Data_Maybe = require("Data.Maybe");
var Data_Monoid = require("Data.Monoid");
var Data_List = require("Data.List");

/**
 *  | `Set a` represents a set of values of type `a`
 */
var Set = (function () {
    function Set(value0) {
        this.value0 = value0;
    };
    Set.create = function (value0) {
        return new Set(value0);
    };
    return Set;
})();

/**
 *  | Form the union of two sets
 *  | 
 *  | Running time: `O(n * log(m))`
 */
var union = function (__dict_Ord_0) {
    return function (_488) {
        return function (_489) {
            return new Set(Data_Map.union(__dict_Ord_0)(_488.value0)(_489.value0));
        };
    };
};

/**
 *  | Convert a set to a list
 */
var toList = function (_486) {
    return Prelude.map(Data_List.functorList)(Data_Tuple.fst)(Data_Map.toList(_486.value0));
};

/**
 *  | Find the size of a set
 */
var size = function (_487) {
    return Data_Map.size(_487.value0);
};

/**
 *  | Create a set with one element
 */
var singleton = function (a) {
    return new Set(Data_Map.singleton(a)(Prelude.unit));
};
var showSet = function (__dict_Show_1) {
    return new Prelude.Show(function (s) {
        return "fromList " + Prelude.show(Data_List.showList(__dict_Show_1))(toList(s));
    });
};
var monoidSemigroup = function (__dict_Ord_3) {
    return new Prelude.Semigroup(union(__dict_Ord_3));
};

/**
 *  | Test if a value is a member of a set
 */
var member = function (__dict_Ord_4) {
    return function (a) {
        return function (_483) {
            return Data_Map.member(__dict_Ord_4)(a)(_483.value0);
        };
    };
};

/**
 *  | Test if a set is empty
 */
var isEmpty = function (_481) {
    return Data_Map.isEmpty(_481.value0);
};

/**
 *  | Insert a value into a set
 */
var insert = function (__dict_Ord_5) {
    return function (a) {
        return function (_484) {
            return new Set(Data_Map.insert(__dict_Ord_5)(a)(Prelude.unit)(_484.value0));
        };
    };
};
var foldableSet = new Data_Foldable.Foldable(function (__dict_Monoid_6) {
    return function (f) {
        return Prelude["<<<"](Prelude.semigroupoidFn)(Data_Foldable.foldMap(Data_List.foldableList)(__dict_Monoid_6)(f))(toList);
    };
}, function (f) {
    return function (x) {
        return Prelude["<<<"](Prelude.semigroupoidFn)(Data_Foldable.foldl(Data_List.foldableList)(f)(x))(toList);
    };
}, function (f) {
    return function (x) {
        return Prelude["<<<"](Prelude.semigroupoidFn)(Data_Foldable.foldr(Data_List.foldableList)(f)(x))(toList);
    };
});
var eqSet = function (__dict_Eq_7) {
    return new Prelude.Eq(function (_490) {
        return function (_491) {
            return Prelude["=="](Data_Map.eqMap(__dict_Eq_7)(Prelude.eqUnit))(_490.value0)(_491.value0);
        };
    });
};
var ordSet = function (__dict_Ord_2) {
    return new Prelude.Ord(function () {
        return eqSet(__dict_Ord_2["__superclass_Prelude.Eq_0"]());
    }, function (s1) {
        return function (s2) {
            return Prelude.compare(Data_List.ordList(__dict_Ord_2))(toList(s1))(toList(s2));
        };
    });
};

/**
 *  | An empty set
 */
var empty = new Set(Data_Map.empty);

/**
 *  | Create a set from a list of elements
 */
var fromList = function (__dict_Ord_8) {
    return Data_Foldable.foldl(Data_List.foldableList)(function (m) {
        return function (a) {
            return insert(__dict_Ord_8)(a)(m);
        };
    })(empty);
};
var monoidSet = function (__dict_Ord_9) {
    return new Data_Monoid.Monoid(function () {
        return monoidSemigroup(__dict_Ord_9);
    }, empty);
};

/**
 *  | Form the union of a collection of sets
 */
var unions = function (__dict_Ord_10) {
    return Data_Foldable.foldl(Data_List.foldableList)(union(__dict_Ord_10))(empty);
};

/**
 *  | Delete a value from a set
 */
var $$delete = function (__dict_Ord_11) {
    return function (a) {
        return function (_485) {
            return new Set(Data_Map["delete"](__dict_Ord_11)(a)(_485.value0));
        };
    };
};

/**
 *  | Form the set difference
 */
var difference = function (__dict_Ord_12) {
    return function (s1) {
        return function (s2) {
            return Data_Foldable.foldl(Data_List.foldableList)(Prelude.flip($$delete(__dict_Ord_12)))(s1)(toList(s2));
        };
    };
};

/**
 *  | Check whether the underlying tree satisfies the 2-3 invariant
 *  | 
 *  | This function is provided for internal use.
 */
var checkValid = function (_482) {
    return Data_Map.checkValid(_482.value0);
};
module.exports = {
    difference: difference, 
    unions: unions, 
    union: union, 
    size: size, 
    fromList: fromList, 
    toList: toList, 
    "delete": $$delete, 
    member: member, 
    insert: insert, 
    checkValid: checkValid, 
    singleton: singleton, 
    isEmpty: isEmpty, 
    empty: empty, 
    eqSet: eqSet, 
    showSet: showSet, 
    ordSet: ordSet, 
    monoidSet: monoidSet, 
    monoidSemigroup: monoidSemigroup, 
    foldableSet: foldableSet
};
