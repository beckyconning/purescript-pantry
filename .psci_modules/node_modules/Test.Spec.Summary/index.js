"use strict";
var Prelude = require("Prelude");
var Data_Foldable = require("Data.Foldable");
var Data_Monoid = require("Data.Monoid");
var Test_Spec = require("Test.Spec");
var Count = (function () {
    function Count(value0, value1, value2) {
        this.value0 = value0;
        this.value1 = value1;
        this.value2 = value2;
    };
    Count.create = function (value0) {
        return function (value1) {
            return function (value2) {
                return new Count(value0, value1, value2);
            };
        };
    };
    return Count;
})();
var semigroupCount = new Prelude.Semigroup(function (_155) {
    return function (_156) {
        return new Count(Prelude["+"](Prelude.semiringInt)(_155.value0)(_156.value0), Prelude["+"](Prelude.semiringInt)(_155.value1)(_156.value1), Prelude["+"](Prelude.semiringInt)(_155.value2)(_156.value2));
    };
});
var monoidCount = new Data_Monoid.Monoid(function () {
    return semigroupCount;
}, new Count(0, 0, 0));
var summarize = Data_Foldable.foldMap(Data_Foldable.foldableArray)(monoidCount)(function (g) {
    if (g instanceof Test_Spec.It && g.value1 instanceof Test_Spec.Success) {
        return new Count(1, 0, 0);
    };
    if (g instanceof Test_Spec.It && g.value1 instanceof Test_Spec.Failure) {
        return new Count(0, 1, 0);
    };
    if (g instanceof Test_Spec.Pending) {
        return new Count(0, 0, 1);
    };
    if (g instanceof Test_Spec.Describe) {
        return summarize(g.value1);
    };
    throw new Error("Failed pattern match: " + [ g.constructor.name ]);
});
var successful = function (groups) {
    var _250 = summarize(groups);
    if (_250.value1 === 0) {
        return true;
    };
    return false;
};
module.exports = {
    Count: Count, 
    successful: successful, 
    summarize: summarize, 
    semigroupCount: semigroupCount, 
    monoidCount: monoidCount
};
